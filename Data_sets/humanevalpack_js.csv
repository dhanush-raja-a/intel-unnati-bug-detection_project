task_id,prompt,declaration,canonical_solution,buggy_solution,bug_type,failure_symptoms,entry_point,import,test_setup,test,example_test,signature,docstring,instruction
JavaScript/0,"/* Check if in given list of numbers, are any two numbers closer to each other than
  given threshold.
  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)
  false
  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
  true
  */
const hasCloseElements = (numbers, threshold) => {
","
const hasCloseElements = (numbers, threshold) => {
","  for (let i = 0; i < numbers.length; i++) {
    for (let j = 0; j < numbers.length; j++) {
      if (i != j) {
        let distance = Math.abs(numbers[i] - numbers[j]);
        if (distance < threshold) {
          return true;
        }
      }
    }
  }
  return false;
}

","  for (let i = 0; i < numbers.length; i++) {
    for (let j = 0; j < numbers.length; j++) {
      if (i != j) {
        let distance = numbers[i] - numbers[j];
        if (distance < threshold) {
          return true;
        }
      }
    }
  }
  return false;
}

",missing logic,incorrect output,hasCloseElements,,,"const testHasCloseElements = () => {
  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)
  console.assert(
    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false
  )
  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)
  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)
  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)
  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)
  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)
}

testHasCloseElements()
","const testHasCloseElements = () => {
  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)
  console.assert(
    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true
  )
}
testHasCloseElements()
","const hasCloseElements = (numbers, threshold)","Check if in given list of numbers, are any two numbers closer to each other than
given threshold.
>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)
false
>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
true","Write a JavaScript function `const hasCloseElements = (numbers, threshold)` to solve the following problem:
Check if in given list of numbers, are any two numbers closer to each other than
given threshold.
>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)
false
>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
true"
JavaScript/1,"/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
  separate those group into separate strings and return the list of those.
  Separate groups are balanced (each open brace is properly closed) and not nested within each other
  Ignore any spaces in the input string.
  >>> separateParenGroups('( ) (( )) (( )( ))')
  ['()', '(())', '(()())']
  */
const separateParenGroups = (paren_string) => {
","
const separateParenGroups = (paren_string) => {
","  var result = [];
  var current_string = [];
  var current_depth = 0;

  for (const c of paren_string) {
    if (c == '(') {
      current_depth += 1;
      current_string.push(c);
    } else if (c == ')') {
      current_depth -= 1;
      current_string.push(c);
      if (current_depth == 0) {
        result.push(current_string.join(''));
        current_string = [];
      }
    }
  }

  return result;
}

","  var result = [];
  var current_string = [];
  var current_depth = 0;

  for (const c of paren_string) {
    if (c == '(') {
      current_depth += 1;
      current_string.push(c);
    } else if (c == ')') {
      current_depth -= 1;
      current_string.push(c);
      if (current_depth < 0) {
        result.push(current_string.join(''));
        current_string = [];
      }
    }
  }

  return result;
}

",operator misuse,incorrect output,separateParenGroups,,,"const testSeparateParenGroups = () => {
  console.assert(
    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===
      JSON.stringify(['(()())', '((()))', '()', '((())()())'])
  )
  console.assert(
    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===
      JSON.stringify(['()', '(())', '((()))', '(((())))'])
  )
  console.assert(
    JSON.stringify(separateParenGroups('(()(())((())))')) ===
      JSON.stringify(['(()(())((())))'])
  )
  console.assert(
    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===
      JSON.stringify(['()', '(())', '(()())'])
  )
}

testSeparateParenGroups()
","const testSeparateParenGroups = () => {
  console.assert(
    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===
      JSON.stringify(['()', '(())', '(()())'])
  )
}
testSeparateParenGroups()
",const separateParenGroups = (paren_string),"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
separate those group into separate strings and return the list of those.
Separate groups are balanced (each open brace is properly closed) and not nested within each other
Ignore any spaces in the input string.
>>> separateParenGroups('( ) (( )) (( )( ))')
['()', '(())', '(()())']","Write a JavaScript function `const separateParenGroups = (paren_string)` to solve the following problem:
Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
separate those group into separate strings and return the list of those.
Separate groups are balanced (each open brace is properly closed) and not nested within each other
Ignore any spaces in the input string.
>>> separateParenGroups('( ) (( )) (( )( ))')
['()', '(())', '(()())']"
JavaScript/2,"/* Given a positive floating point number, it can be decomposed into
  and integer part (largest integer smaller than given number) and decimals
  (leftover part always smaller than 1).

  Return the decimal part of the number.
  >>> truncateNumber(3.5)
  0.5
  */
const truncateNumber = (number) => {
","
const truncateNumber = (number) => {
","  return number % 1.0;
}

","  return number % 1.0 + 1.0;
}

",excess logic,incorrect output,truncateNumber,,,"const testTruncateNumber = () => {
  console.assert(truncateNumber(3.5) === 0.5)

  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)

  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))
}

testTruncateNumber()
","const testTruncateNumber = () => {
  console.assert(truncateNumber(3.5) === 0.5)
}
testTruncateNumber()
",const truncateNumber = (number),"Given a positive floating point number, it can be decomposed into
and integer part (largest integer smaller than given number) and decimals
(leftover part always smaller than 1).
Return the decimal part of the number.
>>> truncateNumber(3.5)
0.5","Write a JavaScript function `const truncateNumber = (number)` to solve the following problem:
Given a positive floating point number, it can be decomposed into
and integer part (largest integer smaller than given number) and decimals
(leftover part always smaller than 1).
Return the decimal part of the number.
>>> truncateNumber(3.5)
0.5"
JavaScript/3,"/* You're given a list of deposit and withdrawal operations on a bank account that starts with
  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
  at that point function should return true. Otherwise it should return false.
  >>> belowZero([1, 2, 3])
  false
  >>> belowZero([1, 2, -4, 5])
  true
  */
const belowZero = (operations) => {
","
const belowZero = (operations) => {
","  var balance = 0;
  for (const op of operations) {
    balance += op;
    if (balance < 0) {
      return true;
    }
  }
  return false;
}

","  var balance = 0;
  for (const op of operations) {
    balance += op;
    if (balance == 0) {
      return true;
    }
  }
  return false;
}

",operator misuse,incorrect output,belowZero,,,"const testBelowZero = () => {
  console.assert(belowZero([]) === false)
  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)
  console.assert(belowZero([1, 2, -4, 5, 6]) === true)
  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)
  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)
  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)
}

testBelowZero()
","const testBelowZero = () => {
  console.assert(belowZero([1, 2, 3]) === false)
  console.assert(belowZero([1, 2, -4, 5]) === true)
}
testBelowZero()
",const belowZero = (operations),"You're given a list of deposit and withdrawal operations on a bank account that starts with
zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
at that point function should return true. Otherwise it should return false.
>>> belowZero([1, 2, 3])
false
>>> belowZero([1, 2, -4, 5])
true","Write a JavaScript function `const belowZero = (operations)` to solve the following problem:
You're given a list of deposit and withdrawal operations on a bank account that starts with
zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
at that point function should return true. Otherwise it should return false.
>>> belowZero([1, 2, 3])
false
>>> belowZero([1, 2, -4, 5])
true"
JavaScript/4,"/* For a given list of input numbers, calculate Mean Absolute Deviation
  around the mean of this dataset.
  Mean Absolute Deviation is the average absolute difference between each
  element and a centerpoint (mean in this case):
  MAD = average | x - x_mean |
  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])
  1.0
  */
const meanAbsoluteDeviation = (numbers) => {
","
const meanAbsoluteDeviation = (numbers) => {
","  var mean = numbers.reduce((prev, item) => {
    return prev + item;
  }, 0) / numbers.length;
  return numbers.reduce((prev, item) => {
    return prev + Math.abs(item - mean);
  }, 0) / numbers.length;

}

","  var mean = numbers.reduce((prev, item) => {
    return prev + item;
  }, 0) / numbers.length;
  return numbers.reduce((prev, item) => {
    return prev + Math.abs(item - mean);
  }, 0) / mean;

}

",variable misuse,incorrect output,meanAbsoluteDeviation,,,"const testMeanAbsoluteDeviation = () => {
  console.assert(
    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6
  )
  console.assert(
    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
  )
  console.assert(
    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6
  )
}

testMeanAbsoluteDeviation()
","const testMeanAbsoluteDeviation = () => {
  console.assert(
    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6
  )
}
testMeanAbsoluteDeviation()
",const meanAbsoluteDeviation = (numbers),"For a given list of input numbers, calculate Mean Absolute Deviation
around the mean of this dataset.
Mean Absolute Deviation is the average absolute difference between each
element and a centerpoint (mean in this case):
MAD = average | x - x_mean |
>>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])
1.0","Write a JavaScript function `const meanAbsoluteDeviation = (numbers)` to solve the following problem:
For a given list of input numbers, calculate Mean Absolute Deviation
around the mean of this dataset.
Mean Absolute Deviation is the average absolute difference between each
element and a centerpoint (mean in this case):
MAD = average | x - x_mean |
>>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])
1.0"
JavaScript/5,"/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
  >>> intersperse([], 4)
  []
  >>> intersperse([1, 2, 3], 4)
  [1, 4, 2, 4, 3]
  */
const intersperse = (numbers, delimeter) => {
","
const intersperse = (numbers, delimeter) => {
","  if (!Array.isArray(numbers) || numbers.length == 0)
    return [];
  var result = [];
  for (const n of numbers) {
    result.push(n, delimeter);
  }
  result.pop();
  return result;
}

","  if (!Array.isArray(numbers) || numbers.length == 0)
    return [];
  var result = [];
  for (const n of numbers) {
    result.push(n, delimeter);
  }
  return result;
}

",missing logic,incorrect output,intersperse,,,"const testIntersperse = () => {
  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))
  console.assert(
    JSON.stringify(
      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])
  )
  console.assert(
    JSON.stringify(
      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])
  )
}

testIntersperse()
","const testIntersperse = () => {
  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))
  console.assert(
    JSON.stringify(
      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])
  )
}
testIntersperse()
","const intersperse = (numbers, delimeter)","Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
>>> intersperse([], 4)
[]
>>> intersperse([1, 2, 3], 4)
[1, 4, 2, 4, 3]","Write a JavaScript function `const intersperse = (numbers, delimeter)` to solve the following problem:
Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
>>> intersperse([], 4)
[]
>>> intersperse([1, 2, 3], 4)
[1, 4, 2, 4, 3]"
JavaScript/6,"/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
  For each of the group, output the deepest level of nesting of parentheses.
  E.g. (()()) has maximum two levels of nesting while ((())) has three.

  >>> parseNestedParens('(()()) ((())) () ((())()())')
  [2, 3, 1, 3]
  */
const parseNestedParens = (paren_string) => {
","
const parseNestedParens = (paren_string) => {
","  var parseParenGroup = function (s) {
    let depth = 0, max_depth = 0;
    for (const c of s) {
      if (c == '(') {
        depth += 1;
        max_depth = Math.max(max_depth, depth);
      } else {
        depth -= 1;
      }
    }
    return max_depth;
  }
  return paren_string.split(' ')
          .filter(x => x != '')
          .map(x => parseParenGroup(x));
}

","  var parseParenGroup = function (s) {
    let depth = 0, max_depth = 0;
    for (const c of s) {
      if (c == '(') {
        depth += 1;
        max_depth = Math.max(max_depth, depth);
      } else {
        max_depth -= 1;
      }
    }
    return max_depth;
  }
  return paren_string.split(' ')
          .filter(x => x != '')
          .map(x => parseParenGroup(x));
}

",variable misuse,incorrect output,parseNestedParens,,,"const testParseNestedParens = () => {
  console.assert(
    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===
      JSON.stringify([2, 3, 1, 3])
  )
  console.assert(
    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===
      JSON.stringify([1, 2, 3, 4])
  )
  console.assert(
    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])
  )
}

testParseNestedParens()
","const testParseNestedParens = () => {
  console.assert(
    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===
      JSON.stringify([2, 3, 1, 3])
  )
}
testParseNestedParens()
",const parseNestedParens = (paren_string),"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
For each of the group, output the deepest level of nesting of parentheses.
E.g. (()()) has maximum two levels of nesting while ((())) has three.
>>> parseNestedParens('(()()) ((())) () ((())()())')
[2, 3, 1, 3]","Write a JavaScript function `const parseNestedParens = (paren_string)` to solve the following problem:
Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
For each of the group, output the deepest level of nesting of parentheses.
E.g. (()()) has maximum two levels of nesting while ((())) has three.
>>> parseNestedParens('(()()) ((())) () ((())()())')
[2, 3, 1, 3]"
JavaScript/7,"/* Filter an input list of strings only for ones that contain given substring
  >>> filterBySubstring([], 'a')
  []
  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')
  ['abc', 'bacd', 'array']
  */
const filterBySubstring = (strings, substring) => {
","
const filterBySubstring = (strings, substring) => {
","  return strings.filter(x => x.indexOf(substring) != -1);
}

","  return strings.filter(x => substring.indexOf(x) != -1);
}

",variable misuse,incorrect output,filterBySubstring,,,"const testFilterBySubstring = () => {
  console.assert(
    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])
  )
  console.assert(
    JSON.stringify(
      filterBySubstring(
        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],
        'xxx'
      )
    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])
  )
  console.assert(
    JSON.stringify(
      filterBySubstring(
        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],
        'xx'
      )
    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])
  )
  console.assert(
    JSON.stringify(
      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')
    ) === JSON.stringify(['grunt', 'prune'])
  )
}

testFilterBySubstring()
","const testFilterBySubstring = () => {
  console.assert(
    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])
  )
  console.assert(
    JSON.stringify(
      filterBySubstring(
        ['abc', 'bacd', 'cde', 'array'], 'a'
      )
    ) === JSON.stringify(['abc', 'bacd', 'array'])
  )
}
testFilterBySubstring()
","const filterBySubstring = (strings, substring)","Filter an input list of strings only for ones that contain given substring
>>> filterBySubstring([], 'a')
[]
>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')
['abc', 'bacd', 'array']","Write a JavaScript function `const filterBySubstring = (strings, substring)` to solve the following problem:
Filter an input list of strings only for ones that contain given substring
>>> filterBySubstring([], 'a')
[]
>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')
['abc', 'bacd', 'array']"
JavaScript/8,"/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
  Empty sum should be equal to 0 and empty product should be equal to 1.
  >>> sumProduct([])
  (0, 1)
  >>> sumProduct([1, 2, 3, 4])
  (10, 24)
  */
const sumProduct = (numbers, int) => {
","
const sumProduct = (numbers, int) => {
","  var sum_value = 0, prod_value = 1;
  for (const n of numbers) {
    sum_value += n;
    prod_value *= n;
  }
  return [sum_value, prod_value];
}

","  var sum_value = 0, prod_value = 0;
  for (const n of numbers) {
    sum_value += n;
    prod_value *= n;
  }
  return [sum_value, prod_value];
}

",value misuse,incorrect output,sumProduct,,,"const testSumProduct = () => {
  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))
  console.assert(
    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])
  )
  console.assert(
    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])
  )
  console.assert(
    JSON.stringify(
      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])
  )
  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))
}

testSumProduct()
","const testSumProduct = () => {
  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))
  console.assert(
    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])
  )
}
testSumProduct()
","const sumProduct = (numbers, int)","For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
Empty sum should be equal to 0 and empty product should be equal to 1.
>>> sumProduct([])
(0, 1)
>>> sumProduct([1, 2, 3, 4])
(10, 24)","Write a JavaScript function `const sumProduct = (numbers, int)` to solve the following problem:
For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
Empty sum should be equal to 0 and empty product should be equal to 1.
>>> sumProduct([])
(0, 1)
>>> sumProduct([1, 2, 3, 4])
(10, 24)"
JavaScript/9,"/* From a given list of integers, generate a list of rolling maximum element found until given moment
  in the sequence.
  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])
  [1, 2, 3, 3, 3, 4, 4]
  */
const rollingMax = (numbers) => {
","
const rollingMax = (numbers) => {
","  var running_max, result = [];
  for (const n of numbers) {
    if (running_max == undefined)
      running_max = n;
    else
      running_max = Math.max(running_max, n);
    result.push(running_max);
  }
  return result;
}

","  var running_max, result = [];
  for (const n of numbers) {
    if (running_max == undefined)
      running_max = n;
    else
      running_max = Math.max(numbers);
    result.push(running_max);
  }
  return result;
}

",variable misuse,incorrect output,rollingMax,,,"const testRollingMax = () => {
  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))
  console.assert(
    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])
  )
  console.assert(
    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])
  )
  console.assert(
    JSON.stringify(
      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])
  )
}

testRollingMax()
","const testRollingMax = () => {
  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))
}
testRollingMax()
",const rollingMax = (numbers),"From a given list of integers, generate a list of rolling maximum element found until given moment
in the sequence.
>>> rollingMax([1, 2, 3, 2, 3, 4, 2])
[1, 2, 3, 3, 3, 4, 4]","Write a JavaScript function `const rollingMax = (numbers)` to solve the following problem:
From a given list of integers, generate a list of rolling maximum element found until given moment
in the sequence.
>>> rollingMax([1, 2, 3, 2, 3, 4, 2])
[1, 2, 3, 3, 3, 4, 4]"
JavaScript/10,"/* Test if gniven strig is a palindrome */
const isPalindrome = (string) => {
  return string == string.split('').reverse().join('');
}

/* Find the shortest palindrome that begins with a supplied string.
  Algorithm idea is simple:
  - Find the longest postfix of supplied string that is a palindrome.
  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
  >>> makePalindrome('')
  ''
  >>> makePalindrome('cat')
  'catac'
  >>> makePalindrome('cata')
  'catac'
  */
const makePalindrome = (string) => {
","const isPalindrome = (string) => {
  return string == string.split('').reverse().join('');
}

const makePalindrome = (string) => {
","  if (string == '')
    return '';
  var beginning_of_suffix = 0;
  while (!isPalindrome(string.slice(beginning_of_suffix)))
    beginning_of_suffix += 1;
  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');
}

","  if (string == '')
    return '';
  var beginning_of_suffix = 0;
  while (!isPalindrome(string))
    beginning_of_suffix += 1;
  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');
}

",missing logic,stackoverflow,makePalindrome,,,"const testmakePalindrome = () => {
  console.assert(makePalindrome('') === '')
  console.assert(makePalindrome('x') === 'x')
  console.assert(makePalindrome('xyz') === 'xyzyx')
  console.assert(makePalindrome('xyx') === 'xyx')
  console.assert(makePalindrome('jerry') === 'jerryrrej')
}

testmakePalindrome()
","const testmakePalindrome = () => {
  console.assert(makePalindrome('') === '')
  console.assert(makePalindrome('cat') === 'catac')
  console.assert(makePalindrome('cata') === 'catac')
}
testmakePalindrome()
",const makePalindrome = (string),"Find the shortest palindrome that begins with a supplied string.
Algorithm idea is simple:
- Find the longest postfix of supplied string that is a palindrome.
- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
>>> makePalindrome('')
''
>>> makePalindrome('cat')
'catac'
>>> makePalindrome('cata')
'catac'","Write a JavaScript function `const makePalindrome = (string)` to solve the following problem:
Find the shortest palindrome that begins with a supplied string.
Algorithm idea is simple:
- Find the longest postfix of supplied string that is a palindrome.
- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
>>> makePalindrome('')
''
>>> makePalindrome('cat')
'catac'
>>> makePalindrome('cata')
'catac'"
JavaScript/11,"/* Input are two strings a and b consisting only of 1s and 0s.
  Perform binary XOR on these inputs and return result also as a string.
  >>> stringXor('010', '110')
  '100'
  */
const stringXor = (a, b) => {
","
const stringXor = (a, b) => {
","  var xor = function (i, j) {
    if (i == j)
      return '0';
    else
      return '1';
  }
  return a.split('').map((item, index) => xor(item, b[index])).join('');
}

","  var xor = function (i, j) {
    if (i == j)
      return '1';
    else
      return '0';
  }
  return a.split('').map((item, index) => xor(item, b[index])).join('');
}

",value misuse,incorrect output,stringXor,,,"const testStringXor = () => {
  console.assert(stringXor('111000', '101010') === '010010')
  console.assert(stringXor('1', '1') === '0')
  console.assert(stringXor('0101', '0000') === '0101')
}

testStringXor()
","const testStringXor = () => {
  console.assert(stringXor('010', '110') === '100')
}
testStringXor()
","const stringXor = (a, b)","Input are two strings a and b consisting only of 1s and 0s.
Perform binary XOR on these inputs and return result also as a string.
>>> stringXor('010', '110')
'100'","Write a JavaScript function `const stringXor = (a, b)` to solve the following problem:
Input are two strings a and b consisting only of 1s and 0s.
Perform binary XOR on these inputs and return result also as a string.
>>> stringXor('010', '110')
'100'"
JavaScript/12,"/* Out of list of strings, return the longest one. Return the first one in case of multiple
  strings of the same length. Return null in case the input list is empty.
  >>> longest([])

  >>> longest(['a', 'b', 'c'])
  'a'
  >>> longest(['a', 'bb', 'ccc'])
  'ccc'
  */
const longest = (strings) => {
","
const longest = (strings) => {
","  if (!Array.isArray(strings) || strings.length == 0)
    return null;
  var maxlen = Math.max(...strings.map(x => x.length));
  for (const s of strings) {
    if (s.length == maxlen) {
      return s;
    }
  }
}

","  if (!Array.isArray(strings) || strings.length == 0)
    return null;
  var maxlen = Math.max(...strings.map(x => x.length));
  for (const s of strings) {
    if (s.length > maxlen) {
      return s;
    }
  }
}

",operator misuse,incorrect output,longest,,,"const testLongest = () => {
  console.assert(longest([]) === null)
  console.assert(longest(['x', 'y', 'z']) === 'x')
  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')
}

testLongest()
","const testLongest = () => {
  console.assert(longest([]) === null)
  console.assert(longest(['a', 'b', 'c']) === 'a')
  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')
}
testLongest()
",const longest = (strings),"Out of list of strings, return the longest one. Return the first one in case of multiple
strings of the same length. Return null in case the input list is empty.
>>> longest([])
>>> longest(['a', 'b', 'c'])
'a'
>>> longest(['a', 'bb', 'ccc'])
'ccc'","Write a JavaScript function `const longest = (strings)` to solve the following problem:
Out of list of strings, return the longest one. Return the first one in case of multiple
strings of the same length. Return null in case the input list is empty.
>>> longest([])
>>> longest(['a', 'b', 'c'])
'a'
>>> longest(['a', 'bb', 'ccc'])
'ccc'"
JavaScript/13,"/* Return a greatest common divisor of two integers a and b
  >>> greatestCommonDivisor(3, 5)
  1
  >>> greatestCommonDivisor(25, 15)
  5
  */
const greatestCommonDivisor = (a, b) => {
","
const greatestCommonDivisor = (a, b) => {
","  while (b != 0) {
    let temp = a;
    a = b;
    b = temp % b;
  }
  return a;
}

","  while (b != 0) {
    let temp = a;
    a = b;
    b = temp % b;
  }
  return b;
}

",variable misuse,incorrect output,greatestCommonDivisor,,,"const testGreatestCommonDivisor = () => {
  console.assert(greatestCommonDivisor(3, 7) === 1)
  console.assert(greatestCommonDivisor(10, 15) === 5)
  console.assert(greatestCommonDivisor(49, 14) === 7)
  console.assert(greatestCommonDivisor(144, 60) === 12)
}

testGreatestCommonDivisor()
","const testGreatestCommonDivisor = () => {
  console.assert(greatestCommonDivisor(3, 5) === 1)
  console.assert(greatestCommonDivisor(25, 15) === 5)
}
testGreatestCommonDivisor()
","const greatestCommonDivisor = (a, b)","Return a greatest common divisor of two integers a and b
>>> greatestCommonDivisor(3, 5)
1
>>> greatestCommonDivisor(25, 15)
5","Write a JavaScript function `const greatestCommonDivisor = (a, b)` to solve the following problem:
Return a greatest common divisor of two integers a and b
>>> greatestCommonDivisor(3, 5)
1
>>> greatestCommonDivisor(25, 15)
5"
JavaScript/14,"/* Return list of all prefixes from shortest to longest of the input string
  >>> allPrefixes('abc')
  ['a', 'ab', 'abc']
  */
const allPrefixes = (string) => {
","
const allPrefixes = (string) => {
","  var result = [];
  for (let i = 0; i < string.length; i++) {
    result.push(string.slice(0, i+1));
  }
  return result;
}

","  var result = [];
  for (let i = 0; i < string.length-1; i++) {
    result.push(string.slice(0, i+1));
  }
  return result;
}

",excess logic,incorrect output,allPrefixes,,,"const testAllPrefixes = () => {
  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))
  console.assert(
    JSON.stringify(
      allPrefixes('asdfgh')) ===
        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])
  )
  console.assert(
    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])
  )
}

testAllPrefixes()
","const testAllPrefixes = () => {
  console.assert(
    JSON.stringify(
      allPrefixes('abc')) ===
        JSON.stringify(['a', 'ab', 'abc'])
  )
}
testAllPrefixes()
",const allPrefixes = (string),"Return list of all prefixes from shortest to longest of the input string
>>> allPrefixes('abc')
['a', 'ab', 'abc']","Write a JavaScript function `const allPrefixes = (string)` to solve the following problem:
Return list of all prefixes from shortest to longest of the input string
>>> allPrefixes('abc')
['a', 'ab', 'abc']"
JavaScript/15,"/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.
  >>> stringSequence(0)
  '0'
  >>> stringSequence(5)
  '0 1 2 3 4 5'
  */
const stringSequence = (n) => {
","
const stringSequence = (n) => {
","  return [...Array(n).keys(), n].join(' ')
}

","  return [...Array(n-1).keys(), n].join(' ')
}

",value misuse,incorrect output,stringSequence,,,"const testStringSequence = () => {
  console.assert(stringSequence(0) === '0')
  console.assert(stringSequence(3) === '0 1 2 3')
  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')
}

testStringSequence()
","const testStringSequence = () => {
  console.assert(stringSequence(0) === '0')
  console.assert(stringSequence(5) === '0 1 2 3 4 5')
}
testStringSequence()
",const stringSequence = (n),"Return a string containing space-delimited numbers starting from 0 upto n inclusive.
>>> stringSequence(0)
'0'
>>> stringSequence(5)
'0 1 2 3 4 5'","Write a JavaScript function `const stringSequence = (n)` to solve the following problem:
Return a string containing space-delimited numbers starting from 0 upto n inclusive.
>>> stringSequence(0)
'0'
>>> stringSequence(5)
'0 1 2 3 4 5'"
JavaScript/16,"/* Given a string, find out how many distinct characters (regardless of case) does it consist of
  >>> countDistinctCharacters('xyzXYZ')
  3
  >>> countDistinctCharacters('Jerry')
  4
  */
const countDistinctCharacters = (string) => {
","
const countDistinctCharacters = (string) => {
","  return (new Set(string.toLowerCase())).size;

}

","  return (new Set(string)).size;

}

",missing logic,incorrect output,countDistinctCharacters,,,"const testCountDistinctCharacters = () => {
  console.assert(countDistinctCharacters('') === 0)
  console.assert(countDistinctCharacters('abcde') === 5)
  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)
  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)
  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)
}

testCountDistinctCharacters()
","const testCountDistinctCharacters = () => {
  console.assert(countDistinctCharacters('xyzXYZ') === 3)
  console.assert(countDistinctCharacters('Jerry') === 4)
}
testCountDistinctCharacters()
",const countDistinctCharacters = (string),"Given a string, find out how many distinct characters (regardless of case) does it consist of
>>> countDistinctCharacters('xyzXYZ')
3
>>> countDistinctCharacters('Jerry')
4","Write a JavaScript function `const countDistinctCharacters = (string)` to solve the following problem:
Given a string, find out how many distinct characters (regardless of case) does it consist of
>>> countDistinctCharacters('xyzXYZ')
3
>>> countDistinctCharacters('Jerry')
4"
JavaScript/17,"/* Input to this function is a string representing musical notes in a special ASCII format.
  Your task is to parse this string and return list of integers corresponding to how many beats does each
  not last.

  Here is a legend:
  'o' - whole note, lasts four beats
  'o|' - half note, lasts two beats
  '.|' - quater note, lasts one beat

  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')
  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
  */
const parseMusic = (music_string) => {
","
const parseMusic = (music_string) => {
","  const note_map = {'o': 4, 'o|': 2, '.|': 1};
  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);
}

","  const note_map = {'o': 3, 'o|': 2, '.|': 1};
  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);
}

",value misuse,incorrect output,parseMusic,,,"const testParseMusic = () => {
  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))
  console.assert(
    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])
  )
  console.assert(
    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])
  )
  console.assert(
    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===
      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])
  )
  console.assert(
    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===
      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])
  )
}

testParseMusic()
","const testParseMusic = () => {
  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))
}
testParseMusic()
",const parseMusic = (music_string),"Input to this function is a string representing musical notes in a special ASCII format.
Your task is to parse this string and return list of integers corresponding to how many beats does each
not last.
Here is a legend:
'o' - whole note, lasts four beats
'o|' - half note, lasts two beats
'.|' - quater note, lasts one beat
>>> parseMusic('o o| .| o| o| .| .| .| .| o o')
[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]","Write a JavaScript function `const parseMusic = (music_string)` to solve the following problem:
Input to this function is a string representing musical notes in a special ASCII format.
Your task is to parse this string and return list of integers corresponding to how many beats does each
not last.
Here is a legend:
'o' - whole note, lasts four beats
'o|' - half note, lasts two beats
'.|' - quater note, lasts one beat
>>> parseMusic('o o| .| o| o| .| .| .| .| o o')
[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"
JavaScript/18,"/* Find how many times a given substring can be found in the original string. Count overlaping cases.
  >>> howManyTimes('', 'a')
  0
  >>> howManyTimes('aaa', 'a')
  3
  >>> howManyTimes('aaaa', 'aa')
  3
  */
const howManyTimes = (string, substring) => {
","
const howManyTimes = (string, substring) => {
","  var times = 0;
  for (let i = 0; i < string.length - substring.length + 1; i++) {
    if (string.slice(i, i+substring.length) == substring) {
      times += 1;
    }
  }
  return times;
}

","  var times = 0;
  for (let i = 0; i < string.length - substring.length; i++) {
    if (string.slice(i, i+substring.length) == substring) {
      times += 1;
    }
  }
  return times;
}

",value misuse,incorrect output,howManyTimes,,,"const testHowManyTimes = () => {
  console.assert(howManyTimes('', 'x') === 0)
  console.assert(howManyTimes('xyxyxyx', 'x') === 4)
  console.assert(howManyTimes('cacacacac', 'cac') === 4)
  console.assert(howManyTimes('john doe', 'john') === 1)
}

testHowManyTimes()
","const testHowManyTimes = () => {
  console.assert(howManyTimes('', 'a') === 0)
  console.assert(howManyTimes('aaa', 'a') === 3)
  console.assert(howManyTimes('aaaa', 'aa') === 3)
}
testHowManyTimes()
","const howManyTimes = (string, substring)","Find how many times a given substring can be found in the original string. Count overlaping cases.
>>> howManyTimes('', 'a')
0
>>> howManyTimes('aaa', 'a')
3
>>> howManyTimes('aaaa', 'aa')
3","Write a JavaScript function `const howManyTimes = (string, substring)` to solve the following problem:
Find how many times a given substring can be found in the original string. Count overlaping cases.
>>> howManyTimes('', 'a')
0
>>> howManyTimes('aaa', 'a')
3
>>> howManyTimes('aaaa', 'aa')
3"
JavaScript/19,"/* Input is a space-delimited string of numberals from 'zero' to 'nine'.
  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
  Return the string with numbers sorted from smallest to largest
  >>> sortNumbers('three one five')
  'one three five'
  */
const sortNumbers = (numbers) => {
","
const sortNumbers = (numbers) => {
","  const value_map = {
    'zero': 0,
    'one': 1,
    'two': 2,
    'three': 3,
    'four': 4,
    'five': 5,
    'six': 6,
    'seven': 7,
    'eight': 8,
    'nine': 9
  };
  return numbers.split(' ')
          .filter(x => x != '')
          .sort((a, b) => value_map[a] - value_map[b])
          .join(' ');
}

","  const value_map = {
    'zero': 0,
    'one': 1,
    'two': 2,
    'three': 3,
    'four': 4,
    'five': 5,
    'six': 6,
    'seven': 7,
    'eight': 8,
    'nine': 9
  };
  return numbers.split(' ')
          .filter(x => x != '')
          .join(' ');
}

",missing logic,incorrect output,sortNumbers,,,"const testSortNumbers = () => {
  console.assert(sortNumbers('') === '')
  console.assert(sortNumbers('three') === 'three')
  console.assert(sortNumbers('three five nine') === 'three five nine')
  console.assert(
    sortNumbers(
      'five zero four seven nine eight') === 'zero four five seven eight nine'
  )
  console.assert(
    sortNumbers(
      'six five four three two one zero') === 'zero one two three four five six'
  )
}

testSortNumbers()
","const testSortNumbers = () => {
  console.assert(sortNumbers('three one five') === 'one three five')
}
testSortNumbers()
",const sortNumbers = (numbers),"Input is a space-delimited string of numberals from 'zero' to 'nine'.
Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
Return the string with numbers sorted from smallest to largest
>>> sortNumbers('three one five')
'one three five'","Write a JavaScript function `const sortNumbers = (numbers)` to solve the following problem:
Input is a space-delimited string of numberals from 'zero' to 'nine'.
Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
Return the string with numbers sorted from smallest to largest
>>> sortNumbers('three one five')
'one three five'"
JavaScript/20,"/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each
  other and return them in order (smaller number, larger number).
  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
  (2.0, 2.2)
  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
  (2.0, 2.0)
  */
const findClosestElements = (numbers) => {
","
const findClosestElements = (numbers) => {
","  var closest_pair, distance;
  for (let i = 0; i < numbers.length; i++)
    for (let j = 0; j < numbers.length; j++)
      if (i != j) {
        let a = numbers[i], b = numbers[j];
        if (distance == null) {
          distance = Math.abs(a - b);
          closest_pair = [Math.min(a, b), Math.max(a, b)];
        } else {
          let new_distance = Math.abs(a - b);
          if (new_distance < distance) {
            distance = new_distance;
            closest_pair = [Math.min(a, b), Math.max(a, b)];
          }
        }
      }
  return closest_pair;
}

","  var closest_pair, distance;
  for (let i = 0; i < numbers.length; i++)
    for (let j = 0; j < numbers.length; j++)
      if (i != j) {
        let a = numbers[i], b = numbers[j];
        if (distance == null) {
          distance = Math.abs(a - b);
          closest_pair = [Math.min(a, b), Math.max(a, b)];
        } else {
          let new_distance = Math.abs(a - b);
          if (new_distance > distance) {
            distance = new_distance;
            closest_pair = [Math.min(a, b), Math.max(a, b)];
          }
        }
      }
  return closest_pair;
}

",operator misuse,incorrect output,findClosestElements,,,"const testFindClosestElements = () => {
  console.assert(
    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===
      JSON.stringify([3.9, 4.0])
  )
  console.assert(
    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===
      JSON.stringify([5.0, 5.9])
  )
  console.assert(
    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===
      JSON.stringify([2.0, 2.2])
  )
  console.assert(
    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===
      JSON.stringify([2.0, 2.0])
  )
  console.assert(
    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===
      JSON.stringify([2.2, 3.1])
  )
}

testFindClosestElements()
","const testFindClosestElements = () => {
  console.assert(
    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===
      JSON.stringify([2.0, 2.2])
  )
  console.assert(
    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===
      JSON.stringify([2.0, 2.0])
  )
}
testFindClosestElements()
",const findClosestElements = (numbers),"From a supplied list of numbers (of length at least two) select and return two that are the closest to each
other and return them in order (smaller number, larger number).
>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
(2.0, 2.2)
>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
(2.0, 2.0)","Write a JavaScript function `const findClosestElements = (numbers)` to solve the following problem:
From a supplied list of numbers (of length at least two) select and return two that are the closest to each
other and return them in order (smaller number, larger number).
>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
(2.0, 2.2)
>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
(2.0, 2.0)"
JavaScript/21,"/* Given list of numbers (of at least two elements), apply a linear transform to that list,
  such that the smallest number will become 0 and the largest will become 1
  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])
  [0.0, 0.25, 0.5, 0.75, 1.0]
  */
const rescaleToUnit = (numbers) => {
","
const rescaleToUnit = (numbers) => {
","  var min_number = Math.min(...numbers);
  var max_number = Math.max(...numbers);
  return numbers.map(x => (x - min_number) / (max_number - min_number));
}

","  var min_number = Math.min(...numbers);
  var max_number = Math.max(...numbers);
  return numbers.map(x => (x - min_number) / (max_number + min_number));
}

",operator misuse,incorrect output,rescaleToUnit,,,"const testRescaleToUnit = () => {
  console.assert(
    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])
  )
  console.assert(
    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])
  )
  console.assert(
    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===
      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])
  )
  console.assert(
    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===
      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])
  )
  console.assert(
    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===
      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])
  )
}

testRescaleToUnit()
","const testRescaleToUnit = () => {
  console.assert(
    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===
      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])
  )
}
testRescaleToUnit()
",const rescaleToUnit = (numbers),"Given list of numbers (of at least two elements), apply a linear transform to that list,
such that the smallest number will become 0 and the largest will become 1
>>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])
[0.0, 0.25, 0.5, 0.75, 1.0]","Write a JavaScript function `const rescaleToUnit = (numbers)` to solve the following problem:
Given list of numbers (of at least two elements), apply a linear transform to that list,
such that the smallest number will become 0 and the largest will become 1
>>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])
[0.0, 0.25, 0.5, 0.75, 1.0]"
JavaScript/22,"/* Filter given list of any python values only for integers
  >>> filterIntegers(['a', 3.14, 5])
  [5]
  >>> filterIntegers([1, 2, 3, 'abc', {}, []])
  [1, 2, 3]
  */
const filterIntegers = (values) => {
","
const filterIntegers = (values) => {
","  return values.filter(x => Number.isInteger(x));
}

","  values.filter(x => Number.isInteger(x));
  return values;
}

",variable misuse,incorrect output,filterIntegers,,,"const testFilterIntegers = () => {
  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))
  console.assert(
    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===
      JSON.stringify([4, 9])
  )
  console.assert(
    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===
      JSON.stringify([3, 3, 3])
  )
}

testFilterIntegers()
","const testFilterIntegers = () => {
  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))
  console.assert(
    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===
      JSON.stringify([1,2,3])
  )
}
testFilterIntegers()
",const filterIntegers = (values),"Filter given list of any python values only for integers
>>> filterIntegers(['a', 3.14, 5])
[5]
>>> filterIntegers([1, 2, 3, 'abc', {}, []])
[1, 2, 3]","Write a JavaScript function `const filterIntegers = (values)` to solve the following problem:
Filter given list of any python values only for integers
>>> filterIntegers(['a', 3.14, 5])
[5]
>>> filterIntegers([1, 2, 3, 'abc', {}, []])
[1, 2, 3]"
JavaScript/23,"/* Return length of given string
  >>> strlen('')
  0
  >>> strlen('abc')
  3
  */
const strlen = (string) => {
","
const strlen = (string) => {
","  return string.length;
}

","  return string.length - 1;
}

",value misuse,incorrect output,strlen,,,"const testStrlen = () => {
  console.assert(strlen('') === 0)
  console.assert(strlen('x') === 1)
  console.assert(strlen('asdasnakj') === 9)
}

testStrlen()
","const testStrlen = () => {
  console.assert(strlen('') === 0)
  console.assert(strlen('abc') === 3)
}
testStrlen()
",const strlen = (string),"Return length of given string
>>> strlen('')
0
>>> strlen('abc')
3","Write a JavaScript function `const strlen = (string)` to solve the following problem:
Return length of given string
>>> strlen('')
0
>>> strlen('abc')
3"
JavaScript/24,"/* For a given number n, find the largest number that divides n evenly, smaller than n
  >>> largestDivisor(15)
  5
  */
const largestDivisor = (n) => {
","
const largestDivisor = (n) => {
","  for (let i = n - 1; i >= 0; i--)
    if (n % i == 0)
      return i;
}

","  for (let i = n - 1; i >= 0; i--)
    if (n - i == 0)
      return i;
}

",operator misuse,incorrect output,largestDivisor,,,"const testLargestDivisor = () => {
  console.assert(largestDivisor(3) === 1)
  console.assert(largestDivisor(7) === 1)
  console.assert(largestDivisor(10) === 5)
  console.assert(largestDivisor(100) === 50)
  console.assert(largestDivisor(49) === 7)
}

testLargestDivisor()
","const testLargestDivisor = () => {
  console.assert(largestDivisor(15) === 5)
}
testLargestDivisor()
",const largestDivisor = (n),"For a given number n, find the largest number that divides n evenly, smaller than n
>>> largestDivisor(15)
5","Write a JavaScript function `const largestDivisor = (n)` to solve the following problem:
For a given number n, find the largest number that divides n evenly, smaller than n
>>> largestDivisor(15)
5"
JavaScript/25,"/* Return list of prime factors of given integer in the order from smallest to largest.
  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
  Input number should be equal to the product of all factors
  >>> factorize(8)
  [2, 2, 2]
  >>> factorize(25)
  [5, 5]
  >>> factorize(70)
  [2, 5, 7]
  */
const factorize = (n) => {
","
const factorize = (n) => {
","  var fact = [], i = 2;
  while (i <= Math.sqrt(n) + 1) {
    if (n % i == 0) {
      fact.push(i);
      n = n / i;
    } else {
      i += 1;
    }
  }

  if (n > 1)
    fact.push(n);
  return fact;
}

","  var fact = [], i = 0;
  while (i <= Math.sqrt(n) + 1) {
    if (n % i == 0) {
      fact.push(i);
      n = n / i;
    } else {
      i += 1;
    }
  }

  if (n > 1)
    fact.push(n);
  return fact;
}

",value misuse,incorrect output,factorize,,,"const testFactorize = () => {
  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))
  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))
  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))
  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))
  console.assert(
    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===
      JSON.stringify([3, 3, 19, 19])
  )
  console.assert(
    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===
      JSON.stringify([3, 3, 3, 19, 19, 19])
  )
  console.assert(
    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===
      JSON.stringify([3, 19, 19, 19])
  )
  console.assert(
    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])
  )
}

testFactorize()
","const testFactorize = () => {
  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))
  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))
  console.assert(
    JSON.stringify(factorize(70)) ===
      JSON.stringify([2,5,7])
  )
}
testFactorize()
",const factorize = (n),"Return list of prime factors of given integer in the order from smallest to largest.
Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
Input number should be equal to the product of all factors
>>> factorize(8)
[2, 2, 2]
>>> factorize(25)
[5, 5]
>>> factorize(70)
[2, 5, 7]","Write a JavaScript function `const factorize = (n)` to solve the following problem:
Return list of prime factors of given integer in the order from smallest to largest.
Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
Input number should be equal to the product of all factors
>>> factorize(8)
[2, 2, 2]
>>> factorize(25)
[5, 5]
>>> factorize(70)
[2, 5, 7]"
JavaScript/26,"/* From a list of integers, remove all elements that occur more than once.
  Keep order of elements left the same as in the input.
  >>> removeDuplicates([1, 2, 3, 2, 4])
  [1, 3, 4]
  */
const removeDuplicates = (numbers) => {
","
const removeDuplicates = (numbers) => {
","  var dict = new Object();
  for (const num of numbers) {
    if (num in dict) {
      dict[num] += 1;
    } else {
      dict[num] = 1;
    }
  }
  return numbers.filter(x => dict[x] <= 1);
}

","  var dict = new Object();
  for (const num of numbers) {
    if (num in dict) {
      dict[num] += 1;
    } else {
      dict[num] = 1;
    }
  }
  return numbers.filter(x > dict[x] < 1);
}

",operator misuse,incorrect output,removeDuplicates,,,"const testRemoveDuplicates = () => {
  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))
  console.assert(
    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===
      JSON.stringify([1, 2, 3, 4])
  )
  console.assert(
    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===
      JSON.stringify([1, 4, 5])
  )
}

testRemoveDuplicates()
","const testRemoveDuplicates = () => {
  console.assert(
    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===
      JSON.stringify([1,3, 4])
  )
}
testRemoveDuplicates()
",const removeDuplicates = (numbers),"From a list of integers, remove all elements that occur more than once.
Keep order of elements left the same as in the input.
>>> removeDuplicates([1, 2, 3, 2, 4])
[1, 3, 4]","Write a JavaScript function `const removeDuplicates = (numbers)` to solve the following problem:
From a list of integers, remove all elements that occur more than once.
Keep order of elements left the same as in the input.
>>> removeDuplicates([1, 2, 3, 2, 4])
[1, 3, 4]"
JavaScript/27,"/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
  >>> flipCase('Hello')
  'hELLO'
  */
const flipCase = (string) => {
","
const flipCase = (string) => {
","  return string.split('')
          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))
          .join('');
}

","  return string.split('')
          .map(x => (x.toLowerCase() == x ? x.toLowerCase() : x.toUpperCase()))
          .join('');
}

",function misuse,incorrect output,flipCase,,,"const testFlipCase = () => {
  console.assert(flipCase('') === '')
  console.assert(flipCase('Hello!') === 'hELLO!')
  console.assert(
    flipCase(
      'These violent delights have violent ends') ===
        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'
  )
}

testFlipCase()
","const testFlipCase = () => {
  console.assert(flipCase('Hello') === 'hELLO')
}
testFlipCase()
",const flipCase = (string),"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
>>> flipCase('Hello')
'hELLO'","Write a JavaScript function `const flipCase = (string)` to solve the following problem:
For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
>>> flipCase('Hello')
'hELLO'"
JavaScript/28,"/* Concatenate list of strings into a single string
  >>> concatenate([])
  ''
  >>> concatenate(['a', 'b', 'c'])
  'abc'
  */
const concatenate = (strings) => {
","
const concatenate = (strings) => {
","  return strings.join('');
}

","  return strings.join(' ');
}

",excess logic,incorrect output,concatenate,,,"const testConcatenate = () => {
  console.assert(concatenate([]) === '')
  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')
  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')
}

testConcatenate()
","const testConcatenate = () => {
  console.assert(concatenate([]) === '')
  console.assert(concatenate(['a', 'b', 'c']) === 'abc')
}
testConcatenate()
",const concatenate = (strings),"Concatenate list of strings into a single string
>>> concatenate([])
''
>>> concatenate(['a', 'b', 'c'])
'abc'","Write a JavaScript function `const concatenate = (strings)` to solve the following problem:
Concatenate list of strings into a single string
>>> concatenate([])
''
>>> concatenate(['a', 'b', 'c'])
'abc'"
JavaScript/29,"/* Filter an input list of strings only for ones that start with a given prefix.
  >>> filterByPrefix([], 'a')
  []
  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')
  ['abc', 'array']
  */
const filterByPrefix = (strings, prefix) => {
","
const filterByPrefix = (strings, prefix) => {
","  return strings.filter(x => x.startsWith(prefix));
}

","  return strings.filter(x => x.endsWith(prefix));
}

",function misuse,incorrect output,filterByPrefix,,,"const testFilterByPrefix = () => {
  console.assert(
    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])
  )
  console.assert(
    JSON.stringify(
      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')
    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])
  )
}

testFilterByPrefix()
","const testFilterByPrefix = () => {
  console.assert(
    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])
  )
  console.assert(
    JSON.stringify(
      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ) === JSON.stringify(['abc', 'array'])
  )
}
testFilterByPrefix()
","const filterByPrefix = (strings, prefix)","Filter an input list of strings only for ones that start with a given prefix.
>>> filterByPrefix([], 'a')
[]
>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')
['abc', 'array']","Write a JavaScript function `const filterByPrefix = (strings, prefix)` to solve the following problem:
Filter an input list of strings only for ones that start with a given prefix.
>>> filterByPrefix([], 'a')
[]
>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')
['abc', 'array']"
JavaScript/30,"/*Return only positive numbers in the list.
  >>> getPositive([-1, 2, -4, 5, 6])
  [2, 5, 6]
  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
  [5, 3, 2, 3, 9, 123, 1]
  */
const getPositive = (l) => {
","
const getPositive = (l) => {
","  return l.filter(e => e > 0);
}

","  return l.filter(e => e < 0);
}

",operator misuse,incorrect output,getPositive,,,"const testGetPositive = () => {
  console.assert(
    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])
  )
  console.assert(
    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===
      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])
  )
  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))
  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))
}

testGetPositive()
","const testGetPositive = () => {
  console.assert(
    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])
  )
  console.assert(
    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===
      JSON.stringify([5, 3, 2, 3, 9, 123, 1])
  )
}
testGetPositive()
",const getPositive = (l),"Return only positive numbers in the list.
>>> getPositive([-1, 2, -4, 5, 6])
[2, 5, 6]
>>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
[5, 3, 2, 3, 9, 123, 1]","Write a JavaScript function `const getPositive = (l)` to solve the following problem:
Return only positive numbers in the list.
>>> getPositive([-1, 2, -4, 5, 6])
[2, 5, 6]
>>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
[5, 3, 2, 3, 9, 123, 1]"
JavaScript/31,"/*Return true if a given number is prime, and false otherwise.
  >>> isPrime(6)
  false
  >>> isPrime(101)
  true
  >>> isPrime(11)
  true
  >>> isPrime(13441)
  true
  >>> isPrime(61)
  true
  >>> isPrime(4)
  false
  >>> isPrime(1)
  false
  */
const isPrime = (n) => {
","
const isPrime = (n) => {
","  if (n < 2)
    return false;
  for (let k = 2; k < n - 1; k++)
    if (n % k == 0)
      return false;
  return true;
}

","  if (n < 1)
    return false;
  for (let k = 1; k < n - 1; k++)
    if (n % k == 0)
      return false;
  return true;
}

",value misuse,incorrect output,isPrime,,,"const testIsPrime = () => {
  console.assert(isPrime(6) === false)
  console.assert(isPrime(101) === true)
  console.assert(isPrime(11) === true)
  console.assert(isPrime(13441) === true)
  console.assert(isPrime(61) === true)
  console.assert(isPrime(4) === false)
  console.assert(isPrime(1) === false)
  console.assert(isPrime(5) === true)
  console.assert(isPrime(11) === true)
  console.assert(isPrime(17) === true)
  console.assert(isPrime(5 * 17) === false)
  console.assert(isPrime(11 * 7) === false)
  console.assert(isPrime(13441 * 19) === false)
}

testIsPrime()
","const testIsPrime = () => {
  console.assert(isPrime(6) === false)
  console.assert(isPrime(101) === true)
  console.assert(isPrime(11) === true)
  console.assert(isPrime(13441) === true)
  console.assert(isPrime(61) === true)
  console.assert(isPrime(4) === false)
  console.assert(isPrime(1) === false)
}
testIsPrime()
",const isPrime = (n),"Return true if a given number is prime, and false otherwise.
>>> isPrime(6)
false
>>> isPrime(101)
true
>>> isPrime(11)
true
>>> isPrime(13441)
true
>>> isPrime(61)
true
>>> isPrime(4)
false
>>> isPrime(1)
false","Write a JavaScript function `const isPrime = (n)` to solve the following problem:
Return true if a given number is prime, and false otherwise.
>>> isPrime(6)
false
>>> isPrime(101)
true
>>> isPrime(11)
true
>>> isPrime(13441)
true
>>> isPrime(61)
true
>>> isPrime(4)
false
>>> isPrime(1)
false"
JavaScript/32,"/*
  Evaluates polynomial with coefficients xs at point x.
  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
  */
const poly = (xs, x) => {
  return xs.reduce((prev, item, index) => {
    return prev + item * Math.pow(x, index);
  }, 0);
}

/*
  xs are coefficients of a polynomial.
  findZero find x such that poly(x) = 0.
  findZero returns only only zero point, even if there are many.
  Moreover, findZero only takes list xs having even number of coefficients
  and largest non zero coefficient as it guarantees
  a solution.
  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x
  -0.5
  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
  1.0
  */
const findZero = (xs) => {
","
const poly = (xs, x) => {
  return xs.reduce((prev, item, index) => {
    return prev + item * Math.pow(x, index);
  }, 0);
}

const findZero = (xs) => {
","  var begin = -1.0, end = 1.0;
  while (poly(xs, begin) * poly(xs, end) > 0) {
    begin *= 2.0;
    end *= 2.0;
  }
  while (end - begin > 1e-10) {
    let center = (begin + end) / 2.0;
    if (poly(xs, center) * poly(xs, begin) > 0)
      begin = center;
    else
      end = center;
  }
  return begin;
}

","  var begin = -1.0, end = 1.0;
  while (poly(xs, begin) * poly(xs, end) > 0) {
    begin *= 2.0;
    end *= 2.0;
  }
  while (begin - end > 1e-10) {
    let center = (begin + end) / 2.0;
    if (poly(xs, center) * poly(xs, end) > 0)
      begin = center;
    else
      end = center;
  }
  return end;
}

",variable misuse,incorrect output,findZero,,,"const testfindZero = () => {
  const getRandomIntInclusive = (min = 0, max = 9) => {
    min = Math.ceil(min)
    max = Math.floor(max)
    return Math.floor(Math.random() * (max - min + 1)) + min
  }

  for (let i = 0; i < 100; i++) {
    let ncoeff = 2 * getRandomIntInclusive(1, 4);
    let coeffs = [];
    for (let j = 0; j < ncoeff; j++) {
      let coeff = getRandomIntInclusive(-10, 10);
      if (coeff === 0)
        coeff = 1;
      coeffs.push(coeff);
    }
    let solution = findZero(coeffs);
    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);
  }
}
testfindZero()
","const testPoly = () => {
  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));
  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));
}
testPoly()
",const findZero = (xs),"xs are coefficients of a polynomial.
findZero find x such that poly(x) = 0.
findZero returns only only zero point, even if there are many.
Moreover, findZero only takes list xs having even number of coefficients
and largest non zero coefficient as it guarantees
a solution.
>>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x
-0.5
>>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
1.0","Write a JavaScript function `const findZero = (xs)` to solve the following problem:
xs are coefficients of a polynomial.
findZero find x such that poly(x) = 0.
findZero returns only only zero point, even if there are many.
Moreover, findZero only takes list xs having even number of coefficients
and largest non zero coefficient as it guarantees
a solution.
>>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x
-0.5
>>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
1.0"
JavaScript/33,"/*This function takes a list l and returns a list l' such that
  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
  to the values of the corresponding indicies of l, but sorted.
  >>> sortThird([1, 2, 3])
  [1, 2, 3]
  >>> sortThird([5, 6, 3, 4, 8, 9, 2])
  [2, 6, 3, 4, 8, 9, 5]
  */
const sortThird = (l) => {
","
const sortThird = (l) => {
","  var three = l.filter((item, index) => index % 3 == 0);
  three.sort((a, b) => (a - b));
  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));
}

","  var three = l.filter((item, index) => index % 3 == 0);
  return l.map((item, index) => (index % 2 == 0 ? three[index / 3] : item));
}

",missing logic,incorrect output,sortThird,,,"const testSortThird = () => {
  console.assert(
    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])
  )
  console.assert(
    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==
      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])
  )
  console.assert(
    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==
      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])
  )
  console.assert(
    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==
      JSON.stringify([2, 6, 3, 4, 8, 9, 5])
  )
  console.assert(
    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==
      JSON.stringify([2, 8, 3, 4, 6, 9, 5])
  )
  console.assert(
    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==
      JSON.stringify([2, 6, 9, 4, 8, 3, 5])
  )
  console.assert(
    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==
      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])
  )
}

testSortThird()
","const testSortThird = () => {
  console.assert(
    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])
  )
  console.assert(
    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==
      JSON.stringify([2, 6, 3, 4, 8, 9, 5])
  )
}
testSortThird()
",const sortThird = (l),"This function takes a list l and returns a list l' such that
l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
to the values of the corresponding indicies of l, but sorted.
>>> sortThird([1, 2, 3])
[1, 2, 3]
>>> sortThird([5, 6, 3, 4, 8, 9, 2])
[2, 6, 3, 4, 8, 9, 5]","Write a JavaScript function `const sortThird = (l)` to solve the following problem:
This function takes a list l and returns a list l' such that
l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
to the values of the corresponding indicies of l, but sorted.
>>> sortThird([1, 2, 3])
[1, 2, 3]
>>> sortThird([5, 6, 3, 4, 8, 9, 2])
[2, 6, 3, 4, 8, 9, 5]"
JavaScript/34,"/*Return sorted unique elements in a list
  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
  [0, 2, 3, 5, 9, 123]
  */
const unique = (l) => {
","
const unique = (l) => {
","  return Array.from(new Set(l)).sort((a, b) => (a - b));
}

","  return l.sort((a, b) => (a - b));
}

",missing logic,incorrect output,unique,,,"const testUnique = () => {
  console.assert(
    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===
      JSON.stringify([0, 2, 3, 5, 9, 123])
  )
}

testUnique()
","const testUnique = () => {
  console.assert(
    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===
      JSON.stringify([0, 2, 3, 5, 9, 123])
  )
}
testUnique()
",const unique = (l),"Return sorted unique elements in a list
>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
[0, 2, 3, 5, 9, 123]","Write a JavaScript function `const unique = (l)` to solve the following problem:
Return sorted unique elements in a list
>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
[0, 2, 3, 5, 9, 123]"
JavaScript/35,"/*Return maximum element in the list.
  >>> maxElement([1, 2, 3])
  3
  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
  123
  */
const maxElement = (l) => {
","
const maxElement = (l) => {
","  return Math.max(...l);
}

","  return Math.min(...l);
}

",operator misuse,incorrect output,maxElement,,,"const testMaxElement = () => {
  console.assert(maxElement([1, 2, 3]) === 3)
  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)
}

testMaxElement()
","const testMaxElement = () => {
  console.assert(maxElement([1, 2, 3]) === 3)
  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)
}
testMaxElement()
",const maxElement = (l),"Return maximum element in the list.
>>> maxElement([1, 2, 3])
3
>>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
123","Write a JavaScript function `const maxElement = (l)` to solve the following problem:
Return maximum element in the list.
>>> maxElement([1, 2, 3])
3
>>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
123"
JavaScript/36,"/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
  >>> fizzBuzz(50)
  0
  >>> fizzBuzz(78)
  2
  >>> fizzBuzz(79)
  3
  */
const fizzBuzz = (n) => {
","
const fizzBuzz = (n) => {
","  var ns = [], ans = 0;
  for (let i = 0; i < n; i++)
    if (i % 11 == 0 || i % 13 == 0)
      ns.push(i);
  var s = ns.map(x => x.toString()).join('');
  for (const c of s)
    ans += (c == '7');
  return ans;
}

","  var ns = [], ans = 0;
  for (let i = 0; i < n; i++)
    if (i % 11 == 0 && i % 13 == 0)
      ns.push(i);
  var s = ns.map(x => x.toString()).join('');
  for (const c of s)
    ans += (c == '7');
  return ans;
}

",operator misuse,incorrect output,fizzBuzz,,,"const testFizzBuzz = () => {
  console.assert(fizzBuzz(50) === 0)
  console.assert(fizzBuzz(78) === 2)
  console.assert(fizzBuzz(79) === 3)
  console.assert(fizzBuzz(100) === 3)
  console.assert(fizzBuzz(200) === 6)
  console.assert(fizzBuzz(4000) === 192)
  console.assert(fizzBuzz(10000) === 639)
  console.assert(fizzBuzz(100000) === 8026)
}

testFizzBuzz()
","const testFizzBuzz = () => {
  console.assert(fizzBuzz(50) === 0)
  console.assert(fizzBuzz(78) === 2)
  console.assert(fizzBuzz(79) === 3)
}
testFizzBuzz()
",const fizzBuzz = (n),"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
>>> fizzBuzz(50)
0
>>> fizzBuzz(78)
2
>>> fizzBuzz(79)
3","Write a JavaScript function `const fizzBuzz = (n)` to solve the following problem:
Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
>>> fizzBuzz(50)
0
>>> fizzBuzz(78)
2
>>> fizzBuzz(79)
3"
JavaScript/37,"/*This function takes a list l and returns a list l' such that
  l' is identical to l in the odd indicies, while its values at the even indicies are equal
  to the values of the even indicies of l, but sorted.
  >>> sortEven([1, 2, 3])
  [1, 2, 3]
  >>> sortEven([5, 6, 3, 4])
  [3, 6, 5, 4]
  */
const sortEven = (l) => {
","
const sortEven = (l) => {
","  var even = l.filter((item, index) => index % 2 == 0);
  even.sort((a, b) => (a - b));
  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));
}

","  var even = l.filter((item, index) => index % 2 == 0);
  l.sort((a, b) => (a - b));
  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));
}

",variable misuse,incorrect output,sortEven,,,"const testSortEven = () => {
  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===
    JSON.stringify([1, 2, 3]))
  console.assert(JSON.stringify(
    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===
    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))
  console.assert(JSON.stringify(
    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===
    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))
}

testSortEven()
","const testSortEven = () => {
  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===
    JSON.stringify([1, 2, 3]))
  console.assert(JSON.stringify(
    sortEven([5,6,3,4])) ===
    JSON.stringify([3,6,5,4]))
}
testSortEven()
",const sortEven = (l),"This function takes a list l and returns a list l' such that
l' is identical to l in the odd indicies, while its values at the even indicies are equal
to the values of the even indicies of l, but sorted.
>>> sortEven([1, 2, 3])
[1, 2, 3]
>>> sortEven([5, 6, 3, 4])
[3, 6, 5, 4]","Write a JavaScript function `const sortEven = (l)` to solve the following problem:
This function takes a list l and returns a list l' such that
l' is identical to l in the odd indicies, while its values at the even indicies are equal
to the values of the even indicies of l, but sorted.
>>> sortEven([1, 2, 3])
[1, 2, 3]
>>> sortEven([5, 6, 3, 4])
[3, 6, 5, 4]"
JavaScript/38,"/*
  returns encoded string by cycling groups of three characters.
  */
const encodeCyclic = (s) => {
  var groups = [], groups2 = [];
  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {
    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));
  }
  for (const group of groups) {
    if (group.length == 3)
      groups2.push(group.slice(1) + group[0]);
    else
      groups2.push(group);
  }
  return groups2.join('');
}

/*
  takes as input string encoded with encode_cyclic function. Returns decoded string.
  */
const decodeCyclic = (s) => {
","const encodeCyclic = (s) => {
  var groups = [], groups2 = [];
  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {
    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));
  }
  for (const group of groups) {
    if (group.length == 3)
      groups2.push(group.slice(1) + group[0]);
    else
      groups2.push(group);
  }
  return groups2.join('');
}

const decodeCyclic = (s) => {
","  return encodeCyclic(encodeCyclic(s));
}

","  return encodeCyclic(s);
}

",missing logic,incorrect output,decodeCyclic,,,"const testDecodeCyclic = () => {
  const letters = new Array(26)
    .fill(null)
    .map((v, i) => String.fromCharCode(97 + i));

  for (let i = 0; i < 100; i++) {
    let str = new Array(Math.floor(Math.random() * 20)).fill(null);
    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');
    let encoded_str = encodeCyclic(str);
    console.assert(decodeCyclic(encoded_str) === str);
  }
}

testDecodeCyclic()
",,const decodeCyclic = (s),takes as input string encoded with encode_cyclic function. Returns decoded string.,"Write a JavaScript function `const decodeCyclic = (s)` to solve the following problem:
takes as input string encoded with encode_cyclic function. Returns decoded string."
JavaScript/39,"/*
  primeFib returns n-th number that is a Fibonacci number and it's also prime.
  >>> primeFib(1)
  2
  >>> primeFib(2)
  3
  >>> primeFib(3)
  5
  >>> primeFib(4)
  13
  >>> primeFib(5)
  89
  */
const primeFib = (n) => {
","
const primeFib = (n) => {
","  var isPrime = function (p) {
    if (p < 2)
      return false;
    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {
      if (p % k == 0)
        return false;
    }
    return true;
  }

  var f = [0, 1];
  while (true) {
    f.push(f.at(-1) + f.at(-2));
    if (isPrime(f.at(-1)))
      n -= 1;
    if (n == 0)
      return f.at(-1);
  }
}

","  var isPrime = function (p) {
    if (p < 2)
      return false;
    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)), p); k++) {
      if (p % k == 0)
        return false;
    }
    return true;
  }

  var f = [0, 1];
  while (true) {
    f.push(f.at(-1) + f.at(-2));
    if (isPrime(f.at(-1)))
      n -= 1;
    if (n == 0)
      return f.at(-1);
  }
}

",value misuse,incorrect output,primeFib,,,"const testPrimeFib = () => {
  console.assert(primeFib(1) === 2)
  console.assert(primeFib(2) === 3)
  console.assert(primeFib(3) === 5)
  console.assert(primeFib(4) === 13)
  console.assert(primeFib(5) === 89)
  console.assert(primeFib(6) === 233)
  console.assert(primeFib(7) === 1597)
  console.assert(primeFib(8) === 28657)
  console.assert(primeFib(9) === 514229)
  console.assert(primeFib(10) === 433494437)
}

testPrimeFib()
","const testPrimeFib = () => {
  console.assert(primeFib(1) === 2)
  console.assert(primeFib(2) === 3)
  console.assert(primeFib(3) === 5)
  console.assert(primeFib(4) === 13)
  console.assert(primeFib(5) === 89)
}
testPrimeFib()
",const primeFib = (n),"primeFib returns n-th number that is a Fibonacci number and it's also prime.
>>> primeFib(1)
2
>>> primeFib(2)
3
>>> primeFib(3)
5
>>> primeFib(4)
13
>>> primeFib(5)
89","Write a JavaScript function `const primeFib = (n)` to solve the following problem:
primeFib returns n-th number that is a Fibonacci number and it's also prime.
>>> primeFib(1)
2
>>> primeFib(2)
3
>>> primeFib(3)
5
>>> primeFib(4)
13
>>> primeFib(5)
89"
JavaScript/40,"/*
  triplesSumToZero takes a list of integers as an input.
  it returns true if there are three distinct elements in the list that
  sum to zero, and false otherwise.

  >>> triplesSumToZero([1, 3, 5, 0])
  false
  >>> triplesSumToZero([1, 3, -2, 1])
  true
  >>> triplesSumToZero([1, 2, 3, 7])
  false
  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])
  true
  >>> triplesSumToZero([1])
  false
  */
const triplesSumToZero = (l) => {
","
const triplesSumToZero = (l) => {
","  for (let i = 0; i < l.length; i++)
    for (let j = i + 1; j < l.length; j++)
      for (let k = j + 1; k < l.length; k++)
        if (l[i] + l[j] + l[k] == 0)
          return true;
  return false;
}

","  for (let i = 1; i < l.length; i++)
    for (let j = i + 1; j < l.length; j++)
      for (let k = j + 1; k < l.length; k++)
        if (l[i] + l[j] + l[k] == 0)
          return true;
  return false;
}

",value misuse,incorrect output,triplesSumToZero,,,"const testTriplesSumToZero = () => {
  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)
  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)
  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)
  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)
  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)
  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)
  console.assert(triplesSumToZero([1]) === false)
  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)
  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)
}

testTriplesSumToZero()
","const testTriplesSumToZero = () => {
  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)
  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)
  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)
  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)
}
testTriplesSumToZero()
",const triplesSumToZero = (l),"triplesSumToZero takes a list of integers as an input.
it returns true if there are three distinct elements in the list that
sum to zero, and false otherwise.
>>> triplesSumToZero([1, 3, 5, 0])
false
>>> triplesSumToZero([1, 3, -2, 1])
true
>>> triplesSumToZero([1, 2, 3, 7])
false
>>> triplesSumToZero([2, 4, -5, 3, 9, 7])
true
>>> triplesSumToZero([1])
false","Write a JavaScript function `const triplesSumToZero = (l)` to solve the following problem:
triplesSumToZero takes a list of integers as an input.
it returns true if there are three distinct elements in the list that
sum to zero, and false otherwise.
>>> triplesSumToZero([1, 3, 5, 0])
false
>>> triplesSumToZero([1, 3, -2, 1])
true
>>> triplesSumToZero([1, 2, 3, 7])
false
>>> triplesSumToZero([2, 4, -5, 3, 9, 7])
true
>>> triplesSumToZero([1])
false"
JavaScript/41,"/*
  Imagine a road that's a perfectly straight infinitely long line.
  n cars are driving left to right;  simultaneously, a different set of n cars
  are driving right to left.   The two sets of cars start out being very far from
  each other.  All cars move in the same speed.  Two cars are said to collide
  when a car that's moving left to right hits a car that's moving right to left.
  However, the cars are infinitely sturdy and strong; as a result, they continue moving
  in their trajectory as if they did not collide.

  This function outputs the number of such collisions.
  */
const carRaceCollision = (n) => {
","
const carRaceCollision = (n) => {
","  return Math.pow(n, 2);
}

","  return Math.pow(n, 3);
}

",value misuse,incorrect output,carRaceCollision,,,"const testCarRaceCollision = () => {
  console.assert(carRaceCollision(2) === 4)
  console.assert(carRaceCollision(3) === 9)
  console.assert(carRaceCollision(4) === 16)
  console.assert(carRaceCollision(8) === 64)
  console.assert(carRaceCollision(10) === 100)
}

testCarRaceCollision()
",,const carRaceCollision = (n),"Imagine a road that's a perfectly straight infinitely long line.
n cars are driving left to right;  simultaneously, a different set of n cars
are driving right to left.   The two sets of cars start out being very far from
each other.  All cars move in the same speed.  Two cars are said to collide
when a car that's moving left to right hits a car that's moving right to left.
However, the cars are infinitely sturdy and strong; as a result, they continue moving
in their trajectory as if they did not collide.
This function outputs the number of such collisions.","Write a JavaScript function `const carRaceCollision = (n)` to solve the following problem:
Imagine a road that's a perfectly straight infinitely long line.
n cars are driving left to right;  simultaneously, a different set of n cars
are driving right to left.   The two sets of cars start out being very far from
each other.  All cars move in the same speed.  Two cars are said to collide
when a car that's moving left to right hits a car that's moving right to left.
However, the cars are infinitely sturdy and strong; as a result, they continue moving
in their trajectory as if they did not collide.
This function outputs the number of such collisions."
JavaScript/42,"/*Return list with elements incremented by 1.
  >>> incrList([1, 2, 3])
  [2, 3, 4]
  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])
  [6, 4, 6, 3, 4, 4, 10, 1, 124]
  */
const incrList = (l) => {
","
const incrList = (l) => {
","  return l.map(e => e + 1);
}

","  return l.map(e => e + 2);
}

",value misuse,incorrect output,incrList,,,"const testIncrList = () => {
  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))
  console.assert(
    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])
  )
  console.assert(
    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===
      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])
  )
}

testIncrList()
","const testIncrList = () => {
  console.assert(
    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])
  )
  console.assert(
    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===
      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])
  )
}
testIncrList()
",const incrList = (l),"Return list with elements incremented by 1.
>>> incrList([1, 2, 3])
[2, 3, 4]
>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])
[6, 4, 6, 3, 4, 4, 10, 1, 124]","Write a JavaScript function `const incrList = (l)` to solve the following problem:
Return list with elements incremented by 1.
>>> incrList([1, 2, 3])
[2, 3, 4]
>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])
[6, 4, 6, 3, 4, 4, 10, 1, 124]"
JavaScript/43,"/*
  pairsSumToZero takes a list of integers as an input.
  it returns true if there are two distinct elements in the list that
  sum to zero, and false otherwise.
  >>> pairsSumToZero([1, 3, 5, 0])
  false
  >>> pairsSumToZero([1, 3, -2, 1])
  false
  >>> pairsSumToZero([1, 2, 3, 7])
  false
  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])
  true
  >>> pairsSumToZero([1])
  false
  */
const pairsSumToZero = (l) => {
","
const pairsSumToZero = (l) => {
","  for (let i = 0; i < l.length; i++)
    for (let j = i + 1; j < l.length; j++)
      if (l[i] + l[j] == 0)
        return true;
  return false;
}

","  for (let i = 0; i < l.length; i++)
    for (let j = i; j < l.length; j++)
      if (l[i] + l[j] == 0)
        return true;
  return false;
}

",value misuse,incorrect output,pairsSumToZero,,,"const testPairsSumToZero = () => {
  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)
  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)
  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)
  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)
  console.assert(pairsSumToZero([1]) === false)
  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)
  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)
  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)
  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)
}

testPairsSumToZero()
","const testPairsSumToZero = () => {
  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)
  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)
  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)
  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)
}
testPairsSumToZero()
",const pairsSumToZero = (l),"pairsSumToZero takes a list of integers as an input.
it returns true if there are two distinct elements in the list that
sum to zero, and false otherwise.
>>> pairsSumToZero([1, 3, 5, 0])
false
>>> pairsSumToZero([1, 3, -2, 1])
false
>>> pairsSumToZero([1, 2, 3, 7])
false
>>> pairsSumToZero([2, 4, -5, 3, 5, 7])
true
>>> pairsSumToZero([1])
false","Write a JavaScript function `const pairsSumToZero = (l)` to solve the following problem:
pairsSumToZero takes a list of integers as an input.
it returns true if there are two distinct elements in the list that
sum to zero, and false otherwise.
>>> pairsSumToZero([1, 3, 5, 0])
false
>>> pairsSumToZero([1, 3, -2, 1])
false
>>> pairsSumToZero([1, 2, 3, 7])
false
>>> pairsSumToZero([2, 4, -5, 3, 5, 7])
true
>>> pairsSumToZero([1])
false"
JavaScript/44,"/*Change numerical base of input number x to base.
  return string representation after the conversion.
  base numbers are less than 10.
  >>> changeBase(8, 3)
  '22'
  >>> changeBase(8, 2)
  '1000'
  >>> changeBase(7, 2)
  '111'
  */
const changeBase = (x, base) => {
","
const changeBase = (x, base) => {
","  var ret = """";
  while (x > 0) {
    ret = (x % base).toString() + ret;
    x = Math.floor(x / base);
  }
  return ret;
}

","  var ret = """";
  while (x > 0) {
    ret = (x % base).toString() + ret;
    x = Math.floor(x - base);
  }
  return ret;
}

",operator misuse,infinite loop,changeBase,,,"const testChangeBase = () => {
  console.assert(changeBase(8, 3) === '22')
  console.assert(changeBase(9, 3) === '100')
  console.assert(changeBase(234, 2) === '11101010')
  console.assert(changeBase(16, 2) === '10000')
  console.assert(changeBase(8, 2) === '1000')
  console.assert(changeBase(7, 2) === '111')

  for (let i = 2; i < 8; i++) {
    console.assert(changeBase(i, i + 1) === i.toString())
  }
}

testChangeBase()
","const testChangeBase = () => {
  console.assert(changeBase(8, 3) === '22')
  console.assert(changeBase(8, 2) === '1000')
  console.assert(changeBase(7, 2) === '111')
}
testChangeBase()
","const changeBase = (x, base)","Change numerical base of input number x to base.
return string representation after the conversion.
base numbers are less than 10.
>>> changeBase(8, 3)
'22'
>>> changeBase(8, 2)
'1000'
>>> changeBase(7, 2)
'111'","Write a JavaScript function `const changeBase = (x, base)` to solve the following problem:
Change numerical base of input number x to base.
return string representation after the conversion.
base numbers are less than 10.
>>> changeBase(8, 3)
'22'
>>> changeBase(8, 2)
'1000'
>>> changeBase(7, 2)
'111'"
JavaScript/45,"/*Given length of a side and high return area for a triangle.
  >>> triangleArea(5, 3)
  7.5
  */
const triangleArea = (a, h) => {
","
const triangleArea = (a, h) => {
","  return a * h / 2.0;
}

","  return a * h / 0.5;
}

",value misuse,incorrect output,triangleArea,,,"const testTriangleArea = () => {
  console.assert(triangleArea(5, 3) === 7.5)
  console.assert(triangleArea(2, 2) === 2.0)
  console.assert(triangleArea(10, 8) === 40.0)
}

testTriangleArea()
","const testTriangleArea = () => {
  console.assert(triangleArea(5, 3) === 7.5)
}
testTriangleArea()
","const triangleArea = (a, h)","Given length of a side and high return area for a triangle.
>>> triangleArea(5, 3)
7.5","Write a JavaScript function `const triangleArea = (a, h)` to solve the following problem:
Given length of a side and high return area for a triangle.
>>> triangleArea(5, 3)
7.5"
JavaScript/46,"/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
  fib4(0) -> 0
  fib4(1) -> 0
  fib4(2) -> 2
  fib4(3) -> 0
  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
  >>> fib4(5)
  4
  >>> fib4(6)
  8
  >>> fib4(7)
  14
  */
const fib4 = (n) => {
","
const fib4 = (n) => {
","  var results = [0, 0, 2, 0];
  if (n < 4)
    return results[n];
  for (let i = 4; i < n + 1; i++) {
    results.push(results.at(-1) + results.at(-2) +
                results.at(-3) + results.at(-4));
    results.shift();
  }
  return results.pop();
}

","  var results = [0, 0, 2, 0];
  if (n < 4)
    return results[n];
  for (let i = 4; i < n + 1; i++) {
    results.push(results.at(-1) + results.at(-2) +
                results.at(-3) + results.at(-4));
    results.shift();
  }
  return results.at(-2);
}

",value misuse,incorrect output,fib4,,,"const testFib4 = () => {
  console.assert(fib4(5) === 4)
  console.assert(fib4(8) === 28)
  console.assert(fib4(10) === 104)
  console.assert(fib4(12) === 386)
}

testFib4()
","const testFib4 = () => {
  console.assert(fib4(5) === 4)
  console.assert(fib4(6) === 8)
  console.assert(fib4(7) === 14)
}
testFib4()
",const fib4 = (n),"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
fib4(0) -> 0
fib4(1) -> 0
fib4(2) -> 2
fib4(3) -> 0
fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
>>> fib4(5)
4
>>> fib4(6)
8
>>> fib4(7)
14","Write a JavaScript function `const fib4 = (n)` to solve the following problem:
The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
fib4(0) -> 0
fib4(1) -> 0
fib4(2) -> 2
fib4(3) -> 0
fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
>>> fib4(5)
4
>>> fib4(6)
8
>>> fib4(7)
14"
JavaScript/47,"/*Return median of elements in the list l.
  >>> median([3, 1, 2, 4, 5])
  3
  >>> median([-10, 4, 6, 1000, 10, 20])
  8.0
  */
const median = (l) => {
","
const median = (l) => {
","  l.sort((a, b) => a - b);
  var len = l.length;
  if (l.length % 2 == 1)
    return l[Math.floor(len / 2)];
  else
    return (l[len / 2 - 1] + l[len / 2]) / 2.0;
}

","  l.sort((a, b) => a - b);
  var len = l.length;
  if (l.length % 2 == 1)
    return l[Math.floor(len / 2)];
  else
    return (l[len - 1 / 2] + l[len / 2]) / 2.0;
}

",value misuse,incorrect output,median,,,"const testMedian = () => {
  console.assert(median([3, 1, 2, 4, 5]) === 3)
  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)
  console.assert(median([5]) === 5)
  console.assert(median([6, 5]) === 5.5)
  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)
}

testMedian()
","const testMedian = () => {
  console.assert(median([3, 1, 2, 4, 5]) === 3)
  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)
}
testMedian()
",const median = (l),"Return median of elements in the list l.
>>> median([3, 1, 2, 4, 5])
3
>>> median([-10, 4, 6, 1000, 10, 20])
8.0","Write a JavaScript function `const median = (l)` to solve the following problem:
Return median of elements in the list l.
>>> median([3, 1, 2, 4, 5])
3
>>> median([-10, 4, 6, 1000, 10, 20])
8.0"
JavaScript/48,"/*
  Checks if given string is a palindrome
  >>> isPalindrome('')
  true
  >>> isPalindrome('aba')
  true
  >>> isPalindrome('aaaaa')
  true
  >>> isPalindrome('zbcd')
  false
  */
const isPalindrome = (text) => {
","
const isPalindrome = (text) => {
","  for (let i = 0; i < text.length; i++)
    if (text[i] != text.at(-i-1))
      return false;
  return true;
}

","  for (let i = 0; i < text.length; i++)
    if (text[i] != text.at(-i))
      return false;
  return true;
}

",value misuse,incorrect output,isPalindrome,,,"const testIsPalindrome = () => {
  console.assert(isPalindrome('') === true)
  console.assert(isPalindrome('aba') === true)
  console.assert(isPalindrome('aaaaa') === true)
  console.assert(isPalindrome('zbcd') === false)
  console.assert(isPalindrome('xywyx') === true)
  console.assert(isPalindrome('xywyz') === false)
  console.assert(isPalindrome('xywzx') === false)
}

testIsPalindrome()
","const testIsPalindrome = () => {
  console.assert(isPalindrome('') === true)
  console.assert(isPalindrome('aba') === true)
  console.assert(isPalindrome('aaaaa') === true)
  console.assert(isPalindrome('zbcd') === false)
}
testIsPalindrome()
",const isPalindrome = (text),"Checks if given string is a palindrome
>>> isPalindrome('')
true
>>> isPalindrome('aba')
true
>>> isPalindrome('aaaaa')
true
>>> isPalindrome('zbcd')
false","Write a JavaScript function `const isPalindrome = (text)` to solve the following problem:
Checks if given string is a palindrome
>>> isPalindrome('')
true
>>> isPalindrome('aba')
true
>>> isPalindrome('aaaaa')
true
>>> isPalindrome('zbcd')
false"
JavaScript/49,"/*Return 2^n modulo p (be aware of numerics).
  >>> modp(3, 5)
  3
  >>> modp(1101, 101)
  2
  >>> modp(0, 101)
  1
  >>> modp(3, 11)
  8
  >>> modp(100, 101)
  1
  */
const modp = (n, p) => {
","
const modp = (n, p) => {
","  var ret = 1;
  for (let i = 0; i < n; i++)
    ret = (2 * ret) % p;
  return ret;
}

","  var ret = 0;
  for (let i = 0; i < n; i++)
    ret = (2 * ret) % p;
  return ret;
}

",value misuse,incorrect output,modp,,,"const testModp = () => {
  console.assert(modp(3, 5) === 3)
  console.assert(modp(1101, 101) === 2)
  console.assert(modp(0, 101) === 1)
  console.assert(modp(3, 11) === 8)
  console.assert(modp(100, 101) === 1)
  console.assert(modp(30, 5) === 4)
  console.assert(modp(31, 5) === 3)
}

testModp()
","const testModp = () => {
  console.assert(modp(3, 5) === 3)
  console.assert(modp(1101, 101) === 2)
  console.assert(modp(0, 101) === 1)
  console.assert(modp(3, 11) === 8)
  console.assert(modp(100, 101) === 1)
}
testModp()
","const modp = (n, p)","Return 2^n modulo p (be aware of numerics).
>>> modp(3, 5)
3
>>> modp(1101, 101)
2
>>> modp(0, 101)
1
>>> modp(3, 11)
8
>>> modp(100, 101)
1","Write a JavaScript function `const modp = (n, p)` to solve the following problem:
Return 2^n modulo p (be aware of numerics).
>>> modp(3, 5)
3
>>> modp(1101, 101)
2
>>> modp(0, 101)
1
>>> modp(3, 11)
8
>>> modp(100, 101)
1"
JavaScript/50,"/*
  returns encoded string by shifting every character by 5 in the alphabet.
  */
const encodeShift = (s) => {
  return s.split("""").map(ch => String.fromCharCode(
    ((ch.charCodeAt(0) + 5 - ""a"".charCodeAt(0)) % 26) + ""a"".charCodeAt(0)
  )).join("""");
}

/*
  takes as input string encoded with encode_shift function. Returns decoded string.
  */
const decodeShift = (s) => {
","const encodeShift = (s) => {
  return s.split("""").map(ch => String.fromCharCode(
    ((ch.charCodeAt(0) + 5 - ""a"".charCodeAt(0)) % 26) + ""a"".charCodeAt(0)
  )).join("""");
}

const decodeShift = (s) => {
","  return s.split("""").map(ch => String.fromCharCode(
    ((ch.charCodeAt(0) - 5 + 26 - ""a"".charCodeAt(0)) % 26) + ""a"".charCodeAt(0)
  )).join("""");
}

","  return s.split("""").map(ch => String.fromCharCode(
    ((ch.charCodeAt(0) - 5 + 26 - ""a"".charCodeAt(0)) % 26) + ch.charCodeAt(0)
  )).join("""");
}

",variable misuse,incorrect output,decodeShift,,,"const testDecodeShift = () => {
    const letters = new Array(26)
    .fill(null)
    .map((v, i) => String.fromCharCode(97 + i))

    for (let i = 0; i < 100; i++) {
      let str = new Array(Math.floor(Math.random() * 20)).fill(null);
      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');
      let encoded_str = encodeShift(str)
      console.assert(decodeShift(encoded_str) === str)
    }

}

testDecodeShift()
",,const decodeShift = (s),takes as input string encoded with encode_shift function. Returns decoded string.,"Write a JavaScript function `const decodeShift = (s)` to solve the following problem:
takes as input string encoded with encode_shift function. Returns decoded string."
JavaScript/51,"/*
  removeVowels is a function that takes string and returns string without vowels.
  >>> removeVowels('')
  ''
  >>> removeVowels(""abcdef\nghijklm"")
  'bcdf\nghjklm'
  >>> removeVowels('abcdef')
  'bcdf'
  >>> removeVowels('aaaaa')
  ''
  >>> removeVowels('aaBAA')
  'B'
  >>> removeVowels('zbcd')
  'zbcd'
  */
const removeVowels = (text) => {
","
const removeVowels = (text) => {
","  return text.split("""")
             .filter(s => ![""a"", ""e"", ""i"", ""o"", ""u""]
                      .includes(s.toLowerCase())
                    )
             .join("""")
}

","  return text.split("""")
             .filter(s => ![""a"", ""e"", ""i"", ""o"", ""u"", ""w"", ""y""]
                      .includes(s.toLowerCase())
                    )
             .join("""")
}

",excess logic,incorrect output,removeVowels,,,"const testRemoveVowels = () => {
  console.assert(removeVowels('') === '')
  console.assert(removeVowels('abcdef\nghijklm') === 'bcdf\nghjklm')
  console.assert(removeVowels('fedcba') === 'fdcb')
  console.assert(removeVowels('eeeee') === '')
  console.assert(removeVowels('acBAA') === 'cB')
  console.assert(removeVowels('EcBOO') === 'cB')
  console.assert(removeVowels('ybcd') === 'ybcd')
}

testRemoveVowels()
","const testRemoveVowels = () => {
  console.assert(removeVowels('') === '')
  console.assert(removeVowels('abcdef\nghijklm') === 'bcdf\nghjklm')
  console.assert(removeVowels('abcdef') === 'bcdf')
  console.assert(removeVowels('aaaaa') === '')
  console.assert(removeVowels('aaBAA') === 'B')
  console.assert(removeVowels('zbcd') === 'zbcd')
}
testRemoveVowels()
",const removeVowels = (text),"removeVowels is a function that takes string and returns string without vowels.
>>> removeVowels('')
''
>>> removeVowels(""abcdef\nghijklm"")
'bcdf\nghjklm'
>>> removeVowels('abcdef')
'bcdf'
>>> removeVowels('aaaaa')
''
>>> removeVowels('aaBAA')
'B'
>>> removeVowels('zbcd')
'zbcd'","Write a JavaScript function `const removeVowels = (text)` to solve the following problem:
removeVowels is a function that takes string and returns string without vowels.
>>> removeVowels('')
''
>>> removeVowels(""abcdef\nghijklm"")
'bcdf\nghjklm'
>>> removeVowels('abcdef')
'bcdf'
>>> removeVowels('aaaaa')
''
>>> removeVowels('aaBAA')
'B'
>>> removeVowels('zbcd')
'zbcd'"
JavaScript/52,"/*Return true if all numbers in the list l are below threshold t.
  >>> belowThreshold([1, 2, 4, 10], 100)
  true
  >>> belowThreshold([1, 20, 4, 10], 5)
  false
  */
const belowThreshold = (l, t) => {
","
const belowThreshold = (l, t) => {
","  for (const e of l)
    if (e >= t)
      return false;
  return true;
}

","  for (const e of l)
    if (e >= t)
      return true;
  return false;
}

",operator misuse,incorrect output,belowThreshold,,,"const testBelowThreshold = () => {
  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)
  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)
  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)
  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)
  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)
  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)
}

testBelowThreshold()
","const testBelowThreshold = () => {
  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)
  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)
}
testBelowThreshold()
","const belowThreshold = (l, t)","Return true if all numbers in the list l are below threshold t.
>>> belowThreshold([1, 2, 4, 10], 100)
true
>>> belowThreshold([1, 20, 4, 10], 5)
false","Write a JavaScript function `const belowThreshold = (l, t)` to solve the following problem:
Return true if all numbers in the list l are below threshold t.
>>> belowThreshold([1, 2, 4, 10], 100)
true
>>> belowThreshold([1, 20, 4, 10], 5)
false"
JavaScript/53,"/*Add two numbers x and y
  >>> add(2, 3)
  5
  >>> add(5, 7)
  12
  */
const add = (x, y) => {
","
const add = (x, y) => {
","  return x + y;
}

","  return x + y + y + x;
}

",excess logic,incorrect output,add,,,"const testAdd = () => {
  const getRandomIntInclusive = (min = 0, max = 9) => {
    min = Math.ceil(min)
    max = Math.floor(max)
    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值
  }

  console.assert(add(0, 1) === 1)
  console.assert(add(1, 0) === 1)
  console.assert(add(2, 3) === 5)
  console.assert(add(5, 7) === 12)
  console.assert(add(7, 5) === 12)

  for (let i = 0; i < 100; i++) {
    let x = getRandomIntInclusive()
    let y = getRandomIntInclusive()
    console.assert(x + y === add(x, y))
  }
}

testAdd()
","const testAdd = () => {
  const getRandomIntInclusive = (min = 0, max = 9) => {
    min = Math.ceil(min)
    max = Math.floor(max)
    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值
  }
  console.assert(add(2, 3) === 5)
  console.assert(add(5, 7) === 12)
}
testAdd()
","const add = (x, y)","Add two numbers x and y
>>> add(2, 3)
5
>>> add(5, 7)
12","Write a JavaScript function `const add = (x, y)` to solve the following problem:
Add two numbers x and y
>>> add(2, 3)
5
>>> add(5, 7)
12"
JavaScript/54,"/*
  Check if two words have the same characters.
  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')
  true
  >>> sameChars('abcd', 'dddddddabc')
  true
  >>> sameChars('dddddddabc', 'abcd')
  true
  >>> sameChars('eabcd', 'dddddddabc')
  false
  >>> sameChars('abcd', 'dddddddabce')
  false
  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')
  false
  */
const sameChars = (s0, s1) => {
","
const sameChars = (s0, s1) => {
","  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());
}

","  return JSON.stringify([...new Set(s0)]) === JSON.stringify([...new Set(s1)]);
}

",missing logic,incorrect output,sameChars,,,"const testSameChars = () => {
  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)
  console.assert(sameChars('abcd', 'dddddddabc') === true)
  console.assert(sameChars('dddddddabc', 'abcd') === true)
  console.assert(sameChars('eabcd', 'dddddddabc') === false)
  console.assert(sameChars('abcd', 'dddddddabcf') === false)
  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)
  console.assert(sameChars('aabb', 'aaccc') === false)
}

testSameChars()
","const testSameChars = () => {
  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)
  console.assert(sameChars('abcd', 'dddddddabc') === true)
  console.assert(sameChars('dddddddabc', 'abcd') === true)
  console.assert(sameChars('eabcd', 'dddddddabc') === false)
  console.assert(sameChars('abcd', 'dddddddabcf') === false)
  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)
}
testSameChars()
","const sameChars = (s0, s1)","Check if two words have the same characters.
>>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')
true
>>> sameChars('abcd', 'dddddddabc')
true
>>> sameChars('dddddddabc', 'abcd')
true
>>> sameChars('eabcd', 'dddddddabc')
false
>>> sameChars('abcd', 'dddddddabce')
false
>>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')
false","Write a JavaScript function `const sameChars = (s0, s1)` to solve the following problem:
Check if two words have the same characters.
>>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')
true
>>> sameChars('abcd', 'dddddddabc')
true
>>> sameChars('dddddddabc', 'abcd')
true
>>> sameChars('eabcd', 'dddddddabc')
false
>>> sameChars('abcd', 'dddddddabce')
false
>>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')
false"
JavaScript/55,"/*Return n-th Fibonacci number.
  >>> fib(10)
  55
  >>> fib(1)
  1
  >>> fib(8)
  21
  */
const fib = (n) => {
","
const fib = (n) => {
","  if (n == 0)
    return 0;
  if (n == 1)
    return 1;
  return fib(n - 1) + fib(n - 2);
}

","  if (n == 0)
    return 0;
  if (n == 1)
    return 1;
  if (n == 2)
    return 2;
  return fib(n - 1) + fib(n - 2);
}

",excess logic,incorrect output,fib,,,"const testFib = () => {
  console.assert(fib(10) === 55)
  console.assert(fib(1) === 1)
  console.assert(fib(8) === 21)
  console.assert(fib(11) === 89)
  console.assert(fib(12) === 144)
}

testFib()
","const testFib = () => {
  console.assert(fib(10) === 55)
  console.assert(fib(1) === 1)
  console.assert(fib(8) === 21)
}
testFib()
",const fib = (n),"Return n-th Fibonacci number.
>>> fib(10)
55
>>> fib(1)
1
>>> fib(8)
21","Write a JavaScript function `const fib = (n)` to solve the following problem:
Return n-th Fibonacci number.
>>> fib(10)
55
>>> fib(1)
1
>>> fib(8)
21"
JavaScript/56,"/* brackets is a string of ""<"" and "">"".
  return false if every opening bracket has a corresponding closing bracket.

  >>> correctBracketing(""<"")
  false
  >>> correctBracketing(""<>"")
  false
  >>> correctBracketing(""<<><>>"")
  false
  >>> correctBracketing(""><<>"")
  false
  */
const correctBracketing = (brackets) => {
","
const correctBracketing = (brackets) => {
","  var depth = 0;
  for (const b of brackets) {
    if (b == ""<"")
      depth += 1;
    else
      depth -= 1;
    if (depth < 0)
      return false;
  }
  return depth == 0;
}

","  var depth = 0;
  for (const b of brackets) {
    if (b == "">"")
      depth += 1;
    else
      depth -= 1;
    if (depth < 0)
      return false;
  }
  return depth == 0;
}

",operator misuse,incorrect output,correctBracketing,,,"const testCorrectBracketing = () => {
  console.assert(correctBracketing('<>') === true)
  console.assert(correctBracketing('<<><>>') === true)
  console.assert(correctBracketing('<><><<><>><>') === true)
  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)
  console.assert(correctBracketing('<<<><>>>>') === false)
  console.assert(correctBracketing('><<>') === false)
  console.assert(correctBracketing('<') === false)
  console.assert(correctBracketing('<<<<') === false)
  console.assert(correctBracketing('>') === false)
  console.assert(correctBracketing('<<>') === false)
  console.assert(correctBracketing('<><><<><>><>><<>') === false)
  console.assert(correctBracketing('<><><<><>><>>><>') === false)
}

testCorrectBracketing()
","const testCorrectBracketing = () => {
  console.assert(correctBracketing('<>') === true)
  console.assert(correctBracketing('<<><>>') === true)
  console.assert(correctBracketing('><<>') === false)
  console.assert(correctBracketing('<') === false)
}
testCorrectBracketing()
",const correctBracketing = (brackets),"brackets is a string of ""<"" and "">"".
return false if every opening bracket has a corresponding closing bracket.
>>> correctBracketing(""<"")
false
>>> correctBracketing(""<>"")
false
>>> correctBracketing(""<<><>>"")
false
>>> correctBracketing(""><<>"")
false","Write a JavaScript function `const correctBracketing = (brackets)` to solve the following problem:
brackets is a string of ""<"" and "">"".
return false if every opening bracket has a corresponding closing bracket.
>>> correctBracketing(""<"")
false
>>> correctBracketing(""<>"")
false
>>> correctBracketing(""<<><>>"")
false
>>> correctBracketing(""><<>"")
false"
JavaScript/57,"/*Return true is list elements are monotonically increasing or decreasing.
  >>> monotonic([1, 2, 4, 20])
  true
  >>> monotonic([1, 20, 4, 10])
  false
  >>> monotonic([4, 1, 0, -10])
  true
  */
const monotonic = (l) => {
","
const monotonic = (l) => {
","  var sort1 = [...l].sort((a, b) => a - b);
  var sort2 = [...l].sort((a, b) => b - a);
  if (JSON.stringify(l) === JSON.stringify(sort1) ||
      JSON.stringify(l) === JSON.stringify(sort2))
    return true;
  return false;
}

","  var sort1 = [...l].sort((a, b) => a - b);
  var sort2 = [...l].sort((a, b) => b - a);
  if (JSON.stringify(l) === JSON.stringify(sort1) ||
      JSON.stringify(l) === JSON.stringify(sort2))
    return false;
  return true;
}

",operator misuse,incorrect output,monotonic,,,"const testMonotonic = () => {
  console.assert(monotonic([1, 2, 4, 10]) === true)
  console.assert(monotonic([1, 2, 4, 20]) === true)
  console.assert(monotonic([1, 20, 4, 10]) === false)
  console.assert(monotonic([4, 1, 0, -10]) === true)
  console.assert(monotonic([4, 1, 1, 0]) === true)
  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)
  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)
  console.assert(monotonic([9, 9, 9, 9]) === true)
}

testMonotonic()
","const testMonotonic = () => {
  console.assert(monotonic([1, 2, 4, 10]) === true)
  console.assert(monotonic([1, 20, 4, 10]) === false)
  console.assert(monotonic([4, 1, 0, -10]) === true)
}
testMonotonic()
",const monotonic = (l),"Return true is list elements are monotonically increasing or decreasing.
>>> monotonic([1, 2, 4, 20])
true
>>> monotonic([1, 20, 4, 10])
false
>>> monotonic([4, 1, 0, -10])
true","Write a JavaScript function `const monotonic = (l)` to solve the following problem:
Return true is list elements are monotonically increasing or decreasing.
>>> monotonic([1, 2, 4, 20])
true
>>> monotonic([1, 20, 4, 10])
false
>>> monotonic([4, 1, 0, -10])
true"
JavaScript/58,"/*Return sorted unique common elements for two lists.
  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
  [1, 5, 653]
  >>> common([5, 3, 2, 8], [3, 2])
  [2, 3]

  */
const common = (l1, l2) => {
","
const common = (l1, l2) => {
","  var ret = new Set();
  for (const e1 of l1)
    for (const e2 of l2)
      if (e1 == e2)
        ret.add(e1);
  return [...ret].sort();
}

","  var ret = new Set();
  for (const e1 of l1)
    for (const e2 of l2)
      ret.add(e1);
  return [...ret].sort();
}

",missing logic,incorrect output,common,,,"const testCommon = () => {
  console.assert(
    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))
     === JSON.stringify([1, 5, 653])
  )
  console.assert(
    JSON.stringify(common([5, 3, 2, 8], [3, 2]))
     === JSON.stringify([2, 3])
  )
  console.assert(
    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===
      JSON.stringify([2, 3, 4])
  )
  console.assert(
    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])
  )
}

testCommon()
","const testCommon = () => {
  console.assert(
    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))
     === JSON.stringify([1, 5, 653])
  )
  console.assert(
    JSON.stringify(common([5, 3, 2, 8], [3, 2]))
     === JSON.stringify([2, 3])
  )
}
testCommon()
","const common = (l1, l2)","Return sorted unique common elements for two lists.
>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
[1, 5, 653]
>>> common([5, 3, 2, 8], [3, 2])
[2, 3]","Write a JavaScript function `const common = (l1, l2)` to solve the following problem:
Return sorted unique common elements for two lists.
>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
[1, 5, 653]
>>> common([5, 3, 2, 8], [3, 2])
[2, 3]"
JavaScript/59,"/*Return the largest prime factor of n. Assume n > 1 and is not a prime.
  >>> largestPrimeFactor(13195)
  29
  >>> largestPrimeFactor(2048)
  2
  */
const largestPrimeFactor = (n) => {
","
const largestPrimeFactor = (n) => {
","  var isPrime = function (k) {
    if (k < 2)
      return false;
    for (let i = 2; i < k - 1; i++)
      if (k % i == 0)
        return false;
    return true;
  }

  var largest = 1;
  for (let j = 2; j < n + 1; j++)
    if (n % j == 0 && isPrime(j))
      largest = Math.max(largest, j);
  return largest;
}

","  var isPrime = function (k) {
    if (k < 2)
      return false;
    for (let i = 2; i < k - 1; i++)
      if (k % i == 0)
        return false;
    return true;
  }

  var largest = 1;
  for (let j = 2; j < n + 1; j++)
    if (n % j == 0 && isPrime(n))
      largest = Math.max(largest, j);
  return largest;
}

",variable misuse,incorrect output,largestPrimeFactor,,,"const testLargestPrimeFactor = () => {
  console.assert(largestPrimeFactor(15) === 5)
  console.assert(largestPrimeFactor(27) === 3)
  console.assert(largestPrimeFactor(63) === 7)
  console.assert(largestPrimeFactor(330) === 11)
  console.assert(largestPrimeFactor(13195) === 29)
}

testLargestPrimeFactor()
","const testLargestPrimeFactor = () => {
  console.assert(largestPrimeFactor(2048) === 2)
  console.assert(largestPrimeFactor(13195) === 29)
}
testLargestPrimeFactor()
",const largestPrimeFactor = (n),"Return the largest prime factor of n. Assume n > 1 and is not a prime.
>>> largestPrimeFactor(13195)
29
>>> largestPrimeFactor(2048)
2","Write a JavaScript function `const largestPrimeFactor = (n)` to solve the following problem:
Return the largest prime factor of n. Assume n > 1 and is not a prime.
>>> largestPrimeFactor(13195)
29
>>> largestPrimeFactor(2048)
2"
JavaScript/60,"/*sumToN is a function that sums numbers from 1 to n.
  >>> sumToN(30)
  465
  >>> sumToN(100)
  5050
  >>> sumToN(5)
  15
  >>> sumToN(10)
  55
  >>> sumToN(1)
  1
  */
const sumToN = (n) => {
","
const sumToN = (n) => {
","  return n * (n + 1) / 2;
}

","  return n * n / 2;
}

",value misuse,incorrect output,sumToN,,,"const testSumToN = () => {
  console.assert(sumToN(1) === 1)
  console.assert(sumToN(6) === 21)
  console.assert(sumToN(11) === 66)
  console.assert(sumToN(30) === 465)
  console.assert(sumToN(100) === 5050)
}

testSumToN()
","const testSumToN = () => {
  console.assert(sumToN(1) === 1)
  console.assert(sumToN(5) === 15)
  console.assert(sumToN(10) === 55)
  console.assert(sumToN(30) === 465)
  console.assert(sumToN(100) === 5050)
}
testSumToN()
",const sumToN = (n),"sumToN is a function that sums numbers from 1 to n.
>>> sumToN(30)
465
>>> sumToN(100)
5050
>>> sumToN(5)
15
>>> sumToN(10)
55
>>> sumToN(1)
1","Write a JavaScript function `const sumToN = (n)` to solve the following problem:
sumToN is a function that sums numbers from 1 to n.
>>> sumToN(30)
465
>>> sumToN(100)
5050
>>> sumToN(5)
15
>>> sumToN(10)
55
>>> sumToN(1)
1"
JavaScript/61,"/* brackets is a string of ""("" and "")"".
  return true if every opening bracket has a corresponding closing bracket.

  >>> correctBracketing(""("")
  false
  >>> correctBracketing(""()"")
  true
  >>> correctBracketing(""(()())"")
  true
  >>> correctBracketing("")(()"")
  false
  */
const correctBracketing = (brackets) => {
","
const correctBracketing = (brackets) => {
","  var depth = 0;
  for (const b of brackets) {
    if (b == ""("")
      depth += 1;
    else
      depth -= 1;
    if (depth < 0)
      return false;
  }
  return depth == 0;
}

","  var depth = 0;
  for (const b of brackets) {
    if (b == ""("")
      depth += 1;
    else
      depth -= 1;
    if (depth < 0)
      return true;
  }
  return depth == 0;
}

",operator misuse,incorrect output,correctBracketing,,,"const testCorrectBracketing = () => {
  console.assert(correctBracketing('()') === true)
  console.assert(correctBracketing('(()())') === true)
  console.assert(correctBracketing('()()(()())()') === true)
  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)
  console.assert(correctBracketing('((()())))') === false)
  console.assert(correctBracketing(')(()') === false)
  console.assert(correctBracketing('(') === false)
  console.assert(correctBracketing('((((') === false)
  console.assert(correctBracketing(')') === false)
  console.assert(correctBracketing('(()') === false)
  console.assert(correctBracketing('()()(()())())(()') === false)
  console.assert(correctBracketing('()()(()())()))()') === false)
}

testCorrectBracketing()
","const testCorrectBracketing = () => {
  console.assert(correctBracketing('()') === true)
  console.assert(correctBracketing('(()())') === true)
  console.assert(correctBracketing(')(()') === false)
  console.assert(correctBracketing('(') === false)
}
testCorrectBracketing()
",const correctBracketing = (brackets),"brackets is a string of ""("" and "")"".
return true if every opening bracket has a corresponding closing bracket.
>>> correctBracketing(""("")
false
>>> correctBracketing(""()"")
true
>>> correctBracketing(""(()())"")
true
>>> correctBracketing("")(()"")
false","Write a JavaScript function `const correctBracketing = (brackets)` to solve the following problem:
brackets is a string of ""("" and "")"".
return true if every opening bracket has a corresponding closing bracket.
>>> correctBracketing(""("")
false
>>> correctBracketing(""()"")
true
>>> correctBracketing(""(()())"")
true
>>> correctBracketing("")(()"")
false"
JavaScript/62,"/* xs represent coefficients of a polynomial.
  xs[0] + xs[1] * x + xs[2] * x^2 + ....
   Return derivative of this polynomial in the same form.
  >>> derivative([3, 1, 2, 4, 5])
  [1, 4, 12, 20]
  >>> derivative([1, 2, 3])
  [2, 6]
  */
const derivative = (xs) => {
","
const derivative = (xs) => {
","  return xs.map((x, i) => x * i).slice(1);
}

","  return xs.map((x, i) => x * i);
}

",value misuse,incorrect output,derivative,,,"const testDerivative = () => {
  console.assert(
    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===
      JSON.stringify([1, 4, 12, 20])
  )
  console.assert(
    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])
  )
  console.assert(
    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])
  )
  console.assert(
    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===
      JSON.stringify([2, 2, 0, 16])
  )
  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))
}

testDerivative()
","const testDerivative = () => {
  console.assert(
    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===
      JSON.stringify([1, 4, 12, 20])
  )
  console.assert(
    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])
  )
}
testDerivative()
",const derivative = (xs),"xs represent coefficients of a polynomial.
xs[0] + xs[1] * x + xs[2] * x^2 + ....
Return derivative of this polynomial in the same form.
>>> derivative([3, 1, 2, 4, 5])
[1, 4, 12, 20]
>>> derivative([1, 2, 3])
[2, 6]","Write a JavaScript function `const derivative = (xs)` to solve the following problem:
xs represent coefficients of a polynomial.
xs[0] + xs[1] * x + xs[2] * x^2 + ....
Return derivative of this polynomial in the same form.
>>> derivative([3, 1, 2, 4, 5])
[1, 4, 12, 20]
>>> derivative([1, 2, 3])
[2, 6]"
JavaScript/63,"/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
  fibfib(0) == 0
  fibfib(1) == 0
  fibfib(2) == 1
  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
  Please write a function to efficiently compute the n-th element of the fibfib number sequence.
  >>> fibfib(1)
  0
  >>> fibfib(5)
  4
  >>> fibfib(8)
  24
  */
const fibfib = (n) => {
","
const fibfib = (n) => {
","  if (n == 0 || n == 1)
    return 0;
  if (n == 2)
    return 1;
  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);
}

","  if (n == 0 || n == 1)
    return n;
  if (n == 2)
    return 2;
  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);
}

",value misuse,incorrect output,fibfib,,,"const testFibfib = () => {
  console.assert(fibfib(2) === 1)
  console.assert(fibfib(1) === 0)
  console.assert(fibfib(5) === 4)
  console.assert(fibfib(8) === 24)
  console.assert(fibfib(10) === 81)
  console.assert(fibfib(12) === 274)
  console.assert(fibfib(14) === 927)
}

testFibfib()
","const testFibfib = () => {
  console.assert(fibfib(1) === 0)
  console.assert(fibfib(5) === 4)
  console.assert(fibfib(8) === 24)
}
testFibfib()
",const fibfib = (n),"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
fibfib(0) == 0
fibfib(1) == 0
fibfib(2) == 1
fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
Please write a function to efficiently compute the n-th element of the fibfib number sequence.
>>> fibfib(1)
0
>>> fibfib(5)
4
>>> fibfib(8)
24","Write a JavaScript function `const fibfib = (n)` to solve the following problem:
The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
fibfib(0) == 0
fibfib(1) == 0
fibfib(2) == 1
fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
Please write a function to efficiently compute the n-th element of the fibfib number sequence.
>>> fibfib(1)
0
>>> fibfib(5)
4
>>> fibfib(8)
24"
JavaScript/64,"/*Write a function vowelsCount which takes a string representing
  a word as input and returns the number of vowels in the string.
  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
  vowel, but only when it is at the end of the given word.

  Example:
  >>> vowelsCount(""abcde"")
  2
  >>> vowelsCount(""ACEDY"")
  3
  */
const vowelsCount = (s) => {
","
const vowelsCount = (s) => {
","  var vowels = ""aeiouAEIOU"";
  var n_vowels = s.split('').reduce((prev, item) => {
    return prev + (vowels.includes(item));
  }, 0);
  if (s.at(-1) == 'y' || s.at(-1) == 'Y')
    n_vowels += 1;
  return n_vowels;
}

","  var vowels = ""aeiouyAEIOUY"";
  var n_vowels = s.split('').reduce((prev, item) => {
    return prev + (vowels.includes(item));
  }, 0);
  return n_vowels;
}

",missing logic,incorrect output,vowelsCount,,,"const testVowelsCount = () => {
  console.assert(vowelsCount('abcde') === 2)
  console.assert(vowelsCount('Alone') === 3)
  console.assert(vowelsCount('key') === 2)
  console.assert(vowelsCount('bye') === 1)
  console.assert(vowelsCount('keY') === 2)
  console.assert(vowelsCount('bYe') === 1)
  console.assert(vowelsCount('ACEDY') === 3)
}

testVowelsCount()
","const testVowelsCount = () => {
  console.assert(vowelsCount('abcde') === 2)
  console.assert(vowelsCount('ACEDY') === 3)
}
testVowelsCount()
",const vowelsCount = (s),"Write a function vowelsCount which takes a string representing
a word as input and returns the number of vowels in the string.
Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
vowel, but only when it is at the end of the given word.
Example:
>>> vowelsCount(""abcde"")
2
>>> vowelsCount(""ACEDY"")
3","Write a JavaScript function `const vowelsCount = (s)` to solve the following problem:
Write a function vowelsCount which takes a string representing
a word as input and returns the number of vowels in the string.
Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
vowel, but only when it is at the end of the given word.
Example:
>>> vowelsCount(""abcde"")
2
>>> vowelsCount(""ACEDY"")
3"
JavaScript/65,"/*Circular shift the digits of the integer x, shift the digits right by shift
  and return the result as a string.
  If shift > number of digits, return digits reversed.
  >>> circularShift(12, 1)
  ""21""
  >>> circularShift(12, 2)
  ""12""
  */
const circularShift = (x, shift) => {
","
const circularShift = (x, shift) => {
","  s = x.toString();
  if (shift > s.length)
    return s.split('').reverse().join('');
  else
    return s.slice(-shift) + s.slice(0, -shift);
}

","  s = x.toString();
  if (shift > s.length)
    return s.split('').reverse().join('');
  else
    return s.slice(0, -shift) + s.slice(-shift);
}

",variable misuse,incorrect output,circularShift,,,"const testCircularShift = () => {
  console.assert(circularShift(100, 2) === '001')
  console.assert(circularShift(12, 2) === '12')
  console.assert(circularShift(97, 8) === '79')
  console.assert(circularShift(12, 1) === '21')
  console.assert(circularShift(11, 101) === '11')
}

testCircularShift()
","const testCircularShift = () => {
  console.assert(circularShift(12, 2) === '12')
  console.assert(circularShift(12, 1) === '21')
}
testCircularShift()
","const circularShift = (x, shift)","Circular shift the digits of the integer x, shift the digits right by shift
and return the result as a string.
If shift > number of digits, return digits reversed.
>>> circularShift(12, 1)
""21""
>>> circularShift(12, 2)
""12""","Write a JavaScript function `const circularShift = (x, shift)` to solve the following problem:
Circular shift the digits of the integer x, shift the digits right by shift
and return the result as a string.
If shift > number of digits, return digits reversed.
>>> circularShift(12, 1)
""21""
>>> circularShift(12, 2)
""12"""
JavaScript/66,"/*Task
  Write a function that takes a string as input and returns the sum of the upper characters only'
  ASCII codes.

  Examples:
      digitSum("""") => 0
      digitSum(""abAB"") => 131
      digitSum(""abcCd"") => 67
      digitSum(""helloE"") => 69
      digitSum(""woArBld"") => 131
      digitSum(""aAaaaXa"") => 153
  */
const digitSum = (s) => {
","
const digitSum = (s) => {
","  if (s == '') return 0;
  return s.split('').reduce((prev, char) => {
    let ord_char = char.charCodeAt(0)
    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);
  }, 0);
}

","  if (s == '') return 0;
  return s.split('').reduce((prev, char) => {
    let ord_char = char.charCodeAt(0)
    return prev + (ord_char > 64 && ord_char < 100 ? ord_char : 0);
  }, 0);
}

",function misuse,incorrect output,digitSum,,,"const testDigitSum = () => {
  console.assert(digitSum('') === 0)
  console.assert(digitSum('abAB') === 131)
  console.assert(digitSum('abcCd') === 67)
  console.assert(digitSum('helloE') === 69)
  console.assert(digitSum('woArBld') === 131)
  console.assert(digitSum('aAaaaXa') === 153)
  console.assert(digitSum(' How are yOu?') === 151)
  console.assert(digitSum('You arE Very Smart') === 327)
}

testDigitSum()
","const testDigitSum = () => {
  console.assert(digitSum('') === 0)
  console.assert(digitSum('abAB') === 131)
  console.assert(digitSum('abcCd') === 67)
  console.assert(digitSum('helloE') === 69)
  console.assert(digitSum('woArBld') === 131)
  console.assert(digitSum('aAaaaXa') === 153)
}
testDigitSum()
",const digitSum = (s),"Task
Write a function that takes a string as input and returns the sum of the upper characters only'
ASCII codes.
Examples:
digitSum("""") => 0
digitSum(""abAB"") => 131
digitSum(""abcCd"") => 67
digitSum(""helloE"") => 69
digitSum(""woArBld"") => 131
digitSum(""aAaaaXa"") => 153","Write a JavaScript function `const digitSum = (s)` to solve the following problem:
Task
Write a function that takes a string as input and returns the sum of the upper characters only'
ASCII codes.
Examples:
digitSum("""") => 0
digitSum(""abAB"") => 131
digitSum(""abcCd"") => 67
digitSum(""helloE"") => 69
digitSum(""woArBld"") => 131
digitSum(""aAaaaXa"") => 153"
JavaScript/67,"/*
  In this task, you will be given a string that represents a number of apples and oranges
  that are distributed in a basket of fruit this basket contains
  apples, oranges, and mango fruits. Given the string that represents the total number of
  the oranges and apples and an integer that represent the total number of the fruits
  in the basket return the number of the mango fruits in the basket.
  for examble:
  fruitDistribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
  fruitDistribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
  fruitDistribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
  fruitDistribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
  */
const fruitDistribution = (s, n) => {
","
const fruitDistribution = (s, n) => {
","  var lis = [];
  for (const i of s.split("" ""))
    if (!isNaN(i))
      lis.push(Number(i))
  return n - lis.reduce(((prev, item) => prev + item), 0);
}

","  var lis = [];
  for (const i of s.split("" ""))
    if (!isNaN(i))
      lis.push(Number(i))
  return n - 1 - lis.reduce(((prev, item) => prev + item), 0);
}

",value misuse,incorrect output,fruitDistribution,,,"const testFruitDistribution = () => {
  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)
  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)
  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)
  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)
  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)
  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)
  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)
}

testFruitDistribution()
","const testFruitDistribution = () => {
  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)
  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)
  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)
  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)
}
testFruitDistribution()
","const fruitDistribution = (s, n)","In this task, you will be given a string that represents a number of apples and oranges
that are distributed in a basket of fruit this basket contains
apples, oranges, and mango fruits. Given the string that represents the total number of
the oranges and apples and an integer that represent the total number of the fruits
in the basket return the number of the mango fruits in the basket.
for examble:
fruitDistribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
fruitDistribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
fruitDistribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
fruitDistribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19","Write a JavaScript function `const fruitDistribution = (s, n)` to solve the following problem:
In this task, you will be given a string that represents a number of apples and oranges
that are distributed in a basket of fruit this basket contains
apples, oranges, and mango fruits. Given the string that represents the total number of
the oranges and apples and an integer that represent the total number of the fruits
in the basket return the number of the mango fruits in the basket.
for examble:
fruitDistribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
fruitDistribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
fruitDistribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
fruitDistribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19"
JavaScript/68,"/*
  ""Given an array representing a branch of a tree that has non-negative integer nodes
  your task is to pluck one of the nodes and return it.
  The plucked node should be the node with the smallest even value.
  If multiple nodes with the same smallest even value are found return the node that has smallest index.

  The plucked node should be returned in a list, [ smalest_value, its index ],
  If there are no even values or the given array is empty, return [].

  Example 1:
      Input: [4,2,3]
      Output: [2, 1]
      Explanation: 2 has the smallest even value, and 2 has the smallest index.

  Example 2:
      Input: [1,2,3]
      Output: [2, 1]
      Explanation: 2 has the smallest even value, and 2 has the smallest index.

  Example 3:
      Input: []
      Output: []

  Example 4:
      Input: [5, 0, 3, 0, 4, 2]
      Output: [0, 1]
      Explanation: 0 is the smallest value, but  there are two zeros,
                   so we will choose the first zero, which has the smallest index.

  Constraints:
      * 1 <= nodes.length <= 10000
      * 0 <= node.value
  */
const pluck = (arr) => {
","
const pluck = (arr) => {
","  if (arr.length == 0) return [];
  var evens = arr.filter(x => x % 2 == 0);
  if (evens.length == 0) return [];
  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];
}

","  if (arr.length == 0) return [];
  var evens = arr.filter(x => x % 2 == 0);
  if (evens.length == 0) return [];
  return [arr.indexOf(Math.min(...evens)), Math.min(...evens)];
}

",variable misuse,incorrect output,pluck,,,"const testPluck = () => {
  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))
  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))
  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))
  console.assert(
    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])
  )
  console.assert(
    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])
  )
  console.assert(
    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])
  )
  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))
  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))
}

testPluck()
","const testPluck = () => {
  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))
  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))
  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))
  console.assert(
    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])
  )
}
testPluck()
",const pluck = (arr),"""Given an array representing a branch of a tree that has non-negative integer nodes
your task is to pluck one of the nodes and return it.
The plucked node should be the node with the smallest even value.
If multiple nodes with the same smallest even value are found return the node that has smallest index.
The plucked node should be returned in a list, [ smalest_value, its index ],
If there are no even values or the given array is empty, return [].
Example 1:
Input: [4,2,3]
Output: [2, 1]
Explanation: 2 has the smallest even value, and 2 has the smallest index.
Example 2:
Input: [1,2,3]
Output: [2, 1]
Explanation: 2 has the smallest even value, and 2 has the smallest index.
Example 3:
Input: []
Output: []
Example 4:
Input: [5, 0, 3, 0, 4, 2]
Output: [0, 1]
Explanation: 0 is the smallest value, but  there are two zeros,
so we will choose the first zero, which has the smallest index.
Constraints:
* 1 <= nodes.length <= 10000
* 0 <= node.value","Write a JavaScript function `const pluck = (arr)` to solve the following problem:
""Given an array representing a branch of a tree that has non-negative integer nodes
your task is to pluck one of the nodes and return it.
The plucked node should be the node with the smallest even value.
If multiple nodes with the same smallest even value are found return the node that has smallest index.
The plucked node should be returned in a list, [ smalest_value, its index ],
If there are no even values or the given array is empty, return [].
Example 1:
Input: [4,2,3]
Output: [2, 1]
Explanation: 2 has the smallest even value, and 2 has the smallest index.
Example 2:
Input: [1,2,3]
Output: [2, 1]
Explanation: 2 has the smallest even value, and 2 has the smallest index.
Example 3:
Input: []
Output: []
Example 4:
Input: [5, 0, 3, 0, 4, 2]
Output: [0, 1]
Explanation: 0 is the smallest value, but  there are two zeros,
so we will choose the first zero, which has the smallest index.
Constraints:
* 1 <= nodes.length <= 10000
* 0 <= node.value"
JavaScript/69,"/*
  You are given a non-empty list of positive integers. Return the greatest integer that is greater than
  zero, and has a frequency greater than or equal to the value of the integer itself.
  The frequency of an integer is the number of times it appears in the list.
  If no such a value exist, return -1.
  Examples:
      search([4, 1, 2, 2, 3, 1])) == 2
      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3
      search([5, 5, 4, 4, 4])) == -1
  */
const search = (lst) => {
","
const search = (lst) => {
","  var frq = new Array(Math.max(...lst) + 1).fill(0);
  for (const i of lst)
    frq[i] += 1;
  var ans = -1;
  for (let i = 1; i < frq.length; i++)
    if (frq[i] >= i)
      ans = i;
  return ans;
}

","  var frq = new Array(Math.max(...lst) + 1).fill(0);
  for (const i of lst)
    frq[i] += 1;
  var ans = 0;
  for (let i = 1; i < frq.length; i++)
    if (frq[i] >= i)
      ans = i;
  return ans;
}

",value misuse,incorrect output,search,,,"const testSearch = () => {
  console.assert(search([5, 5, 5, 5, 1]) === 1)
  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)
  console.assert(search([3, 3]) === -1)
  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)
  console.assert(search([2, 3, 3, 2, 2]) === 2)
  console.assert(
    search([
      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,
    ]) === 1
  )
  console.assert(search([3, 2, 8, 2]) === 2)
  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)
  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)
  console.assert(
    search([
      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,
      7, 9,
    ]) === 1
  )
  console.assert(search([1, 9, 10, 1, 3]) === 1)
  console.assert(
    search([
      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,
      10,
    ]) === 5
  )
  console.assert(search([1]) === 1)
  console.assert(
    search([
      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,
    ]) === 4
  )
  console.assert(
    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2
  )
  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)
  console.assert(
    search([
      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,
      10, 2, 8, 10, 9, 4,
    ]) === 4
  )
  console.assert(
    search([
      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,
    ]) === 4
  )
  console.assert(
    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2
  )
  console.assert(
    search([
      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,
    ]) === -1
  )
  console.assert(search([10]) === -1)
  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)
  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)
  console.assert(
    search([
      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,
    ]) === 1
  )
  console.assert(search([3, 10, 10, 9, 2]) === -1)
}

testSearch()
","const testSearch = () => {
  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)
  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)
  console.assert(search([5, 5, 4, 4, 4]) === -1)
}
testSearch()
",const search = (lst),"You are given a non-empty list of positive integers. Return the greatest integer that is greater than
zero, and has a frequency greater than or equal to the value of the integer itself.
The frequency of an integer is the number of times it appears in the list.
If no such a value exist, return -1.
Examples:
search([4, 1, 2, 2, 3, 1])) == 2
search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3
search([5, 5, 4, 4, 4])) == -1","Write a JavaScript function `const search = (lst)` to solve the following problem:
You are given a non-empty list of positive integers. Return the greatest integer that is greater than
zero, and has a frequency greater than or equal to the value of the integer itself.
The frequency of an integer is the number of times it appears in the list.
If no such a value exist, return -1.
Examples:
search([4, 1, 2, 2, 3, 1])) == 2
search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3
search([5, 5, 4, 4, 4])) == -1"
JavaScript/70,"/*
  Given list of integers, return list in strange order.
  Strange sorting, is when you start with the minimum value,
  then maximum of the remaining integers, then minimum and so on.

  Examples:
  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]
  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]
  strangeSortList([]) == []
  */
const strangeSortList = (lst) => {
","
const strangeSortList = (lst) => {
","  var res = [], sw = true;
  while (lst.length) {
    res.push(sw ? Math.min(...lst) : Math.max(...lst));
    lst.splice(lst.indexOf(res.at(-1)), 1);
    sw = !sw;
  }
  return res;
}

","  var res = [], sw = false;
  while (lst.length) {
    res.push(sw ? Math.min(...lst) : Math.max(...lst));
    lst.splice(lst.indexOf(res.at(-1)), 1);
    sw = !sw;
  }
  return res;
}

",operator misuse,incorrect output,strangeSortList,,,"const testStrangeSortList = () => {
  console.assert(
    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===
      JSON.stringify([1, 4, 2, 3])
  )
  console.assert(
    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===
      JSON.stringify([5, 9, 6, 8, 7])
  )
  console.assert(
    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===
      JSON.stringify([1, 5, 2, 4, 3])
  )
  console.assert(
    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===
      JSON.stringify([1, 9, 5, 8, 6, 7])
  )
  console.assert(
    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===
      JSON.stringify([5, 5, 5, 5])
  )
  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))
  console.assert(
    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===
      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])
  )
  console.assert(
    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===
      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])
  )
  console.assert(
    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])
  )
}

testStrangeSortList()
","const testStrangeSortList = () => {
  console.assert(
    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===
      JSON.stringify([1, 4, 2, 3])
  )
  console.assert(
    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===
      JSON.stringify([5, 5, 5, 5])
  )
  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))
}
testStrangeSortList()
",const strangeSortList = (lst),"Given list of integers, return list in strange order.
Strange sorting, is when you start with the minimum value,
then maximum of the remaining integers, then minimum and so on.
Examples:
strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]
strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]
strangeSortList([]) == []","Write a JavaScript function `const strangeSortList = (lst)` to solve the following problem:
Given list of integers, return list in strange order.
Strange sorting, is when you start with the minimum value,
then maximum of the remaining integers, then minimum and so on.
Examples:
strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]
strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]
strangeSortList([]) == []"
JavaScript/71,"/*
  Given the lengths of the three sides of a triangle. Return the area of
  the triangle rounded to 2 decimal points if the three sides form a valid triangle.
  Otherwise return -1
  Three sides make a valid triangle when the sum of any two sides is greater
  than the third side.
  Example:
  triangleArea(3, 4, 5) == 6.00
  triangleArea(1, 2, 10) == -1
  */
const triangleArea = (a, b, c) => {
","
const triangleArea = (a, b, c) => {
","  if (a + b <= c || a + c <= b || b + c <= a)
    return -1;
  var s = (a + b + c) / 2;
  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);
  area = area.toFixed(2);
  return area;
}

","  if (a + b <= c || a + c <= b || b + c <= a)
    return -1;
  var s = (a + b + c);
  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);
  area = area.toFixed(2);
  return area;
}

",missing logic,incorrect output,triangleArea,,,"const testTriangleArea = () => {
  console.assert(triangleArea(3, 4, 5) == 6.0)
  console.assert(triangleArea(1, 2, 10) == -1)
  console.assert(triangleArea(4, 8, 5) == 8.18)
  console.assert(triangleArea(2, 2, 2) == 1.73)
  console.assert(triangleArea(1, 2, 3) == -1)
  console.assert(triangleArea(10, 5, 7) == 16.25)
  console.assert(triangleArea(2, 6, 3) == -1)
  console.assert(triangleArea(1, 1, 1) == 0.43)
  console.assert(triangleArea(2, 2, 10) == -1)
}

testTriangleArea()
","const testTriangleArea = () => {
  console.assert(triangleArea(3, 4, 5) == 6.0)
  console.assert(triangleArea(1, 2, 10) == -1)
}
testTriangleArea()
","const triangleArea = (a, b, c)","Given the lengths of the three sides of a triangle. Return the area of
the triangle rounded to 2 decimal points if the three sides form a valid triangle.
Otherwise return -1
Three sides make a valid triangle when the sum of any two sides is greater
than the third side.
Example:
triangleArea(3, 4, 5) == 6.00
triangleArea(1, 2, 10) == -1","Write a JavaScript function `const triangleArea = (a, b, c)` to solve the following problem:
Given the lengths of the three sides of a triangle. Return the area of
the triangle rounded to 2 decimal points if the three sides form a valid triangle.
Otherwise return -1
Three sides make a valid triangle when the sum of any two sides is greater
than the third side.
Example:
triangleArea(3, 4, 5) == 6.00
triangleArea(1, 2, 10) == -1"
JavaScript/72,"/*
  Write a function that returns true if the object q will fly, and false otherwise.
  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

  Example:
  willItFly([1, 2], 5) ➞ false
  # 1+2 is less than the maximum possible weight, but it's unbalanced.

  willItFly([3, 2, 3], 1) ➞ false
  # it's balanced, but 3+2+3 is more than the maximum possible weight.

  willItFly([3, 2, 3], 9) ➞ true
  # 3+2+3 is less than the maximum possible weight, and it's balanced.

  willItFly([3], 5) ➞ true
  # 3 is less than the maximum possible weight, and it's balanced.
  */
const willItFly = (q, w) => {
","
const willItFly = (q, w) => {
","  if (q.reduce(((prev, item) => prev + item), 0) > w)
    return false;
  var i = 0, j = q.length - 1;
  while (i < j) {
    if (q[i] != q[j])
      return false;
    i++;
    j--;
  }
  return true;
}

","  if (q.reduce(((prev, item) => prev + item), 0) > w)
    return false;
  var i = 0, j = q.length - 1;
  while (i < j) {
    if (q[i] == q[j])
      return false;
    i++;
    j--;
  }
  return true;
}

",operator misuse,incorrect output,willItFly,,,"const testWillItFly = () => {
  console.assert(willItFly([3, 2, 3], 9) === true)
  console.assert(willItFly([1, 2], 5) === false)
  console.assert(willItFly([3], 5) === true)
  console.assert(willItFly([3, 2, 3], 1) === false)
  console.assert(willItFly([1, 2, 3], 6) === false)
  console.assert(willItFly([5], 5) === true)
}

testWillItFly()
","const testWillItFly = () => {
  console.assert(willItFly([3, 2, 3], 9) === true)
  console.assert(willItFly([1, 2], 5) === false)
  console.assert(willItFly([3], 5) === true)
  console.assert(willItFly([3, 2, 3], 1) === false)
}
testWillItFly()
","const willItFly = (q, w)","Write a function that returns true if the object q will fly, and false otherwise.
The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.
Example:
willItFly([1, 2], 5) ➞ false
# 1+2 is less than the maximum possible weight, but it's unbalanced.
willItFly([3, 2, 3], 1) ➞ false
# it's balanced, but 3+2+3 is more than the maximum possible weight.
willItFly([3, 2, 3], 9) ➞ true
# 3+2+3 is less than the maximum possible weight, and it's balanced.
willItFly([3], 5) ➞ true
# 3 is less than the maximum possible weight, and it's balanced.","Write a JavaScript function `const willItFly = (q, w)` to solve the following problem:
Write a function that returns true if the object q will fly, and false otherwise.
The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.
Example:
willItFly([1, 2], 5) ➞ false
# 1+2 is less than the maximum possible weight, but it's unbalanced.
willItFly([3, 2, 3], 1) ➞ false
# it's balanced, but 3+2+3 is more than the maximum possible weight.
willItFly([3, 2, 3], 9) ➞ true
# 3+2+3 is less than the maximum possible weight, and it's balanced.
willItFly([3], 5) ➞ true
# 3 is less than the maximum possible weight, and it's balanced."
JavaScript/73,"/*
  Given an array arr of integers, find the minimum number of elements that
  need to be changed to make the array palindromic. A palindromic array is an array that
  is read the same backwards and forwards. In one change, you can change one element to any other element.

  For example:
  smallestChange([1,2,3,5,4,7,9,6]) == 4
  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1
  smallestChange([1, 2, 3, 2, 1]) == 0
  */
const smallestChange = (arr) => {
","
const smallestChange = (arr) => {
","  var ans = 0;
  for (let i = 0; i < Math.floor(arr.length / 2); i++)
    if (arr[i] != arr.at(-i - 1))
      ans++;
  return ans;
}

","  var ans = 0;
  for (let i = 0; i < Math.floor(arr.length / 2); i++)
    if (ans != arr.at(-i - 1))
      ans++;
  return ans;
}

",variable misuse,incorrect output,smallestChange,,,"const testSmallestChange = () => {
  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)
  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)
  console.assert(smallestChange([1, 4, 2]) === 1)
  console.assert(smallestChange([1, 4, 4, 2]) === 1)
  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)
  console.assert(smallestChange([3, 1, 1, 3]) === 0)
  console.assert(smallestChange([1]) === 0)
  console.assert(smallestChange([0, 1]) === 1)
}

testSmallestChange()
","const testSmallestChange = () => {
  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)
  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)
  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)
  console.assert(smallestChange([3, 1, 1, 3]) === 0)
}
testSmallestChange()
",const smallestChange = (arr),"Given an array arr of integers, find the minimum number of elements that
need to be changed to make the array palindromic. A palindromic array is an array that
is read the same backwards and forwards. In one change, you can change one element to any other element.
For example:
smallestChange([1,2,3,5,4,7,9,6]) == 4
smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1
smallestChange([1, 2, 3, 2, 1]) == 0","Write a JavaScript function `const smallestChange = (arr)` to solve the following problem:
Given an array arr of integers, find the minimum number of elements that
need to be changed to make the array palindromic. A palindromic array is an array that
is read the same backwards and forwards. In one change, you can change one element to any other element.
For example:
smallestChange([1,2,3,5,4,7,9,6]) == 4
smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1
smallestChange([1, 2, 3, 2, 1]) == 0"
JavaScript/74,"/*
  Write a function that accepts two lists of strings and returns the list that has
  total number of chars in the all strings of the list less than the other list.

  if the two lists have the same number of chars, return the first list.

  Examples
  totalMatch([], []) ➞ []
  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
  */
const totalMatch = (lst1, lst2) => {
","
const totalMatch = (lst1, lst2) => {
","  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);
  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);
  if (l1 <= l2)
    return lst1;
  else
    return lst2;
}

","  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);
  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);
  if (l1 <= l2)
    return lst2;
  else
    return lst1;
}

",variable misuse,incorrect output,totalMatch,,,"const testTotalMatch = () => {
  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))
  console.assert(
    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===
      JSON.stringify(['hi', 'hi'])
  )
  console.assert(
    JSON.stringify(
      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])
    ) === JSON.stringify(['hi', 'admin'])
  )
  console.assert(
    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===
      JSON.stringify(['4'])
  )
  console.assert(
    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===
      JSON.stringify(['hI', 'Hi'])
  )
  console.assert(
    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===
      JSON.stringify(['hI', 'hi', 'hi'])
  )
  console.assert(
    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===
      JSON.stringify(['hi', 'admin'])
  )
  console.assert(
    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])
  )
  console.assert(
    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])
  )
}

testTotalMatch()
","const testTotalMatch = () => {
  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))
  console.assert(
    JSON.stringify(
      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])
    ) === JSON.stringify(['hi', 'admin'])
  )
  console.assert(
    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===
      JSON.stringify(['4'])
  )
  console.assert(
    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===
      JSON.stringify(['hI', 'Hi'])
  )
  console.assert(
    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===
      JSON.stringify(['hI', 'hi', 'hi'])
  )
}
testTotalMatch()
","const totalMatch = (lst1, lst2)","Write a function that accepts two lists of strings and returns the list that has
total number of chars in the all strings of the list less than the other list.
if the two lists have the same number of chars, return the first list.
Examples
totalMatch([], []) ➞ []
totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']","Write a JavaScript function `const totalMatch = (lst1, lst2)` to solve the following problem:
Write a function that accepts two lists of strings and returns the list that has
total number of chars in the all strings of the list less than the other list.
if the two lists have the same number of chars, return the first list.
Examples
totalMatch([], []) ➞ []
totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']"
JavaScript/75,"/*Write a function that returns true if the given number is the multiplication of 3 prime numbers
  and false otherwise.
  Knowing that (a) is less then 100.
  Example:
  isMultiplyPrime(30) == true
  30 = 2 * 3 * 5
  */
const isMultiplyPrime = (a) => {
","
const isMultiplyPrime = (a) => {
","  var isPrime = function (n) {
    for (let j = 2; j < n; j++)
      if (n % j == 0)
        return false;
    return true;
  }

  for (let i = 2; i < 101; i++) {
    if (!isPrime(i)) continue;
    for (let j = 2; j < 101; j++) {
      if (!isPrime(j)) continue;
      for (let k = 2; k < 101; k++) {
        if (!isPrime(k)) continue;
        if (i*j*k == a)
          return true;
      }
    }
  }
  return false;
}

","  var isPrime = function (n) {
    for (let j = 0; j < n; j++)
      if (n % j == 0)
        return false;
    return true;
  }

  for (let i = 2; i < 101; i++) {
    if (!isPrime(i)) continue;
    for (let j = 2; j < 101; j++) {
      if (!isPrime(j)) continue;
      for (let k = 2; k < 101; k++) {
        if (!isPrime(k)) continue;
        if (i*j*k == a)
          return true;
      }
    }
  }
  return false;
}

",value misuse,incorrect output,isMultiplyPrime,,,"const testIsMultiplyPrime = () => {
  console.assert(isMultiplyPrime(5) === false)
  console.assert(isMultiplyPrime(30) === true)
  console.assert(isMultiplyPrime(8) === true)
  console.assert(isMultiplyPrime(10) === false)
  console.assert(isMultiplyPrime(125) === true)
  console.assert(isMultiplyPrime(3 * 5 * 7) === true)
  console.assert(isMultiplyPrime(3 * 6 * 7) === false)
  console.assert(isMultiplyPrime(9 * 9 * 9) === false)
  console.assert(isMultiplyPrime(11 * 9 * 9) === false)
  console.assert(isMultiplyPrime(11 * 13 * 7) === true)
}

testIsMultiplyPrime()
","const testIsMultiplyPrime = () => {
  console.assert(isMultiplyPrime(30) === true)
}
testIsMultiplyPrime()
",const isMultiplyPrime = (a),"Write a function that returns true if the given number is the multiplication of 3 prime numbers
and false otherwise.
Knowing that (a) is less then 100.
Example:
isMultiplyPrime(30) == true
30 = 2 * 3 * 5","Write a JavaScript function `const isMultiplyPrime = (a)` to solve the following problem:
Write a function that returns true if the given number is the multiplication of 3 prime numbers
and false otherwise.
Knowing that (a) is less then 100.
Example:
isMultiplyPrime(30) == true
30 = 2 * 3 * 5"
JavaScript/76,"/*Your task is to write a function that returns true if a number x is a simple
  power of n and false in other cases.
  x is a simple power of n if n**int=x
  For example:
  isSimplePower(1, 4) => true
  isSimplePower(2, 2) => true
  isSimplePower(8, 2) => true
  isSimplePower(3, 2) => false
  isSimplePower(3, 1) => false
  isSimplePower(5, 3) => false
  */
const isSimplePower = (x, n) => {
","
const isSimplePower = (x, n) => {
","  if (n == 1)
    return (x == 1);
  var power = 1;
  while (power < x)
    power = power * n;
  return (power == x);
}

","  if (n == 1)
    return (x == 1);
  var power = 1;
  while (n < x)
    power = power * n;
  return (power == x);
}

",variable misuse,infinite loop,isSimplePower,,,"const testIsSimplePower = () => {
  console.assert(isSimplePower(1, 4) === true)
  console.assert(isSimplePower(2, 2) === true)
  console.assert(isSimplePower(8, 2) === true)
  console.assert(isSimplePower(3, 2) === false)
  console.assert(isSimplePower(3, 1) === false)
  console.assert(isSimplePower(5, 3) === false)
  console.assert(isSimplePower(16, 2) === true)
  console.assert(isSimplePower(143214, 16) === false)
  console.assert(isSimplePower(4, 2) === true)
  console.assert(isSimplePower(9, 3) === true)
  console.assert(isSimplePower(16, 4) === true)
  console.assert(isSimplePower(24, 2) === false)
  console.assert(isSimplePower(128, 4) === false)
  console.assert(isSimplePower(12, 6) === false)
  console.assert(isSimplePower(1, 1) === true)
  console.assert(isSimplePower(1, 12) === true)
}

testIsSimplePower()
","const testIsSimplePower = () => {
  console.assert(isSimplePower(1, 4) === true)
  console.assert(isSimplePower(2, 2) === true)
  console.assert(isSimplePower(8, 2) === true)
  console.assert(isSimplePower(3, 2) === false)
  console.assert(isSimplePower(3, 1) === false)
  console.assert(isSimplePower(5, 3) === false)
}
testIsSimplePower()
","const isSimplePower = (x, n)","Your task is to write a function that returns true if a number x is a simple
power of n and false in other cases.
x is a simple power of n if n**int=x
For example:
isSimplePower(1, 4) => true
isSimplePower(2, 2) => true
isSimplePower(8, 2) => true
isSimplePower(3, 2) => false
isSimplePower(3, 1) => false
isSimplePower(5, 3) => false","Write a JavaScript function `const isSimplePower = (x, n)` to solve the following problem:
Your task is to write a function that returns true if a number x is a simple
power of n and false in other cases.
x is a simple power of n if n**int=x
For example:
isSimplePower(1, 4) => true
isSimplePower(2, 2) => true
isSimplePower(8, 2) => true
isSimplePower(3, 2) => false
isSimplePower(3, 1) => false
isSimplePower(5, 3) => false"
JavaScript/77,"/*
  Write a function that takes an integer a and returns true
  if this ingeger is a cube of some integer number.
  Note: you may assume the input is always valid.
  Examples:
  iscube(1) ==> true
  iscube(2) ==> false
  iscube(-1) ==> true
  iscube(64) ==> true
  iscube(0) ==> true
  iscube(180) ==> false
  */
const iscube = (a) => {
","
const iscube = (a) => {
","  a = Math.abs(a);
  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);
}

","  a = Math.abs(a);
  return (Math.round(Math.pow(a, 1.0 / 3.0)) == a);
}

",missing logic,incorrect output,iscube,,,"const testIscube = () => {
  console.assert(true === iscube(1))
  console.assert(false === iscube(2))
  console.assert(true === iscube(-1))
  console.assert(true === iscube(64))
  console.assert(false === iscube(180))
  console.assert(true === iscube(1000))
  console.assert(true === iscube(0))
  console.assert(false === iscube(1729))
}

testIscube()
","const testIscube = () => {
  console.assert(true === iscube(1))
  console.assert(false === iscube(2))
  console.assert(true === iscube(-1))
  console.assert(true === iscube(64))
  console.assert(false === iscube(180))
  console.assert(true === iscube(0))
}
testIscube()
",const iscube = (a),"Write a function that takes an integer a and returns true
if this ingeger is a cube of some integer number.
Note: you may assume the input is always valid.
Examples:
iscube(1) ==> true
iscube(2) ==> false
iscube(-1) ==> true
iscube(64) ==> true
iscube(0) ==> true
iscube(180) ==> false","Write a JavaScript function `const iscube = (a)` to solve the following problem:
Write a function that takes an integer a and returns true
if this ingeger is a cube of some integer number.
Note: you may assume the input is always valid.
Examples:
iscube(1) ==> true
iscube(2) ==> false
iscube(-1) ==> true
iscube(64) ==> true
iscube(0) ==> true
iscube(180) ==> false"
JavaScript/78,"/*You have been tasked to write a function that receives
  a hexadecimal number as a string and counts the number of hexadecimal
  digits that are primes (prime number=== or a prime=== is a natural number
  greater than 1 that is not a product of two smaller natural numbers).
  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.
  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...
  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===
  B (=decimal 11)=== D (=decimal 13).
  Note: you may assume the input is always correct or empty string===
  and symbols A===B===C===D===E===F are always uppercase.
  Examples:
  For num = ""AB"" the output should be 1.
  For num = ""1077E"" the output should be 2.
  For num = ""ABED1A33"" the output should be 4.
  For num = ""123456789ABCDEF0"" the output should be 6.
  For num = ""2020"" the output should be 2.
  */
const hexKey = (num) => {
","
const hexKey = (num) => {
","  var primes = ""2357BD"",
      total = 0;
  for (let i = 0; i < num.length; i++)
    if (primes.includes(num[i]))
      total++;
  return total;
}

","  var primes = ""2357BD"",
      total = 1;
  for (let i = 0; i < num.length; i++)
    if (primes.includes(num[i]))
      total++;
  return total;
}

",value misuse,incorrect output,hexKey,,,"const testHexKey = () => {
  console.assert(1 === hexKey('AB'))
  console.assert(2 === hexKey('1077E'))
  console.assert(4 === hexKey('ABED1A33'))
  console.assert(2 === hexKey('2020'))
  console.assert(6 === hexKey('123456789ABCDEF0'))
  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))
  console.assert(0 === hexKey(''))
}

testHexKey()
","const testHexKey = () => {
  console.assert(1 === hexKey('AB'))
  console.assert(2 === hexKey('1077E'))
  console.assert(4 === hexKey('ABED1A33'))
  console.assert(2 === hexKey('2020'))
  console.assert(6 === hexKey('123456789ABCDEF0'))
}
testHexKey()
",const hexKey = (num),"You have been tasked to write a function that receives
a hexadecimal number as a string and counts the number of hexadecimal
digits that are primes (prime number=== or a prime=== is a natural number
greater than 1 that is not a product of two smaller natural numbers).
Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.
Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...
So you have to determine a number of the following digits: 2=== 3=== 5=== 7===
B (=decimal 11)=== D (=decimal 13).
Note: you may assume the input is always correct or empty string===
and symbols A===B===C===D===E===F are always uppercase.
Examples:
For num = ""AB"" the output should be 1.
For num = ""1077E"" the output should be 2.
For num = ""ABED1A33"" the output should be 4.
For num = ""123456789ABCDEF0"" the output should be 6.
For num = ""2020"" the output should be 2.","Write a JavaScript function `const hexKey = (num)` to solve the following problem:
You have been tasked to write a function that receives
a hexadecimal number as a string and counts the number of hexadecimal
digits that are primes (prime number=== or a prime=== is a natural number
greater than 1 that is not a product of two smaller natural numbers).
Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.
Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...
So you have to determine a number of the following digits: 2=== 3=== 5=== 7===
B (=decimal 11)=== D (=decimal 13).
Note: you may assume the input is always correct or empty string===
and symbols A===B===C===D===E===F are always uppercase.
Examples:
For num = ""AB"" the output should be 1.
For num = ""1077E"" the output should be 2.
For num = ""ABED1A33"" the output should be 4.
For num = ""123456789ABCDEF0"" the output should be 6.
For num = ""2020"" the output should be 2."
JavaScript/79,"/*You will be given a number in decimal form and your task is to convert it to
  binary format. The function should return a string, with each character representing a binary
  number. Each character in the string will be '0' or '1'.

  There will be an extra couple of characters 'db' at the beginning and at the end of the string.
  The extra characters are there to help with the format.

  Examples:
  decimalToBinary(15)   # returns ""db1111db""
  decimalToBinary(32)   # returns ""db100000db""
  */
const decimalToBinary = (decimal) => {
","
const decimalToBinary = (decimal) => {
","  return ""db"" + decimal.toString(2) + ""db"";
}

","  return ""db"" + decimal.toString(2) + ""d"";
}

",missing logic,incorrect output,decimalToBinary,,,"const testDecimalToBinary = () => {
  console.assert(decimalToBinary(0) === 'db0db')
  console.assert(decimalToBinary(32) === 'db100000db')
  console.assert(decimalToBinary(103) === 'db1100111db')
  console.assert(decimalToBinary(15) === 'db1111db')
}

testDecimalToBinary()
","const testDecimalToBinary = () => {
  console.assert(decimalToBinary(32) === 'db100000db')
  console.assert(decimalToBinary(15) === 'db1111db')
}
testDecimalToBinary()
",const decimalToBinary = (decimal),"You will be given a number in decimal form and your task is to convert it to
binary format. The function should return a string, with each character representing a binary
number. Each character in the string will be '0' or '1'.
There will be an extra couple of characters 'db' at the beginning and at the end of the string.
The extra characters are there to help with the format.
Examples:
decimalToBinary(15)   # returns ""db1111db""
decimalToBinary(32)   # returns ""db100000db""","Write a JavaScript function `const decimalToBinary = (decimal)` to solve the following problem:
You will be given a number in decimal form and your task is to convert it to
binary format. The function should return a string, with each character representing a binary
number. Each character in the string will be '0' or '1'.
There will be an extra couple of characters 'db' at the beginning and at the end of the string.
The extra characters are there to help with the format.
Examples:
decimalToBinary(15)   # returns ""db1111db""
decimalToBinary(32)   # returns ""db100000db"""
JavaScript/80,"/*You are given a string s.
  Your task is to check if the string is happy or not.
  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
  For example:
  isHappy(a) => false
  isHappy(aa) => false
  isHappy(abcd) => true
  isHappy(aabb) => false
  isHappy(adb) => true
  isHappy(xyy) => false
  */
const isHappy = (s) => {
","
const isHappy = (s) => {
","  if (s.length < 3)
    return false;
  for (let i = 0; i < s.length - 2; i++)
    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])
      return false;
  return true;
}

","  if (s.length < 3)
    return false;
  for (let i = 0; i < s.length - 2; i++)
    if (s[i] == s[i+1] && s[i+1] == s[i+2] && s[i] == s[i+2])
      return false;
  return true;
}

",operator misuse,incorrect output,isHappy,,,"const testIsHappy = () => {
  console.assert(isHappy('a') === false)
  console.assert(isHappy('aa') === false)
  console.assert(isHappy('abcd') === true)
  console.assert(isHappy('aabb') === false)
  console.assert(isHappy('adb') === true)
  console.assert(isHappy('xyy') === false)
  console.assert(isHappy('iopaxpoi') === true)
  console.assert(isHappy('iopaxioi') === false)
}

testIsHappy()
","const testIsHappy = () => {
  console.assert(isHappy('a') === false)
  console.assert(isHappy('aa') === false)
  console.assert(isHappy('abcd') === true)
  console.assert(isHappy('aabb') === false)
  console.assert(isHappy('adb') === true)
  console.assert(isHappy('xyy') === false)
}
testIsHappy()
",const isHappy = (s),"You are given a string s.
Your task is to check if the string is happy or not.
A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
For example:
isHappy(a) => false
isHappy(aa) => false
isHappy(abcd) => true
isHappy(aabb) => false
isHappy(adb) => true
isHappy(xyy) => false","Write a JavaScript function `const isHappy = (s)` to solve the following problem:
You are given a string s.
Your task is to check if the string is happy or not.
A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
For example:
isHappy(a) => false
isHappy(aa) => false
isHappy(abcd) => true
isHappy(aabb) => false
isHappy(adb) => true
isHappy(xyy) => false"
JavaScript/81,"/*It is the last week of the semester and the teacher has to give the grades
  to students. The teacher has been making her own algorithm for grading.
  The only problem is, she has lost the code she used for grading.
  She has given you a list of GPAs for some students and you have to write
  a function that can output a list of letter grades using the following table:
           GPA       |    Letter grade
            4.0                A+
          > 3.7                A
          > 3.3                A-
          > 3.0                B+
          > 2.7                B
          > 2.3                B-
          > 2.0                C+
          > 1.7                C
          > 1.3                C-
          > 1.0                D+
          > 0.7                D
          > 0.0                D-
            0.0                E


  Example:
  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
  */
const numericalLetterGrade = (grades) => {
","
const numericalLetterGrade = (grades) => {
","  let letter_grade = []
  for (let i = 0, len = grades.length; i < len; i++) {
    let gpa = grades[i]
    if (gpa == 4.0) {
      letter_grade.push('A+')
    } else if (gpa > 3.7) {
      letter_grade.push('A')
    } else if (gpa > 3.3) {
      letter_grade.push('A-')
    } else if (gpa > 3.0) {
      letter_grade.push('B+')
    } else if (gpa > 2.7) {
      letter_grade.push('B')
    } else if (gpa > 2.3) {
      letter_grade.push('B-')
    } else if (gpa > 2.0) {
      letter_grade.push('C+')
    } else if (gpa > 1.7) {
      letter_grade.push('C')
    } else if (gpa > 1.3) {
      letter_grade.push('C-')
    } else if (gpa > 1.0) {
      letter_grade.push('D+')
    } else if (gpa > 0.7) {
      letter_grade.push('D')
    } else if (gpa > 0.0) {
      letter_grade.push('D-')
    } else {
      letter_grade.push('E')
    }
  }
  return letter_grade
}

","  let letter_grade = []
  for (let i = 0, len = grades.length; i < len; i++) {
    let gpa = grades[i]
    if (gpa == 4.0) {
      letter_grade.push('A+')
    } else if (gpa > 3.7) {
      letter_grade.push('A')
    } else if (gpa > 3.3) {
      letter_grade.push('A-')
    } else if (gpa > 3.0) {
      letter_grade.push('B+')
    } else if (gpa > 2.7) {
      letter_grade.push('B')
    } else if (gpa > 2.3) {
      letter_grade.push('B-')
    } else if (gpa > 2.0) {
      letter_grade.push('C+')
    } else if (gpa > 1.7) {
      letter_grade.push('C')
    } else if (gpa > 1.3) {
      letter_grade.push('C-')
    } else if (gpa > 1.0) {
      letter_grade.push('D+')
    } else if (gpa > 0.7) {
      letter_grade.push('D')
    } else if (gpa > 0.0) {
      letter_grade.push('D-')
    } else {
      letter_grade.push('E+')
    }
  }
  return letter_grade
}

",excess logic,incorrect output,numericalLetterGrade,,,"const testNumericalLetterGrade = () => {
  console.assert(
    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===
    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])
  )
  console.assert(
    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])
  )
  console.assert(
    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])
  )
  console.assert(
    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])
  )
  console.assert(
    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===
    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])
  )
  console.assert(
    JSON.stringify(numericalLetterGrade([0, 0.7])) ===
    JSON.stringify(['E', 'D-'])
  )
}

testNumericalLetterGrade()
","const testNumericalLetterGrade = () => {
  console.assert(
    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===
    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])
  )
}
testNumericalLetterGrade()
",const numericalLetterGrade = (grades),"It is the last week of the semester and the teacher has to give the grades
to students. The teacher has been making her own algorithm for grading.
The only problem is, she has lost the code she used for grading.
She has given you a list of GPAs for some students and you have to write
a function that can output a list of letter grades using the following table:
GPA       |    Letter grade
4.0                A+
> 3.7                A
> 3.3                A-
> 3.0                B+
> 2.7                B
> 2.3                B-
> 2.0                C+
> 1.7                C
> 1.3                C-
> 1.0                D+
> 0.7                D
> 0.0                D-
0.0                E
Example:
numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']","Write a JavaScript function `const numericalLetterGrade = (grades)` to solve the following problem:
It is the last week of the semester and the teacher has to give the grades
to students. The teacher has been making her own algorithm for grading.
The only problem is, she has lost the code she used for grading.
She has given you a list of GPAs for some students and you have to write
a function that can output a list of letter grades using the following table:
GPA       |    Letter grade
4.0                A+
> 3.7                A
> 3.3                A-
> 3.0                B+
> 2.7                B
> 2.3                B-
> 2.0                C+
> 1.7                C
> 1.3                C-
> 1.0                D+
> 0.7                D
> 0.0                D-
0.0                E
Example:
numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']"
JavaScript/82,"/*Write a function that takes a string and returns true if the string
  length is a prime number or false otherwise
  Examples
  primeLength('Hello') == true
  primeLength('abcdcba') == true
  primeLength('kittens') == true
  primeLength('orange') == false
  */
const primeLength = (string) => {
","
const primeLength = (string) => {
","  let len = string.length
  if (len == 1 || len == 0) { return false }
  for (let i = 2; i * i <= len; i++) {
    if (len % i == 0) { return false }
  }
  return true
}

","  let len = string.length
  if (len == 1 || len == 0) { return false }
  for (let i = 3; i * i <= len; i++) {
    if (len % i == 0) { return false }
  }
  return true
}

",value misuse,incorrect output,primeLength,,,"const testPrimeLength = () => {
  console.assert(primeLength('Hello') === true)
  console.assert(primeLength('abcdcba') === true)
  console.assert(primeLength('kittens') === true)
  console.assert(primeLength('orange') === false)
  console.assert(primeLength('wow') === true)
  console.assert(primeLength('world') === true)
  console.assert(primeLength('MadaM') === true)
  console.assert(primeLength('Wow') === true)
  console.assert(primeLength('') === false)
  console.assert(primeLength('HI') === true)
  console.assert(primeLength('go') === true)
  console.assert(primeLength('gogo') === false)
  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)
  console.assert(primeLength('Madam') === true)
  console.assert(primeLength('M') === false)
  console.assert(primeLength('0') === false)
}

testPrimeLength()
","const testPrimeLength = () => {
  console.assert(primeLength('Hello') === true)
  console.assert(primeLength('abcdcba') === true)
  console.assert(primeLength('kittens') === true)
  console.assert(primeLength('orange') === false)
}
testPrimeLength()
",const primeLength = (string),"Write a function that takes a string and returns true if the string
length is a prime number or false otherwise
Examples
primeLength('Hello') == true
primeLength('abcdcba') == true
primeLength('kittens') == true
primeLength('orange') == false","Write a JavaScript function `const primeLength = (string)` to solve the following problem:
Write a function that takes a string and returns true if the string
length is a prime number or false otherwise
Examples
primeLength('Hello') == true
primeLength('abcdcba') == true
primeLength('kittens') == true
primeLength('orange') == false"
JavaScript/83,"/*
  Given a positive integer n, return the count of the numbers of n-digit
  positive integers that start or end with 1.
  */
const startsOneEnds = (n) => {
","
const startsOneEnds = (n) => {
","  if (n == 1) { return 1 }
  let t = 18
  for (let i = 2; i < n; i++) {
    t = t * 10
  }
  return t
}

","  if (n == 1) { return 1 }
  let t = 18
  for (let i = 2; i < n; i++) {
    t = t * i * 10
  }
  return t
}

",excess logic,incorrect output,startsOneEnds,,,"const testStartsOneEnds = () => {
  console.assert(startsOneEnds(1) === 1)
  console.assert(startsOneEnds(2) === 18)
  console.assert(startsOneEnds(3) === 180)
  console.assert(startsOneEnds(4) === 1800)
  console.assert(startsOneEnds(5) === 18000)
}

testStartsOneEnds()
",,const startsOneEnds = (n),"Given a positive integer n, return the count of the numbers of n-digit
positive integers that start or end with 1.","Write a JavaScript function `const startsOneEnds = (n)` to solve the following problem:
Given a positive integer n, return the count of the numbers of n-digit
positive integers that start or end with 1."
JavaScript/84,"/*Given a positive integer N, return the total sum of its digits in binary.
  
  Example
      For N = 1000, the sum of digits will be 1 the output should be ""1"".
      For N = 150, the sum of digits will be 6 the output should be ""110"".
      For N = 147, the sum of digits will be 12 the output should be ""1100"".
  
  Variables:
      @N integer
           Constraints: 0 ≤ N ≤ 10000.
  Output:
       a string of binary number
  */
const solve = (N) => {
","
const solve = (N) => {
","  let t = 0
  while (N > 0) {
    t += N % 10
    N = (N - N % 10) / 10
  }
  return t.toString(2)
}

","  let t = 0
  while (N > 0) {
    t = N % 10
    N = (N - N % 10) / 10
  }
  return t.toString(2)
}

",operator misuse,incorrect output,solve,,,"const testSolve = () => {
  console.assert(solve(1000) === '1')
  console.assert(solve(150) === '110')
  console.assert(solve(147) === '1100')
  console.assert(solve(333) === '1001')
  console.assert(solve(963) === '10010')
}

testSolve()
",,const solve = (N),"Given a positive integer N, return the total sum of its digits in binary.
Example
For N = 1000, the sum of digits will be 1 the output should be ""1"".
For N = 150, the sum of digits will be 6 the output should be ""110"".
For N = 147, the sum of digits will be 12 the output should be ""1100"".
Variables:
@N integer
Constraints: 0 ≤ N ≤ 10000.
Output:
a string of binary number","Write a JavaScript function `const solve = (N)` to solve the following problem:
Given a positive integer N, return the total sum of its digits in binary.
Example
For N = 1000, the sum of digits will be 1 the output should be ""1"".
For N = 150, the sum of digits will be 6 the output should be ""110"".
For N = 147, the sum of digits will be 12 the output should be ""1100"".
Variables:
@N integer
Constraints: 0 ≤ N ≤ 10000.
Output:
a string of binary number"
JavaScript/85,"/*Given a non-empty list of integers lst. add the even elements that are at odd indices..


  Examples:
      add([4, 2, 6, 7]) ==> 2 
  */
const add = (lst) => {
","
const add = (lst) => {
","  let t = 0
  for (let i = 1; i < lst.length; i += 2) {
    if (lst[i] % 2 == 0) {
      t += lst[i]
    }
  }
  return t
}

","  let t = 0
  for (let i = 1; i < lst.length; i += 1) {
    if (lst[i] % 2 == 0) {
      t += lst[i]
    }
  }
  return t
}

",value misuse,incorrect output,add,,,"const testAdd = () => {
  console.assert(add([4, 88]) === 88)
  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)
  console.assert(add([4, 0, 6, 7]) === 0)
  console.assert(add([4, 4, 6, 8]) === 12)
}

testAdd()
","const testAdd = () => {
  console.assert(add([4, 2, 6, 7]) === 2)
}
testAdd()
",const add = (lst),"Given a non-empty list of integers lst. add the even elements that are at odd indices..
Examples:
add([4, 2, 6, 7]) ==> 2","Write a JavaScript function `const add = (lst)` to solve the following problem:
Given a non-empty list of integers lst. add the even elements that are at odd indices..
Examples:
add([4, 2, 6, 7]) ==> 2"
JavaScript/86,"/*
  Write a function that takes a string and returns an ordered version of it.
  Ordered version of string, is a string where all words (separated by space)
  are replaced by a new word where all the characters arranged in
  ascending order based on ascii value.
  Note: You should keep the order of words and blank spaces in the sentence.

  For example:
  antiShuffle('Hi') returns 'Hi'
  antiShuffle('hello') returns 'ehllo'
  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'
  */
const antiShuffle = (s) => {
","
const antiShuffle = (s) => {
","  let arr = s.split(/\s/)
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr[i].length; j++) {
      let ind = j
      for (let k = j + 1; k < arr[i].length; k++) {
        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {
          ind = k
        }
      }
      if (ind > j) {
        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)
      }
    }
  }
  let t = ''
  for (let i = 0; i < arr.length; i++) {
    if (i > 0) {
      t = t + ' '
    }
    t = t + arr[i]
  }
  return t
}

","  let arr = s.split(/\s/)
  for (let i = 0; i < arr.length; i++) {
    for (let j = 0; j < arr[i].length; j++) {
      let ind = j
      for (let k = j + 1; k < arr[i].length; k++) {
        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {
          ind = k
        }
      }
      if (ind > j) {
        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)
      }
    }
  }
  let t = ''
  for (let i = 0; i < arr.length; i++) {
    t = t + arr[i]
  }
  return t
}

",missing logic,incorrect output,antiShuffle,,,"const testAntiShuffle = () => {
  console.assert(antiShuffle('Hi') === 'Hi')
  console.assert(antiShuffle('hello') === 'ehllo')
  console.assert(antiShuffle('number') === 'bemnru')
  console.assert(antiShuffle('abcd') === 'abcd')
  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')
  console.assert(antiShuffle('') === '')
  console.assert(
    antiShuffle('Hi. My name is Mister Robot. How are you?') ===
    '.Hi My aemn is Meirst .Rboot How aer ?ouy'
  )
}

testAntiShuffle()
","const testAntiShuffle = () => {
  console.assert(antiShuffle('Hi') === 'Hi')
  console.assert(antiShuffle('hello') === 'ehllo')
  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')
}
testAntiShuffle()
",const antiShuffle = (s),"Write a function that takes a string and returns an ordered version of it.
Ordered version of string, is a string where all words (separated by space)
are replaced by a new word where all the characters arranged in
ascending order based on ascii value.
Note: You should keep the order of words and blank spaces in the sentence.
For example:
antiShuffle('Hi') returns 'Hi'
antiShuffle('hello') returns 'ehllo'
antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'","Write a JavaScript function `const antiShuffle = (s)` to solve the following problem:
Write a function that takes a string and returns an ordered version of it.
Ordered version of string, is a string where all words (separated by space)
are replaced by a new word where all the characters arranged in
ascending order based on ascii value.
Note: You should keep the order of words and blank spaces in the sentence.
For example:
antiShuffle('Hi') returns 'Hi'
antiShuffle('hello') returns 'ehllo'
antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'"
JavaScript/87,"/*
  You are given a 2 dimensional data, as a nested lists,
  which is similar to matrix, however, unlike matrices,
  each row may contain a different number of columns.
  Given lst, and integer x, find integers x in the list,
  and return list of tuples, [(x1, y1), (x2, y2) ...] such that
  each tuple is a coordinate - (row, columns), starting with 0.
  Sort coordinates initially by rows in ascending order.
  Also, sort coordinates of the row by columns in descending order.
  
  Examples:
  getRow([
    [1,2,3,4,5,6],
    [1,2,3,4,1,6],
    [1,2,3,4,5,1]
  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
  getRow([], 1) == []
  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]
  */
const getRow = (lst, x) => {
","
const getRow = (lst, x) => {
","  let t = []
  for (let i = 0; i < lst.length; i++) {
    for (let j = lst[i].length - 1; j >= 0; j--) {
      if (lst[i][j] == x) {
        t.push((i, j))
      }
    }
  }
  return t
}

","  let t = []
  for (let i = 0; i < lst.length; i++) {
    for (let j = lst[i].length - 1; j >= 0; j--) {
      if (lst[i][j] == x) {
        t.push((j, i))
      }
    }
  }
  return t
}

",variable misuse,incorrect output,getRow,,,"const testGetRow = () => {
  console.assert(
    JSON.stringify(
      getRow(
        [
          [1, 2, 3, 4, 5, 6],
          [1, 2, 3, 4, 1, 6],
          [1, 2, 3, 4, 5, 1],
        ],
        1
      )
    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])
  )
  console.assert(
    JSON.stringify(
      getRow(
        [
          [1, 2, 3, 4, 5, 6],
          [1, 2, 3, 4, 5, 6],
          [1, 2, 3, 4, 5, 6],
          [1, 2, 3, 4, 5, 6],
          [1, 2, 3, 4, 5, 6],
          [1, 2, 3, 4, 5, 6],
        ],
        2
      )
    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])
  )
  console.assert(
    JSON.stringify(
      getRow(
        [
          [1, 2, 3, 4, 5, 6],
          [1, 2, 3, 4, 5, 6],
          [1, 1, 3, 4, 5, 6],
          [1, 2, 1, 4, 5, 6],
          [1, 2, 3, 1, 5, 6],
          [1, 2, 3, 4, 1, 6],
          [1, 2, 3, 4, 5, 1],
        ],
        1
      )
    ) ===
    JSON.stringify([
      (0, 0),
      (1, 0),
      (2, 1),
      (2, 0),
      (3, 2),
      (3, 0),
      (4, 3),
      (4, 0),
      (5, 4),
      (5, 0),
      (6, 5),
      (6, 0),
    ])
  )
  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))
  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))
  console.assert(
    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])
  )
}

testGetRow()
","const testGetRow = () => {
  console.assert(
    JSON.stringify(
      getRow(
        [
          [1, 2, 3, 4, 5, 6],
          [1, 2, 3, 4, 1, 6],
          [1, 2, 3, 4, 5, 1],
        ],
        1
      )
    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])
  )
  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))
  console.assert(
    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])
  )
}
testGetRow()
","const getRow = (lst, x)","You are given a 2 dimensional data, as a nested lists,
which is similar to matrix, however, unlike matrices,
each row may contain a different number of columns.
Given lst, and integer x, find integers x in the list,
and return list of tuples, [(x1, y1), (x2, y2) ...] such that
each tuple is a coordinate - (row, columns), starting with 0.
Sort coordinates initially by rows in ascending order.
Also, sort coordinates of the row by columns in descending order.
Examples:
getRow([
[1,2,3,4,5,6],
[1,2,3,4,1,6],
[1,2,3,4,5,1]
], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
getRow([], 1) == []
getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]","Write a JavaScript function `const getRow = (lst, x)` to solve the following problem:
You are given a 2 dimensional data, as a nested lists,
which is similar to matrix, however, unlike matrices,
each row may contain a different number of columns.
Given lst, and integer x, find integers x in the list,
and return list of tuples, [(x1, y1), (x2, y2) ...] such that
each tuple is a coordinate - (row, columns), starting with 0.
Sort coordinates initially by rows in ascending order.
Also, sort coordinates of the row by columns in descending order.
Examples:
getRow([
[1,2,3,4,5,6],
[1,2,3,4,1,6],
[1,2,3,4,5,1]
], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
getRow([], 1) == []
getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]"
JavaScript/88,"/*
  Given an array of non-negative integers, return a copy of the given array after sorting,
  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
  or sort it in descending order if the sum( first index value, last index value) is even.

  Note:
  * don't change the given array.

  Examples:
  * sortArray([]) => []
  * sortArray([5]) => [5]
  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
  */
const sortArray = (array) => {
","
const sortArray = (array) => {
","  let arr = array
  let tot = arr[0] + arr[arr.length-1]
  for (let j = 0; j < arr.length; j++) {
    let ind = j
    for (let k = j + 1; k < arr.length; k++) {
      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {
        ind = k
      }
    }
    let tmp = arr[j]
    arr[j] = arr[ind]
    arr[ind] = tmp
  }
  return arr
}

","  let arr = array
  let tot = arr[0] + arr[arr.length-1]
  for (let j = 0; j < arr.length; j++) {
    let ind = j
    for (let k = j + 1; k < arr.length; k++) {
      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 != 0 && arr[k] > arr[ind])) {
        ind = k
      }
    }
    let tmp = arr[j]
    arr[j] = arr[ind]
    arr[ind] = tmp
  }
  return arr
}

",operator misuse,incorrect output,sortArray,,,"const testSortArray = () => {
  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))
  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))
  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))
  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))
  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))
  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))
  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))
}

testSortArray()
","const testSortArray = () => {
  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))
  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))
  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))
  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))
}
testSortArray()
",const sortArray = (array),"Given an array of non-negative integers, return a copy of the given array after sorting,
you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
or sort it in descending order if the sum( first index value, last index value) is even.
Note:
* don't change the given array.
Examples:
* sortArray([]) => []
* sortArray([5]) => [5]
* sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
* sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]","Write a JavaScript function `const sortArray = (array)` to solve the following problem:
Given an array of non-negative integers, return a copy of the given array after sorting,
you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
or sort it in descending order if the sum( first index value, last index value) is even.
Note:
* don't change the given array.
Examples:
* sortArray([]) => []
* sortArray([5]) => [5]
* sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
* sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]"
JavaScript/89,"/*Create a function encrypt that takes a string as an argument and
  returns a string encrypted with the alphabet being rotated. 
  The alphabet should be rotated in a manner such that the letters 
  shift down by two multiplied to two places.
  For example:
  encrypt('hi') returns 'lm'
  encrypt('asdfghjkl') returns 'ewhjklnop'
  encrypt('gf') returns 'kj'
  encrypt('et') returns 'ix'
  */
const encrypt = (s) => {
","
const encrypt = (s) => {
","  let t = ''
  for (let i = 0; i < s.length; i++) {
    let p = s[i].charCodeAt() + 4
    if (p > 122) { p -= 26 }
    t += String.fromCharCode(p)
  }
  return t
}

","  let t = ''
  for (let i = 0; i < s.length; i++) {
    let p = s[i].charCodeAt() + 4
    if (p > 122) { p -= 24 }
    t += String.fromCharCode(p)
  }
  return t
}

",value misuse,incorrect output,encrypt,,,"const testEncrypt = () => {
  console.assert(encrypt('hi') === 'lm')
  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')
  console.assert(encrypt('gf') === 'kj')
  console.assert(encrypt('et') === 'ix')
  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')
  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')
  console.assert(
    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===
    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'
  )
  console.assert(encrypt('a') === 'e')
}

testEncrypt()
","const testEncrypt = () => {
  console.assert(encrypt('hi') === 'lm')
  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')
  console.assert(encrypt('gf') === 'kj')
  console.assert(encrypt('et') === 'ix')
}
testEncrypt()
",const encrypt = (s),"Create a function encrypt that takes a string as an argument and
returns a string encrypted with the alphabet being rotated.
The alphabet should be rotated in a manner such that the letters
shift down by two multiplied to two places.
For example:
encrypt('hi') returns 'lm'
encrypt('asdfghjkl') returns 'ewhjklnop'
encrypt('gf') returns 'kj'
encrypt('et') returns 'ix'","Write a JavaScript function `const encrypt = (s)` to solve the following problem:
Create a function encrypt that takes a string as an argument and
returns a string encrypted with the alphabet being rotated.
The alphabet should be rotated in a manner such that the letters
shift down by two multiplied to two places.
For example:
encrypt('hi') returns 'lm'
encrypt('asdfghjkl') returns 'ewhjklnop'
encrypt('gf') returns 'kj'
encrypt('et') returns 'ix'"
JavaScript/90,"/*
  You are given a list of integers.
  Write a function nextSmallest() that returns the 2nd smallest element of the list.
  Return null if there is no such element.
  
  nextSmallest([1, 2, 3, 4, 5]) == 2
  nextSmallest([5, 1, 4, 3, 2]) == 2
  nextSmallest([]) == null
  nextSmallest([1, 1]) == null
  */
const nextSmallest = (lst) => {
","
const nextSmallest = (lst) => {
","  let arr = lst
  for (let j = 0; j < arr.length; j++) {
    let ind = j
    for (let k = j + 1; k < arr.length; k++) {
      if (arr[k] < arr[ind]) {
        ind = k
      }
    }
    let tmp = arr[j]
    arr[j] = arr[ind]
    arr[ind] = tmp
  }
  let smallest = arr[0]
  let pt = 1
  while(pt<arr.length){
    if(arr[pt]>smallest){
      return arr[pt]
    }
    pt++
  }
  return null
}

","  let arr = lst
  for (let j = 0; j < arr.length; j++) {
    let ind = j
    for (let k = j + 1; k < arr.length; k++) {
      if (arr[k] < arr[ind]) {
        ind = k
      }
    }
    let tmp = arr[j]
    arr[j] = arr[ind]
    arr[ind] = tmp
  }
  let smallest = 0
  let pt = 0
  while(pt<arr.length){
    if(arr[pt]>smallest){
      return arr[pt]
    }
    pt++
  }
  return null
}

",value misuse,incorrect output,nextSmallest,,,"const testNextSmallest = () => {
  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)
  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)
  console.assert(nextSmallest([]) === null)
  console.assert(nextSmallest([1, 1]) === null)
  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)
  console.assert(nextSmallest([1, 0 ** 0]) === null)
  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)
}

testNextSmallest()
","const testNextSmallest = () => {
  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)
  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)
  console.assert(nextSmallest([]) === null)
  console.assert(nextSmallest([1, 1]) === null)
}
testNextSmallest()
",const nextSmallest = (lst),"You are given a list of integers.
Write a function nextSmallest() that returns the 2nd smallest element of the list.
Return null if there is no such element.
nextSmallest([1, 2, 3, 4, 5]) == 2
nextSmallest([5, 1, 4, 3, 2]) == 2
nextSmallest([]) == null
nextSmallest([1, 1]) == null","Write a JavaScript function `const nextSmallest = (lst)` to solve the following problem:
You are given a list of integers.
Write a function nextSmallest() that returns the 2nd smallest element of the list.
Return null if there is no such element.
nextSmallest([1, 2, 3, 4, 5]) == 2
nextSmallest([5, 1, 4, 3, 2]) == 2
nextSmallest([]) == null
nextSmallest([1, 1]) == null"
JavaScript/91,"/*
  You'll be given a string of words, and your task is to count the number
  of boredoms. A boredom is a sentence that starts with the word ""I"".
  Sentences are delimited by '.', '?' or '!'.
 
  For example:
  >>> isBored(""Hello world"")
  0
  >>> isBored(""The sky is blue. The sun is shining. I love this weather"")
  1
  */
const isBored = (S) => {
","
const isBored = (S) => {
","  let t = 0
  if (S[0] == 'I' && S[1] == ' ') { t = 1 }
  for (let i = 0; i < S.length; i++) {
    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {
      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {
        t++
      }
    }
  }
  return t
}

","  let t = 0
  if (S[0] == ' ' && S[1] == 'I') { t = 1 }
  for (let i = 0; i < S.length; i++) {
    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {
      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {
        t++
      }
    }
  }
  return t
}

",value misuse,incorrect output,isBored,,,"const testIsBored = () => {
  console.assert(isBored('Hello world') === 0)
  console.assert(isBored('Is the sky blue?') === 0)
  console.assert(isBored('I love It !') === 1)
  console.assert(isBored('bIt') === 0)
  console.assert(
    isBored('I feel good today. I will be productive. will kill It') === 2
  )
  console.assert(isBored('You and I are going for a walk') === 0)
}

testIsBored()
","const testIsBored = () => {
  console.assert(isBored('Hello world') === 0)
  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)
}
testIsBored()
",const isBored = (S),"You'll be given a string of words, and your task is to count the number
of boredoms. A boredom is a sentence that starts with the word ""I"".
Sentences are delimited by '.', '?' or '!'.
For example:
>>> isBored(""Hello world"")
0
>>> isBored(""The sky is blue. The sun is shining. I love this weather"")
1","Write a JavaScript function `const isBored = (S)` to solve the following problem:
You'll be given a string of words, and your task is to count the number
of boredoms. A boredom is a sentence that starts with the word ""I"".
Sentences are delimited by '.', '?' or '!'.
For example:
>>> isBored(""Hello world"")
0
>>> isBored(""The sky is blue. The sun is shining. I love this weather"")
1"
JavaScript/92,"/* Create a function that takes 3 numbers.
  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
  Returns false in any other cases.
  Examples
  anyInt(5, 2, 7) ➞ true
  anyInt(3, 2, 2) ➞ false
  anyInt(3, -2, 1) ➞ true
  anyInt(3.6, -2.2, 2) ➞ false
  */
const anyInt = (x, y, z) => {
","
const anyInt = (x, y, z) => {
","  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {
    return true
  }
  return false
}

","  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x === y + z)) {
    return true
  }
  return false
}

",missing logic,incorrect output,anyInt,,,"const testAnyInt = () => {
  console.assert(anyInt(2, 3, 1) === true)
  console.assert(anyInt(2.5, 2, 3) === false)
  console.assert(anyInt(1.5, 5, 3.5) === false)
  console.assert(anyInt(2, 6, 2) === false)
  console.assert(anyInt(4, 2, 2) === true)
  console.assert(anyInt(2.2, 2.2, 2.2) === false)
  console.assert(anyInt(-4, 6, 2) === true)
  console.assert(anyInt(2, 1, 1) === true)
  console.assert(anyInt(3, 4, 7) === true)
  console.assert(anyInt(3.0, 4, 7) === true)
}

testAnyInt()
","const testAnyInt = () => {
  console.assert(anyInt(5, 2, 7) === true)
  console.assert(anyInt(3, 2, 2) === false)
  console.assert(anyInt(3, -2, 1) === true)
  console.assert(anyInt(3.6, -2.2, 2) === false)
}
testAnyInt()
","const anyInt = (x, y, z)","Create a function that takes 3 numbers.
Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
Returns false in any other cases.
Examples
anyInt(5, 2, 7) ➞ true
anyInt(3, 2, 2) ➞ false
anyInt(3, -2, 1) ➞ true
anyInt(3.6, -2.2, 2) ➞ false","Write a JavaScript function `const anyInt = (x, y, z)` to solve the following problem:
Create a function that takes 3 numbers.
Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
Returns false in any other cases.
Examples
anyInt(5, 2, 7) ➞ true
anyInt(3, 2, 2) ➞ false
anyInt(3, -2, 1) ➞ true
anyInt(3.6, -2.2, 2) ➞ false"
JavaScript/93,"/*
  Write a function that takes a message, and encodes in such a 
  way that it swaps case of all letters, replaces all vowels in 
  the message with the letter that appears 2 places ahead of that 
  vowel in the english alphabet. 
  Assume only letters. 
  
  Examples:
  >>> encode('test')
  'TGST'
  >>> encode('This is a message')
  'tHKS KS C MGSSCGG'
  */
const encode = (message) => {
","
const encode = (message) => {
","  let t = ''
  for (let i = 0; i < message.length; i++) {
    let p = message[i].charCodeAt()
    if (p > 96) { p -= 32 }
    else if (p!=32 && p < 96) { p += 32 }
    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }
    t += String.fromCharCode(p)
  }
  return t
}

","  let t = ''
  for (let i = 0; i < message.length; i++) {
    let p = message[i].charCodeAt()
    if (p > 96) { p -= 32 }
    else if (p!=32 && p < 96) { p += 32 }
    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }
  }
  return t
}

",missing logic,incorrect output,encode,,,"const testEncode = () => {
  console.assert(encode('TEST') === 'tgst')
  console.assert(encode('Mudasir') === 'mWDCSKR')
  console.assert(encode('YES') === 'ygs')
  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')
  console.assert(
    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'
  )
}

testEncode()
","const testEncode = () => {
  console.assert(encode('test') === 'TGST')
  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')
}
testEncode()
",const encode = (message),"Write a function that takes a message, and encodes in such a
way that it swaps case of all letters, replaces all vowels in
the message with the letter that appears 2 places ahead of that
vowel in the english alphabet.
Assume only letters.
Examples:
>>> encode('test')
'TGST'
>>> encode('This is a message')
'tHKS KS C MGSSCGG'","Write a JavaScript function `const encode = (message)` to solve the following problem:
Write a function that takes a message, and encodes in such a
way that it swaps case of all letters, replaces all vowels in
the message with the letter that appears 2 places ahead of that
vowel in the english alphabet.
Assume only letters.
Examples:
>>> encode('test')
'TGST'
>>> encode('This is a message')
'tHKS KS C MGSSCGG'"
JavaScript/94,"/*You are given a list of integers.
  You need to find the largest prime value and return the sum of its digits.

  Examples:
  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
  For lst = [0,81,12,3,1,21] the output should be 3
  For lst = [0,8,1,2,1,7] the output should be 7
  */
const skjkasdkd = (lst) => {
","
const skjkasdkd = (lst) => {
","  let t = 0
  for (let i = 0; i < lst.length; i++) {
    let p = 1
    for (let j = 2; j * j <= lst[i]; j++) {
      if (lst[i] % j == 0) { p = 0; break }
    }
    if (p == 1 && lst[i] > t) { t = lst[i] }
  }
  let k = 0
  while (t != 0) {
    k += t % 10
    t = (t - t % 10) / 10
  }
  return k
}

","  let t = 0
  for (let i = 0; i < lst.length; i++) {
    let p = 1
    for (let j = 2; j * j <= lst[i]; j++) {
      if (lst[i] % j == 0) { p = 0; break }
    }
    if (p == 1 || lst[i] > t) { t = lst[i] }
  }
  let k = 0
  while (t != 0) {
    k += t % 10
    t = (t - t % 10) / 10
  }
  return k
}

",operator misuse,incorrect output,skjkasdkd,,,"const testSkjkasdkd = () => {
  console.assert(
    skjkasdkd([
      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,
    ]) === 10
  )

  console.assert(
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25
  )

  console.assert(
    skjkasdkd([
      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,
    ]) === 13
  )

  console.assert(
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11
  )

  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)

  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)

  console.assert(skjkasdkd([8191]) === 19)
  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)
  console.assert(skjkasdkd([127, 97, 8192]) === 10)
}

testSkjkasdkd()
","const testSkjkasdkd = () => {
  console.assert(
    skjkasdkd([
      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,
    ]) === 10
  )
  console.assert(
    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25
  )
  console.assert(
    skjkasdkd([
      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,
    ]) === 13
  )
  console.assert(
    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11
  )
  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)
  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)
}
testSkjkasdkd()
",const skjkasdkd = (lst),"You are given a list of integers.
You need to find the largest prime value and return the sum of its digits.
Examples:
For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
For lst = [0,81,12,3,1,21] the output should be 3
For lst = [0,8,1,2,1,7] the output should be 7","Write a JavaScript function `const skjkasdkd = (lst)` to solve the following problem:
You are given a list of integers.
You need to find the largest prime value and return the sum of its digits.
Examples:
For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
For lst = [0,81,12,3,1,21] the output should be 3
For lst = [0,8,1,2,1,7] the output should be 7"
JavaScript/95,"/*
  Given a dictionary, return true if all keys are strings in lower 
  case or all keys are strings in upper case, else return false.
  The function should return false is the given dictionary is empty.
  Examples:
  checkDictCase({""a"":""apple"", ""b"":""banana""}) should return true.
  checkDictCase({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return false.
  checkDictCase({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return false.
  checkDictCase({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return false.
  checkDictCase({""STATE"":""NC"", ""ZIP"":""12345"" }) should return true.
  */
const checkDictCase = (dict) => {
","
const checkDictCase = (dict) => {
","  let c = 0
  let lo = 1
  let hi = 1
  for (let key in dict) {
    c++
    for (let i = 0; i < key.length; i++) {
      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }
      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }
    }
  }
  if ((lo == 0 && hi == 0) || c == 0) { return false }
  return true
}

","  let c = 0
  let lo = 1
  let hi = 1
  for (let key in dict) {
    c++
    for (let i = 0; i < key.length; i++) {
      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }
      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }
    }
  }
  if ((lo == 0 && hi == 0) && c == 0) { return false }
  return true
}

",operator misuse,incorrect output,checkDictCase,,,"const testCheckDictCase = () => {
  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)
  console.assert(
    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false
  )
  console.assert(
    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false
  )
  console.assert(
    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false
  )
  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)
  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)
  console.assert(checkDictCase({}) === false)
}

testCheckDictCase()
","const testCheckDictCase = () => {
  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)
  console.assert(
    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false
  )
  console.assert(
    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false
  )
  console.assert(
    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false
  )
  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)
}
testCheckDictCase()
",const checkDictCase = (dict),"Given a dictionary, return true if all keys are strings in lower
case or all keys are strings in upper case, else return false.
The function should return false is the given dictionary is empty.
Examples:
checkDictCase({""a"":""apple"", ""b"":""banana""}) should return true.
checkDictCase({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return false.
checkDictCase({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return false.
checkDictCase({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return false.
checkDictCase({""STATE"":""NC"", ""ZIP"":""12345"" }) should return true.","Write a JavaScript function `const checkDictCase = (dict)` to solve the following problem:
Given a dictionary, return true if all keys are strings in lower
case or all keys are strings in upper case, else return false.
The function should return false is the given dictionary is empty.
Examples:
checkDictCase({""a"":""apple"", ""b"":""banana""}) should return true.
checkDictCase({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return false.
checkDictCase({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return false.
checkDictCase({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return false.
checkDictCase({""STATE"":""NC"", ""ZIP"":""12345"" }) should return true."
JavaScript/96,"/*Implement a function that takes an non-negative integer and returns an array of the first n
  integers that are prime numbers and less than n.
  for example:
  countUpTo(5) => [2,3]
  countUpTo(11) => [2,3,5,7]
  countUpTo(0) => []
  countUpTo(20) => [2,3,5,7,11,13,17,19]
  countUpTo(1) => []
  countUpTo(18) => [2,3,5,7,11,13,17]
  */
const countUpTo = (n) => {
","
const countUpTo = (n) => {
","  let t = []
  for (let i = 2; i < n; i++) {
    let p = 1
    for (let j = 2; j * j <= i; j++) {
      if (i % j == 0) { p = 0; break }
    }
    if (p == 1) { t.push(i) }
  }
  return t
}

","  let t = []
  for (let i = 2; i < n; i++) {
    let p = 1
    for (let j = 2; j * j <= i; j++) {
      if (j % i == 0) { p = 0; break }
    }
    if (p == 1) { t.push(i) }
  }
  return t
}

",variable misuse,incorrect output,countUpTo,,,"const testCountUpTo = () => {
  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))
  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))
  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))
  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))
  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))
  console.assert(
    JSON.stringify(countUpTo(22)) ===
    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])
  )
  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))
  console.assert(
    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])
  )
  console.assert(
    JSON.stringify(countUpTo(47)) ===
    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])
  )
  console.assert(
    JSON.stringify(countUpTo(101)) ===
    JSON.stringify([
      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,
      71, 73, 79, 83, 89, 97,
    ])
  )
}

testCountUpTo()
","const testCountUpTo = () => {
  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))
  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))
  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))
  console.assert(
    JSON.stringify(countUpTo(20)) ===
    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])
  )
  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))
  console.assert(
    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])
  )
}
testCountUpTo()
",const countUpTo = (n),"Implement a function that takes an non-negative integer and returns an array of the first n
integers that are prime numbers and less than n.
for example:
countUpTo(5) => [2,3]
countUpTo(11) => [2,3,5,7]
countUpTo(0) => []
countUpTo(20) => [2,3,5,7,11,13,17,19]
countUpTo(1) => []
countUpTo(18) => [2,3,5,7,11,13,17]","Write a JavaScript function `const countUpTo = (n)` to solve the following problem:
Implement a function that takes an non-negative integer and returns an array of the first n
integers that are prime numbers and less than n.
for example:
countUpTo(5) => [2,3]
countUpTo(11) => [2,3,5,7]
countUpTo(0) => []
countUpTo(20) => [2,3,5,7,11,13,17,19]
countUpTo(1) => []
countUpTo(18) => [2,3,5,7,11,13,17]"
JavaScript/97,"/*Complete the function that takes two integers and returns 
  the product of their unit digits.
  Assume the input is always valid.
  Examples:
  multiply(148, 412) should return 16.
  multiply(19, 28) should return 72.
  multiply(2020, 1851) should return 0.
  multiply(14,-15) should return 20.
  */
const multiply = (a, b) => {
","
const multiply = (a, b) => {
","  if (a < 0) { a = -a }
  if (b < 0) { b = -b }
  return (a % 10) * (b % 10)
}

","  if (a < 0) { a = -a }
  if (b < 0) { b = -b }
  return (a % 10) * (b % 10) * a * b
}

",excess logic,incorrect output,multiply,,,"const testMultiply = () => {
  console.assert(multiply(148, 412) === 16)
  console.assert(multiply(19, 28) === 72)
  console.assert(multiply(2020, 1851) === 0)
  console.assert(multiply(14, -15) === 20)
  console.assert(multiply(76, 67) === 42)
  console.assert(multiply(17, 27) === 49)
  console.assert(multiply(0, 1) === 0)
  console.assert(multiply(0, 0) === 0)
}

testMultiply()
","const testMultiply = () => {
  console.assert(multiply(148, 412) === 16)
  console.assert(multiply(19, 28) === 72)
  console.assert(multiply(2020, 1851) === 0)
  console.assert(multiply(14, -15) === 20)
}
testMultiply()
","const multiply = (a, b)","Complete the function that takes two integers and returns
the product of their unit digits.
Assume the input is always valid.
Examples:
multiply(148, 412) should return 16.
multiply(19, 28) should return 72.
multiply(2020, 1851) should return 0.
multiply(14,-15) should return 20.","Write a JavaScript function `const multiply = (a, b)` to solve the following problem:
Complete the function that takes two integers and returns
the product of their unit digits.
Assume the input is always valid.
Examples:
multiply(148, 412) should return 16.
multiply(19, 28) should return 72.
multiply(2020, 1851) should return 0.
multiply(14,-15) should return 20."
JavaScript/98,"/*
  Given a string s, count the number of uppercase vowels in even indices.
  
  For example:
  countUpper('aBCdEf') returns 1
  countUpper('abcdefg') returns 0
  countUpper('dBBE') returns 0
  */
const countUpper = (s) => {
","
const countUpper = (s) => {
","  let p = 0
  for (let i = 0; i < s.length; i += 2) {
    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }
  }
  return p
}

","  let p = 0
  for (let i = 0; i < s.length; i += 2) {
    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p += 2 }
  }
  return p
}

",value misuse,incorrect output,countUpper,,,"const testCountUpper = () => {
  console.assert(countUpper('aBCdEf') === 1)
  console.assert(countUpper('abcdefg') === 0)
  console.assert(countUpper('dBBE') === 0)
  console.assert(countUpper('B') === 0)
  console.assert(countUpper('U') === 1)
  console.assert(countUpper('') === 0)
  console.assert(countUpper('EEEE') === 2)
}

testCountUpper()
","const testCountUpper = () => {
  console.assert(countUpper('aBCdEf') === 1)
  console.assert(countUpper('abcdefg') === 0)
  console.assert(countUpper('dBBE') === 0)
}
testCountUpper()
",const countUpper = (s),"Given a string s, count the number of uppercase vowels in even indices.
For example:
countUpper('aBCdEf') returns 1
countUpper('abcdefg') returns 0
countUpper('dBBE') returns 0","Write a JavaScript function `const countUpper = (s)` to solve the following problem:
Given a string s, count the number of uppercase vowels in even indices.
For example:
countUpper('aBCdEf') returns 1
countUpper('abcdefg') returns 0
countUpper('dBBE') returns 0"
JavaScript/99,"/* Create a function that takes a value (string) representing a number
  and returns the closest integer to it. If the number is equidistant
  from two integers, round it away from zero.
  Examples
  >>> closestInteger(""10"")
  10
  >>> closestInteger(""15.3"")
  15
  Note:
  Rounding away from zero means that if the given number is equidistant
  from two integers, the one you should return is the one that is the
  farthest from zero. For example closestInteger(""14.5"") should
  return 15 and closestInteger(""-14.5"") should return -15.
  */
const closestInteger = (value) => {
","
const closestInteger = (value) => {
","  value = Number(value)
  let t = value % 1
  if (t < 0.5 && t > -0.5) { value -= t }
  else { value += t }
  return value
}

","  value = Number(value)
  let t = value % 1
  if (t < 0.5 && t > -0.5) { value += t }
  else { value -= t }
  return value
}

",function misuse,incorrect output,closestInteger,,,"const testClosestInteger = () => {
  console.assert(closestInteger('10') === 10)
  console.assert(closestInteger('14.5') === 15)
  console.assert(closestInteger('-15.5') === -16)
  console.assert(closestInteger('15.3') === 15)
  console.assert(closestInteger('0') === 0)
}

testClosestInteger()
","const testClosestInteger = () => {
  console.assert(closestInteger('10') === 10)
  console.assert(closestInteger('15.3') === 15)
}
testClosestInteger()
",const closestInteger = (value),"Create a function that takes a value (string) representing a number
and returns the closest integer to it. If the number is equidistant
from two integers, round it away from zero.
Examples
>>> closestInteger(""10"")
10
>>> closestInteger(""15.3"")
15
Note:
Rounding away from zero means that if the given number is equidistant
from two integers, the one you should return is the one that is the
farthest from zero. For example closestInteger(""14.5"") should
return 15 and closestInteger(""-14.5"") should return -15.","Write a JavaScript function `const closestInteger = (value)` to solve the following problem:
Create a function that takes a value (string) representing a number
and returns the closest integer to it. If the number is equidistant
from two integers, round it away from zero.
Examples
>>> closestInteger(""10"")
10
>>> closestInteger(""15.3"")
15
Note:
Rounding away from zero means that if the given number is equidistant
from two integers, the one you should return is the one that is the
farthest from zero. For example closestInteger(""14.5"") should
return 15 and closestInteger(""-14.5"") should return -15."
JavaScript/100,"/*
  Given a positive integer n, you have to make a pile of n levels of stones.
  The first level has n stones.
  The number of stones in the next level is:
      - the next odd number if n is odd.
      - the next even number if n is even.
  Return the number of stones in each level in a list, where element at index
  i represents the number of stones in the level (i+1).

  Examples:
  >>> makeAPile(3)
  [3, 5, 7]
  */
const makeAPile = (n) => {
","
const makeAPile = (n) => {
","  let t = []
  for (let i = n; i < n * 3; i += 2) {
    t.push(i)
  }
  return t
}

","  let t = []
  for (let i = n; i < n * 3; i += 2) {
    t.push(i)
    t.push(n)
  }
  return t
}

",excess logic,incorrect output,makeAPile,,,"const testMakeAPile = () => {
  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))
  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))
  console.assert(
    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])
  )
  console.assert(
    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])
  )
  console.assert(
    JSON.stringify(makeAPile(8)) ===
    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])
  )
}

testMakeAPile()
","const testMakeAPile = () => {
  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))
}
testMakeAPile()
",const makeAPile = (n),"Given a positive integer n, you have to make a pile of n levels of stones.
The first level has n stones.
The number of stones in the next level is:
- the next odd number if n is odd.
- the next even number if n is even.
Return the number of stones in each level in a list, where element at index
i represents the number of stones in the level (i+1).
Examples:
>>> makeAPile(3)
[3, 5, 7]","Write a JavaScript function `const makeAPile = (n)` to solve the following problem:
Given a positive integer n, you have to make a pile of n levels of stones.
The first level has n stones.
The number of stones in the next level is:
- the next odd number if n is odd.
- the next even number if n is even.
Return the number of stones in each level in a list, where element at index
i represents the number of stones in the level (i+1).
Examples:
>>> makeAPile(3)
[3, 5, 7]"
JavaScript/101,"/*
  You will be given a string of words separated by commas or spaces. Your task is
  to split the string into words and return an array of the words.
  
  For example:
  wordsString(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
  wordsString(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
  */
const wordsString = (s) => {
","
const wordsString = (s) => {
","  let t = ''
  let p = []
  let k = 0
  for (let i = 0; i < s.length; i++) {
    if (s[i] == ' ' || s[i] == ',') {
      if (k == 0) {
        k = 1;
        p.push(t);
        t = '';
      }
    }
    else {
      k = 0;
      t += s[i]
    }
  }
  if (t != '') {
    p.push(t);
  }
  return p
}

","  let t = ','
  let p = []
  let k = 0
  for (let i = 0; i < s.length; i++) {
    if (s[i] == ' ' || s[i] == ',') {
      if (k == 0) {
        k = 1;
        p.push(t);
        t = ',';
      }
    }
    else {
      k = 0;
      t += s[i]
    }
  }
  if (t != '') {
    p.push(t);
  }
  return p
}

",value misuse,incorrect output,wordsString,,,"const testWordsString = () => {
  console.assert(
    JSON.stringify(wordsString('Hi, my name is John')) ===
    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])
  )
  console.assert(
    JSON.stringify(wordsString('One, two, three, four, five, six')) ===
    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])
  )
  console.assert(
    JSON.stringify(wordsString('Hi, my name')) ===
    JSON.stringify(['Hi', 'my', 'name'])
  )
  console.assert(
    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===
    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])
  )
  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))
  console.assert(
    JSON.stringify(wordsString('ahmed     , gamal')) ===
    JSON.stringify(['ahmed', 'gamal'])
  )
}

testWordsString()
","const testWordsString = () => {
  console.assert(
    JSON.stringify(wordsString('Hi, my name is John')) ===
    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])
  )
  console.assert(
    JSON.stringify(wordsString('One, two, three, four, five, six')) ===
    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])
  )
}
testWordsString()
",const wordsString = (s),"You will be given a string of words separated by commas or spaces. Your task is
to split the string into words and return an array of the words.
For example:
wordsString(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
wordsString(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]","Write a JavaScript function `const wordsString = (s)` to solve the following problem:
You will be given a string of words separated by commas or spaces. Your task is
to split the string into words and return an array of the words.
For example:
wordsString(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
wordsString(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]"
JavaScript/102,"/*This function takes two positive numbers x and y and returns the
  biggest even integer number that is in the range [x, y] inclusive. If 
  there's no such number, then the function should return -1.

  For example:
  chooseNum(12, 15) = 14
  chooseNum(13, 12) = -1
  */
const chooseNum = (x, y) => {
","
const chooseNum = (x, y) => {
","  for (let i = y; i >= x; i--) {
    if (i % 2 == 0) {return i }
  }
  return -1
}

","  for (let i = y; i >= x; i--) {
    if (i % 2 == 0) {return i }
  }
  return x
}

",variable misuse,incorrect output,chooseNum,,,"const testChooseNum = () => {
  console.assert(chooseNum(12, 15) === 14)
  console.assert(chooseNum(13, 12) === -1)
  console.assert(chooseNum(33, 12354) === 12354)
  console.assert(chooseNum(5234, 5233) === -1)
  console.assert(chooseNum(6, 29) === 28)
  console.assert(chooseNum(27, 10) === -1)
  console.assert(chooseNum(7, 7) === -1)
  console.assert(chooseNum(546, 546) === 546)
}

testChooseNum()
","const testChooseNum = () => {
  console.assert(chooseNum(12, 15) === 14)
  console.assert(chooseNum(13, 12) === -1)
}
testChooseNum()
","const chooseNum = (x, y)","This function takes two positive numbers x and y and returns the
biggest even integer number that is in the range [x, y] inclusive. If
there's no such number, then the function should return -1.
For example:
chooseNum(12, 15) = 14
chooseNum(13, 12) = -1","Write a JavaScript function `const chooseNum = (x, y)` to solve the following problem:
This function takes two positive numbers x and y and returns the
biggest even integer number that is in the range [x, y] inclusive. If
there's no such number, then the function should return -1.
For example:
chooseNum(12, 15) = 14
chooseNum(13, 12) = -1"
JavaScript/103,"/*You are given two positive integers n and m, and your task is to compute the
  average of the integers from n through m (including n and m). 
  Round the answer to the nearest integer and convert that to binary.
  If n is greater than m, return -1.
  Example:
  roundedAvg(1, 5) => ""0b11""
  roundedAvg(7, 5) => -1
  roundedAvg(10, 20) => ""0b1111""
  roundedAvg(20, 33) => ""0b11010""
  */
const roundedAvg = (n, m) => {
","
const roundedAvg = (n, m) => {
","  if (n > m) { return -1 }
  let k = (n + m) / 2
  if (k % 1 != 0) { k = (n + m + 1) / 2 }
  return '0b' + k.toString(2)
}

","  if (n > m) { return -1 }
  let k = (n + m) / 2
  if (k % 1 != 0) { k = (n + m) / 2 }
  return '0b' + k.toString(2)
}

",value misuse,incorrect output,roundedAvg,,,"const testRoundedAvg = () => {
  console.assert(roundedAvg(1, 5) === '0b11')
  console.assert(roundedAvg(7, 13) === '0b1010')
  console.assert(roundedAvg(964, 977) === '0b1111001011')
  console.assert(roundedAvg(996, 997) === '0b1111100101')
  console.assert(roundedAvg(560, 851) === '0b1011000010')
  console.assert(roundedAvg(185, 546) === '0b101101110')
  console.assert(roundedAvg(362, 496) === '0b110101101')
  console.assert(roundedAvg(350, 902) === '0b1001110010')
  console.assert(roundedAvg(197, 233) === '0b11010111')
  console.assert(roundedAvg(7, 5) === -1)
  console.assert(roundedAvg(5, 1) === -1)
  console.assert(roundedAvg(5, 5) === '0b101')
}

testRoundedAvg()
","const testRoundedAvg = () => {
  console.assert(roundedAvg(1, 5) === '0b11')
  console.assert(roundedAvg(7, 13) === '0b1010')
  console.assert(roundedAvg(7, 5) === -1)
  console.assert(roundedAvg(10,20) === ""0b1111"")
  console.assert(roundedAvg(20,33) === '0b11011')
}
testRoundedAvg()
","const roundedAvg = (n, m)","You are given two positive integers n and m, and your task is to compute the
average of the integers from n through m (including n and m).
Round the answer to the nearest integer and convert that to binary.
If n is greater than m, return -1.
Example:
roundedAvg(1, 5) => ""0b11""
roundedAvg(7, 5) => -1
roundedAvg(10, 20) => ""0b1111""
roundedAvg(20, 33) => ""0b11010""","Write a JavaScript function `const roundedAvg = (n, m)` to solve the following problem:
You are given two positive integers n and m, and your task is to compute the
average of the integers from n through m (including n and m).
Round the answer to the nearest integer and convert that to binary.
If n is greater than m, return -1.
Example:
roundedAvg(1, 5) => ""0b11""
roundedAvg(7, 5) => -1
roundedAvg(10, 20) => ""0b1111""
roundedAvg(20, 33) => ""0b11010"""
JavaScript/104,"/*Given a list of positive integers x. return a sorted list of all 
  elements that hasn't any even digit.

  Note: Returned list should be sorted in increasing order.
  
  For example:
  >>> uniqueDigits([15, 33, 1422, 1])
  [1, 15, 33]
  >>> uniqueDigits([152, 323, 1422, 10])
  []
  */
const uniqueDigits = (x) => {
","
const uniqueDigits = (x) => {
","  let p = []
  for (let i = 0; i < x.length; i++) {
    let h = x[i]
    let boo = 1
    while (h > 0) {
      let r = h % 10
      if (r % 2 == 0) {
        boo = 0;
        break;
      }
      h = (h - r) / 10
    }
    if (boo) {
      p.push(x[i])
    }
  }
  for (let j = 0; j < p.length; j++) {
    let ind = j
    for (let k = j + 1; k < p.length; k++) {
      if (p[k] < p[ind]) {
        ind = k
      }
    }
    if (ind > j) {
      let tmp = p[j]
      p[j] = p[ind]
      p[ind] = tmp
    }
  }
  return p
}

","  let p = []
  for (let i = 0; i < x.length; i++) {
    let h = x[i]
    let boo = 1
    while (h > 0) {
      let r = h % 10
      if (r % 2 == 0) {
        boo = 0;
        break;
      }
      h = (h - r) / 10
    }
    if (boo) {
      p.push(x[i]);
      p.push(h);
    }
  }
  for (let j = 0; j < p.length; j++) {
    let ind = j
    for (let k = j + 1; k < p.length; k++) {
      if (p[k] < p[ind]) {
        ind = k
      }
    }
    if (ind > j) {
      let tmp = p[j]
      p[j] = p[ind]
      p[ind] = tmp
    }
  }
  return p
}

",excess logic,incorrect output,uniqueDigits,,,"const testUniqueDigits = () => {
  console.assert(
    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===
    JSON.stringify([1, 15, 33])
  )
  console.assert(
    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])
  )
  console.assert(
    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===
    JSON.stringify([111, 151])
  )
  console.assert(
    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])
  )
}

testUniqueDigits()
","const testUniqueDigits = () => {
  console.assert(
    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===
    JSON.stringify([1, 15, 33])
  )
  console.assert(
    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])
  )
}
testUniqueDigits()
",const uniqueDigits = (x),"Given a list of positive integers x. return a sorted list of all
elements that hasn't any even digit.
Note: Returned list should be sorted in increasing order.
For example:
>>> uniqueDigits([15, 33, 1422, 1])
[1, 15, 33]
>>> uniqueDigits([152, 323, 1422, 10])
[]","Write a JavaScript function `const uniqueDigits = (x)` to solve the following problem:
Given a list of positive integers x. return a sorted list of all
elements that hasn't any even digit.
Note: Returned list should be sorted in increasing order.
For example:
>>> uniqueDigits([15, 33, 1422, 1])
[1, 15, 33]
>>> uniqueDigits([152, 323, 1422, 10])
[]"
JavaScript/105,"/*
  Given an array of integers, sort the integers that are between 1 and 9 inclusive,
  reverse the resulting array, and then replace each digit by its corresponding name from
  ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

  For example:
    arr = [2, 1, 1, 4, 5, 8, 2, 3]   
          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
    return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
  
    If the array is empty, return an empty array:
    arr = []
    return []
  
    If the array has any strange number ignore it:
    arr = [1, -1 , 55] 
          -> sort arr -> [-1, 1, 55]
          -> reverse arr -> [55, 1, -1]
    return = ['One']
  */
const byLength = (arr) => {
","
const byLength = (arr) => {
","  p = []
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }
  }
  for (let j = 0; j < p.length; j++) {
    let ind = j
    for (let k = j + 1; k < p.length; k++) {
      if (p[k] > p[ind]) {
        ind = k
      }
    }
    if (ind > j) {
      let tmp = p[j]
      p[j] = p[ind]
      p[ind] = tmp
    }
  }
  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']
  let t = []
  for (let j = 0; j < p.length; j++) {
    t.push(l[p[j]-1])
  }
  return t
}

","  p = []
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }
  }
  for (let j = 0; j < p.length; j++) {
    let ind = j
    for (let k = j + 1; k < p.length; k++) {
      if (p[k] > p[ind]) {
        ind = k
      }
    }
    if (ind > j) {
      let tmp = p[j]
      p[ind] = tmp
    }
  }
  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']
  let t = []
  for (let j = 0; j < p.length; j++) {
    t.push(l[p[j]-1])
  }
  return t
}

",missing logic,incorrect output,byLength,,,"const testByLength = () => {
  console.assert(
    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===
    JSON.stringify([
      'Eight',
      'Five',
      'Four',
      'Three',
      'Two',
      'Two',
      'One',
      'One',
    ])
  )
  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))
  console.assert(
    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])
  )
  console.assert(
    JSON.stringify(byLength([1, -1, 3, 2])) ===
    JSON.stringify(['Three', 'Two', 'One'])
  )
  console.assert(
    JSON.stringify(byLength([9, 4, 8])) ===
    JSON.stringify(['Nine', 'Eight', 'Four'])
  )
}

testByLength()
","const testByLength = () => {
  console.assert(
    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===
    JSON.stringify([
      'Eight',
      'Five',
      'Four',
      'Three',
      'Two',
      'Two',
      'One',
      'One',
    ])
  )
  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))
  console.assert(
    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])
  )
}
testByLength()
",const byLength = (arr),"Given an array of integers, sort the integers that are between 1 and 9 inclusive,
reverse the resulting array, and then replace each digit by its corresponding name from
""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".
For example:
arr = [2, 1, 1, 4, 5, 8, 2, 3]
-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]
-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
If the array is empty, return an empty array:
arr = []
return []
If the array has any strange number ignore it:
arr = [1, -1 , 55]
-> sort arr -> [-1, 1, 55]
-> reverse arr -> [55, 1, -1]
return = ['One']","Write a JavaScript function `const byLength = (arr)` to solve the following problem:
Given an array of integers, sort the integers that are between 1 and 9 inclusive,
reverse the resulting array, and then replace each digit by its corresponding name from
""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".
For example:
arr = [2, 1, 1, 4, 5, 8, 2, 3]
-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]
-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
If the array is empty, return an empty array:
arr = []
return []
If the array has any strange number ignore it:
arr = [1, -1 , 55]
-> sort arr -> [-1, 1, 55]
-> reverse arr -> [55, 1, -1]
return = ['One']"
JavaScript/106,"/* Implement the function f that takes n as a parameter,
  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
  or the sum of numbers from 1 to i otherwise.
  i starts from 1.
  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
  Example:
  f(5) == [1, 2, 6, 24, 15]
  */
const f = (n) => {
","
const f = (n) => {
","  let f = 1
  let p = 0
  let k = []
  for (let i = 1; i <= n; i++) {
    p += i;
    f *= i;
    if (i % 2 == 0) { k.push(f) }
    else { k.push(p) }
  }
  return k
}

","  let f = 1
  let p = 0
  let k = []
  for (let i = 1; i <= n; i++) {
    p += i;
    f *= i;
    if (f % 2 == 0) { k.push(f) }
    else { k.push(p) }
  }
  return k
}

",variable misuse,incorrect output,f,,,"const testF = () => {
  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))
  console.assert(
    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])
  )
  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))
  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))
}

testF()
","const testF = () => {
  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))
}
testF()
",const f = (n),"Implement the function f that takes n as a parameter,
and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
or the sum of numbers from 1 to i otherwise.
i starts from 1.
the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
Example:
f(5) == [1, 2, 6, 24, 15]","Write a JavaScript function `const f = (n)` to solve the following problem:
Implement the function f that takes n as a parameter,
and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
or the sum of numbers from 1 to i otherwise.
i starts from 1.
the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
Example:
f(5) == [1, 2, 6, 24, 15]"
JavaScript/107,"/*
  Given a positive integer n, return a tuple that has the number of even and odd
  integer palindromes that fall within the range(1, n), inclusive.

  Example 1:

      Input: 3
      Output: (1, 2)
      Explanation:
      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

  Example 2:

      Input: 12
      Output: (4, 6)
      Explanation:
      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

  Note:
      1. 1 <= n <= 10^3
      2. returned tuple has the number of even and odd integer palindromes respectively.
  */
const evenOddPalindrome = (n) => {
","
const evenOddPalindrome = (n) => {
","  let e = 0
  let o = 0
  for (let i = 1; i <= n; i++) {
    let k = i.toString()
    let p = 1
    for (let j = 0; j < k.length; j++) {
      if (k[j] != k[k.length - j - 1]) {
        p = 0;
        break;
      }
    }
    if (p == 1) {
      if (k % 2 == 0) { e++ }
      else { o++ }
    }
  }
  return (e, o)
}

","  let e = 0
  let o = 0
  for (let i = 1; i <= n; i++) {
    let k = i.toString()
    let p = 1
    for (let j = 0; j < k.length; j++) {
      if (k[j] != k[k.length - j - 1]) {
        p = 0;
        break;
      }
    }
    if (p == 1) {
      if (k % 2 == 1) { e++ }
      else { o++ }
    }
  }
  return (e, o)
}

",value misuse,incorrect output,evenOddPalindrome,,,"const testEvenOddPalindrome = () => {
  console.assert(
    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))
  )
  console.assert(
    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))
  )
  console.assert(
    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))
  )
  console.assert(
    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))
  )
  console.assert(
    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))
  )
  console.assert(
    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))
  )
  console.assert(
    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))
  )
  console.assert(
    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))
  )
}

testEvenOddPalindrome()
","const testEvenOddPalindrome = () => {
  console.assert(
    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))
  )
  console.assert(
    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))
  )
}
testEvenOddPalindrome()
",const evenOddPalindrome = (n),"Given a positive integer n, return a tuple that has the number of even and odd
integer palindromes that fall within the range(1, n), inclusive.
Example 1:
Input: 3
Output: (1, 2)
Explanation:
Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
Example 2:
Input: 12
Output: (4, 6)
Explanation:
Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
Note:
1. 1 <= n <= 10^3
2. returned tuple has the number of even and odd integer palindromes respectively.","Write a JavaScript function `const evenOddPalindrome = (n)` to solve the following problem:
Given a positive integer n, return a tuple that has the number of even and odd
integer palindromes that fall within the range(1, n), inclusive.
Example 1:
Input: 3
Output: (1, 2)
Explanation:
Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
Example 2:
Input: 12
Output: (4, 6)
Explanation:
Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
Note:
1. 1 <= n <= 10^3
2. returned tuple has the number of even and odd integer palindromes respectively."
JavaScript/108,"/*
  Write a function countNums which takes an array of integers and returns
  the number of elements which has a sum of digits > 0.
  If a number is negative, then its first signed digit will be negative:
  e.g. -123 has signed digits -1, 2, and 3.
  >>> countNums([]) == 0
  >>> countNums([-1, 11, -11]) == 1
  >>> countNums([1, 1, 2]) == 3
  */
const countNums = (arr) => {
","
const countNums = (arr) => {
","  let p = 0
  for (let i = 0; i < arr.length; i++) {
    let h = arr[i]
    if (h > 0) {
      p++;
      continue;
    }
    let k = 0
    h = -h
    while (h >= 10) {
      k += h % 10;
      h = (h - h % 10) / 10;
    }
    k -= h;
    if (k > 0) { p++ }
  }
  return p
}

","  let p = 0
  for (let i = 0; i < arr.length; i++) {
    let h = arr[i]
    if (h > 0) {
      p++;
      continue;
    }
    let k = 0
    h = -h
    while (h >= 10) {
      k += h % 10 * -1;
      h = (h - h % 10) / 10;
    }
    k -= h;
    if (k > 0) { p++ }
  }
  return p
}

",excess logic,incorrect output,countNums,,,"const testCountNums = () => {
  console.assert(countNums([]) === 0)
  console.assert(countNums([-1, -2, 0]) === 0)
  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)
  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)
  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)
  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)
  console.assert(countNums([-0, 1 ** 0]) === 1)
  console.assert(countNums([1]) === 1)
}

testCountNums()
","const testCountNums = () => {
  console.assert(countNums([]) === 0)
  console.assert(countNums([-1, 11, -11]) === 1)
  console.assert(countNums([1, 1, 2]) === 3)
}
testCountNums()
",const countNums = (arr),"Write a function countNums which takes an array of integers and returns
the number of elements which has a sum of digits > 0.
If a number is negative, then its first signed digit will be negative:
e.g. -123 has signed digits -1, 2, and 3.
>>> countNums([]) == 0
>>> countNums([-1, 11, -11]) == 1
>>> countNums([1, 1, 2]) == 3","Write a JavaScript function `const countNums = (arr)` to solve the following problem:
Write a function countNums which takes an array of integers and returns
the number of elements which has a sum of digits > 0.
If a number is negative, then its first signed digit will be negative:
e.g. -123 has signed digits -1, 2, and 3.
>>> countNums([]) == 0
>>> countNums([-1, 11, -11]) == 1
>>> countNums([1, 1, 2]) == 3"
JavaScript/109,"/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
  numbers in the array will be randomly ordered. Your task is to determine if
  it is possible to get an array sorted in non-decreasing order by performing 
  the following operation on the given array:
      You are allowed to perform right shift operation any number of times.
  
  One right shift operation means shifting all elements of the array by one
  position in the right direction. The last element of the array will be moved to
  the starting position in the array i.e. 0th index. 

  If it is possible to obtain the sorted array by performing the above operation
  then return true else return false.
  If the given array is empty then return true.

  Note: The given list is guaranteed to have unique elements.

  For Example:
  
  moveOneBall([3, 4, 5, 1, 2])==>true
  Explanation: By performin 2 right shift operations, non-decreasing order can
               be achieved for the given array.
  moveOneBall([3, 5, 4, 1, 2])==>false
  Explanation:It is not possible to get non-decreasing order for the given
              array by performing any number of right shift operations.
              
  */
const moveOneBall = (arr) => {
","
const moveOneBall = (arr) => {
","  if (arr.length == 0) { return true }
  let k = 0
  let len = arr.length
  for (let i = 0; i < len; i++) {
    let t = 1;
    for (let j = 1; j < len; j++) {
      if (arr[j] < arr[j - 1]) {
        t = 0;
        break;
      }
    }
    if (t == 1) {
      k = 1;
      break;
    }
    arr.push(arr[0]);
    arr.shift()
  }
  if (k == 1) { return true }
  return false
}

","  if (arr.length == 0) { return true }
  let k = 0
  let len = arr.length
  for (let i = 0; i < len; i++) {
    let t = 1;
    for (let j = 1; j < len; j++) {
      if (arr[j] < arr[j - 1]) {
        t = 0;
        break;
      }
    }
    if (t == 1) {
      k = 1;
      break;
    }
    arr.push(arr[j]);
    arr.shift()
  }
  if (k == 1) { return true }
  return false
}

",variable misuse,incorrect output,moveOneBall,,,"const testMoveOneBall = () => {
  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)
  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)
  console.assert(moveOneBall([4, 3, 1, 2]) === false)
  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)
  console.assert(moveOneBall([]) === true)
}

testMoveOneBall()
","const testMoveOneBall = () => {
  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)
  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)
}
testMoveOneBall()
",const moveOneBall = (arr),"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
numbers in the array will be randomly ordered. Your task is to determine if
it is possible to get an array sorted in non-decreasing order by performing
the following operation on the given array:
You are allowed to perform right shift operation any number of times.
One right shift operation means shifting all elements of the array by one
position in the right direction. The last element of the array will be moved to
the starting position in the array i.e. 0th index.
If it is possible to obtain the sorted array by performing the above operation
then return true else return false.
If the given array is empty then return true.
Note: The given list is guaranteed to have unique elements.
For Example:
moveOneBall([3, 4, 5, 1, 2])==>true
Explanation: By performin 2 right shift operations, non-decreasing order can
be achieved for the given array.
moveOneBall([3, 5, 4, 1, 2])==>false
Explanation:It is not possible to get non-decreasing order for the given
array by performing any number of right shift operations.","Write a JavaScript function `const moveOneBall = (arr)` to solve the following problem:
We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
numbers in the array will be randomly ordered. Your task is to determine if
it is possible to get an array sorted in non-decreasing order by performing
the following operation on the given array:
You are allowed to perform right shift operation any number of times.
One right shift operation means shifting all elements of the array by one
position in the right direction. The last element of the array will be moved to
the starting position in the array i.e. 0th index.
If it is possible to obtain the sorted array by performing the above operation
then return true else return false.
If the given array is empty then return true.
Note: The given list is guaranteed to have unique elements.
For Example:
moveOneBall([3, 4, 5, 1, 2])==>true
Explanation: By performin 2 right shift operations, non-decreasing order can
be achieved for the given array.
moveOneBall([3, 5, 4, 1, 2])==>false
Explanation:It is not possible to get non-decreasing order for the given
array by performing any number of right shift operations."
JavaScript/110,"/*In this problem, you will implement a function that takes two lists of numbers,
  and determines whether it is possible to perform an exchange of elements
  between them to make lst1 a list of only even numbers.
  There is no limit on the number of exchanged elements between lst1 and lst2.
  If it is possible to exchange elements between the lst1 and lst2 to make
  all the elements of lst1 to be even, return ""YES"".
  Otherwise, return ""NO"".
  For example:
  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
  It is assumed that the input lists will be non-empty.
  */
const exchange = (lst1, lst2) => {
","
const exchange = (lst1, lst2) => {
","  let k = lst1.length
  let t = 0
  for (let i = 0; i < lst1.length; i++) {
    if (lst1[i] % 2 == 0) { t++ }
  }
  for (let i = 0; i < lst2.length; i++) {
    if (lst2[i] % 2 == 0) { t++ }
  }
  if (t >= k) { return 'YES' }
  return 'NO'
}

","  let k = lst1.length
  let t = 0
  for (let i = 0; i < lst1.length; i++) {
    if (lst1[i] % 2 == 0) { t++ }
  }
  for (let i = 0; i < lst2.length; i++) {
    if (lst2[i] % 2 == 0) { t++ }
  }
  if (k >= t) { return 'YES' }
  return 'NO'
}

",variable misuse,incorrect output,exchange,,,"const testExchange = () => {
  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')
  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')
  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')
  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')
  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')
  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')
  console.assert(exchange([100, 200], [200, 200]) === 'YES')
}

testExchange()
","const testExchange = () => {
  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')
  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')
}
testExchange()
","const exchange = (lst1, lst2)","In this problem, you will implement a function that takes two lists of numbers,
and determines whether it is possible to perform an exchange of elements
between them to make lst1 a list of only even numbers.
There is no limit on the number of exchanged elements between lst1 and lst2.
If it is possible to exchange elements between the lst1 and lst2 to make
all the elements of lst1 to be even, return ""YES"".
Otherwise, return ""NO"".
For example:
exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
It is assumed that the input lists will be non-empty.","Write a JavaScript function `const exchange = (lst1, lst2)` to solve the following problem:
In this problem, you will implement a function that takes two lists of numbers,
and determines whether it is possible to perform an exchange of elements
between them to make lst1 a list of only even numbers.
There is no limit on the number of exchanged elements between lst1 and lst2.
If it is possible to exchange elements between the lst1 and lst2 to make
all the elements of lst1 to be even, return ""YES"".
Otherwise, return ""NO"".
For example:
exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
It is assumed that the input lists will be non-empty."
JavaScript/111,"/*Given a string representing a space separated lowercase letters, return a dictionary
  of the letter with the most repetition and containing the corresponding count.
  If several letters have the same occurrence, return all of them.
  
  Example:
  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
  histogram('a b b a') == {'a': 2, 'b': 2}
  histogram('a b c a b') == {'a': 2, 'b': 2}
  histogram('b b b b a') == {'b': 4}
  histogram('') == {}

  */
const histogram = (test) => {
","
const histogram = (test) => {
","  let d = {}
  let t = test.split(/\s/)
  if (test == '') { t = [] }
  for (m in t) {
    if (t[m] in d) {
      d[t[m]]++
    }
    else {
      d[t[m]] = 1
    }
  }
  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });
  if (s.length == 0) { return {} }
  let g = d[s[0]]
  let l = {}
  for (let ss=0; ss<s.length; ss++) {
    if (d[s[ss]] == g) {
      l[s[ss]] = d[s[ss]]
    }
  }
  return l
}

","  let d = {}
  let t = test.split(/\s/)
  if (test == '') { t = [] }
  for (m in t) {
    if (t[m] in d) {
      d[t[m]]++
    }
    else {
      d[t[m]] = 1
    }
  }
  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });
  if (s.length == 0) { return {} }
  let g = d[s[0]]
  let l = {}
  for (let ss=1; ss<s.length; ss++) {
    if (d[s[ss]] == g) {
      l[s[ss]] = d[s[ss]]
    }
  }
  return l
}

",value misuse,incorrect output,histogram,,,"const testHistogram = () => {
  console.assert(
    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })
  )
  console.assert(
    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })
  )
  console.assert(
    JSON.stringify(histogram('a b c d g')) ===
    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })
  )
  console.assert(
    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })
  )
  console.assert(
    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })
  )
  console.assert(
    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })
  )
  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))
  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))
}

testHistogram()
","const testHistogram = () => {
  console.assert(
    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })
  )
  console.assert(
    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })
  )
  console.assert(
    JSON.stringify(histogram('a b c d g')) ===
    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })
  )
  console.assert(
    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })
  )
  console.assert(
    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })
  )
  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))
}
testHistogram()
",const histogram = (test),"Given a string representing a space separated lowercase letters, return a dictionary
of the letter with the most repetition and containing the corresponding count.
If several letters have the same occurrence, return all of them.
Example:
histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
histogram('a b b a') == {'a': 2, 'b': 2}
histogram('a b c a b') == {'a': 2, 'b': 2}
histogram('b b b b a') == {'b': 4}
histogram('') == {}","Write a JavaScript function `const histogram = (test)` to solve the following problem:
Given a string representing a space separated lowercase letters, return a dictionary
of the letter with the most repetition and containing the corresponding count.
If several letters have the same occurrence, return all of them.
Example:
histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
histogram('a b b a') == {'a': 2, 'b': 2}
histogram('a b c a b') == {'a': 2, 'b': 2}
histogram('b b b b a') == {'b': 4}
histogram('') == {}"
JavaScript/112,"/*Task
  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
  then check if the result string is palindrome.
  A string is called palindrome if it reads the same backward as forward.
  You should return a tuple containing the result string and true/false for the check.
  Example
  For s = ""abcde"", c = ""ae"", the result should be ('bcd',false)
  For s = ""abcdef"", c = ""b""  the result should be ('acdef',false)
  For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',true)
  */
const reverseDelete = (s, c) => {
","
const reverseDelete = (s, c) => {
","  let t = ''
  for (let i = 0; i < s.length; i++) {
    let y = 1
    for (let j = 0; j < c.length; j++) {
      if (s[i] == c[j]) {
        y = 0
      }
    }
    if (y == 1) {
      t += s[i]
    }
  }
  let isPalindrome = true
  for (let i = 0; i < Math.floor(t.length / 2); i++) {
    if (t[i] != t[t.length - i - 1]) {
      isPalindrome = false
      break
    }
  }
  return [t, isPalindrome];
}

","  let t = ''
  for (let i = 0; i < s.length; i++) {
    let y = 1
    for (let j = 0; j < c.length; j++) {
      if (s[i] == c[j]) {
        y = 0
      }
    }
    if (y == 1) {
      t += s[i]
    }
  }
  let isPalindrome = false
  for (let i = 0; i < Math.floor(t.length / 2); i++) {
    if (t[i] != t[t.length - i - 1]) {
      isPalindrome = true
      break
    }
  }
  return [t, isPalindrome];
}

",operator misuse,incorrect output,reverseDelete,,,"const testReverseDelete = () => {
  console.assert(JSON.stringify(reverseDelete('abcde', 'ae')) ===
    JSON.stringify(['bcd', false]))
  console.assert(JSON.stringify(reverseDelete('abcdef', 'b')) ===
    JSON.stringify(['acdef', false]))
  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab')) ===
    JSON.stringify(['cdedc', true]))
  console.assert(JSON.stringify(reverseDelete('dwik', 'w')) ===
    JSON.stringify(['dik', false]))
  console.assert(JSON.stringify(reverseDelete('a', 'a')) ===
    JSON.stringify(['', true]))
  console.assert(JSON.stringify(reverseDelete('abcdedcba', '')) ===
    JSON.stringify(['abcdedcba', true]))
  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v')) ===
    JSON.stringify(['abcdedcba', true]))
  console.assert(JSON.stringify(reverseDelete('vabba', 'v')) ===
    JSON.stringify(['abba', true]))
  console.assert(JSON.stringify(reverseDelete('mamma', 'mia')) ===
    JSON.stringify(['', true]))
}

testReverseDelete()
","const testReverseDelete = () => {
  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===
    JSON.stringify(['bcd', false])
  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===
    JSON.stringify(['acdef', false])
  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===
    JSON.stringify(['cdedc', true])
}
testReverseDelete()
","const reverseDelete = (s, c)","Task
We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
then check if the result string is palindrome.
A string is called palindrome if it reads the same backward as forward.
You should return a tuple containing the result string and true/false for the check.
Example
For s = ""abcde"", c = ""ae"", the result should be ('bcd',false)
For s = ""abcdef"", c = ""b""  the result should be ('acdef',false)
For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',true)","Write a JavaScript function `const reverseDelete = (s, c)` to solve the following problem:
Task
We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
then check if the result string is palindrome.
A string is called palindrome if it reads the same backward as forward.
You should return a tuple containing the result string and true/false for the check.
Example
For s = ""abcde"", c = ""ae"", the result should be ('bcd',false)
For s = ""abcdef"", c = ""b""  the result should be ('acdef',false)
For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',true)"
JavaScript/113,"/*Given a list of strings, where each string consists of only digits, return a list.
  Each element i of the output should be ""the number of odd elements in the
  string i of the input."" where all the i's should be replaced by the number
  of odd digits in the i'th string of the input.

  >>> oddCount(['1234567'])
  [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
  >>> oddCount(['3',""11111111""])
  [""the number of odd elements 1n the str1ng 1 of the 1nput."",
   ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
  */
const oddCount = (lst) => {
","
const oddCount = (lst) => {
","  let d = []
  for (let i = 0; i < lst.length; i++) {
    let p = 0;
    let h = lst[i].length
    for (let j = 0; j < h; j++) {
      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }
    }
    p = p.toString()
    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')
  }
  return d
}

","  let d = []
  for (let i = 0; i < lst.length; i++) {
    let p = 0;
    let h = lst[i].length
    for (let j = 0; j < h; j++) {
      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }
    }
    p = p.toString()
    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of '  p + ' the ' + p + 'nput.')
  }
  return d
}

",excess logic,incorrect output,oddCount,,,"const testOddCount = () => {
  console.assert(
    JSON.stringify(oddCount(['1234567'])) ===
    JSON.stringify([
      'the number of odd elements 4n the str4ng 4 of the 4nput.',
    ])
  )
  console.assert(JSON.stringify(
    oddCount(['3', '11111111'])) ===
    JSON.stringify([
      'the number of odd elements 1n the str1ng 1 of the 1nput.',
      'the number of odd elements 8n the str8ng 8 of the 8nput.',
    ])
  )
  console.assert(
    JSON.stringify(oddCount(['271', '137', '314'])) ===
    JSON.stringify([
      'the number of odd elements 2n the str2ng 2 of the 2nput.',
      'the number of odd elements 3n the str3ng 3 of the 3nput.',
      'the number of odd elements 2n the str2ng 2 of the 2nput.',
    ])
  )
}

testOddCount()
","const testOddCount = () => {
  console.assert(
    JSON.stringify(oddCount(['1234567'])) ===
    JSON.stringify([
      'the number of odd elements 4n the str4ng 4 of the 4nput.',
    ])
  )
  console.assert(JSON.stringify(
    oddCount(['3', '11111111'])) ===
    JSON.stringify([
      'the number of odd elements 1n the str1ng 1 of the 1nput.',
      'the number of odd elements 8n the str8ng 8 of the 8nput.',
    ])
  )
}
testOddCount()
",const oddCount = (lst),"Given a list of strings, where each string consists of only digits, return a list.
Each element i of the output should be ""the number of odd elements in the
string i of the input."" where all the i's should be replaced by the number
of odd digits in the i'th string of the input.
>>> oddCount(['1234567'])
[""the number of odd elements 4n the str4ng 4 of the 4nput.""]
>>> oddCount(['3',""11111111""])
[""the number of odd elements 1n the str1ng 1 of the 1nput."",
""the number of odd elements 8n the str8ng 8 of the 8nput.""]","Write a JavaScript function `const oddCount = (lst)` to solve the following problem:
Given a list of strings, where each string consists of only digits, return a list.
Each element i of the output should be ""the number of odd elements in the
string i of the input."" where all the i's should be replaced by the number
of odd digits in the i'th string of the input.
>>> oddCount(['1234567'])
[""the number of odd elements 4n the str4ng 4 of the 4nput.""]
>>> oddCount(['3',""11111111""])
[""the number of odd elements 1n the str1ng 1 of the 1nput."",
""the number of odd elements 8n the str8ng 8 of the 8nput.""]"
JavaScript/114,"/*
  Given an array of integers nums, find the minimum sum of any non-empty sub-array
  of nums.
  Example
  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
  minSubArraySum([-1, -2, -3]) == -6
  */
const minSubArraySum = (nums) => {
","
const minSubArraySum = (nums) => {
","  let min = nums[0]
  for (let i = 0; i < nums.length; i++) {
    for (let j = i + 1; j <= nums.length; j++) {
      let s = 0;
      for (let k = i; k < j; k++) {
        s += nums[k]
      }
      if (s < min) { min = s }
    }
  }
  return min
}

","  let min = Math.min(nums)
  for (let i = 0; i < nums.length; i++) {
    for (let j = i + 1; j <= nums.length; j++) {
      let s = 0;
      for (let k = i; k < j; k++) {
        s += nums[k]
      }
      if (s < min) { min = s }
    }
  }
  return min
}

",function misuse,incorrect output,minSubarraySum,,,"const testMinSubArraySum = () => {
  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)
  console.assert(minSubArraySum([-1, -2, -3]) === -6)
  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)
  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)
  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)
  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)
  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)
  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)
  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)
  console.assert(minSubArraySum([-10]) === -10)
  console.assert(minSubArraySum([7]) === 7)
  console.assert(minSubArraySum([1, -1]) === -1)
}

testMinSubArraySum()
","const testMinSubArraySum = () => {
  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)
  console.assert(minSubArraySum([-1, -2, -3]) === -6)
}
testMinSubArraySum()
",const minSubArraySum = (nums),"Given an array of integers nums, find the minimum sum of any non-empty sub-array
of nums.
Example
minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
minSubArraySum([-1, -2, -3]) == -6","Write a JavaScript function `const minSubArraySum = (nums)` to solve the following problem:
Given an array of integers nums, find the minimum sum of any non-empty sub-array
of nums.
Example
minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
minSubArraySum([-1, -2, -3]) == -6"
JavaScript/115,"/*
  You are given a rectangular grid of wells. Each row represents a single well,
  and each 1 in a row represents a single unit of water.
  Each well has a corresponding bucket that can be used to extract water from it, 
  and all buckets have the same capacity.
  Your task is to use the buckets to empty the wells.
  Output the number of times you need to lower the buckets.

  Example 1:
      Input: 
          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
          bucket_capacity : 1
      Output: 6

  Example 2:
      Input: 
          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
          bucket_capacity : 2
      Output: 5
  
  Example 3:
      Input: 
          grid : [[0,0,0], [0,0,0]]
          bucket_capacity : 5
      Output: 0

  Constraints:
      * all wells have the same length
      * 1 <= grid.length <= 10^2
      * 1 <= grid[:,1].length <= 10^2
      * grid[i][j] -> 0 | 1
      * 1 <= capacity <= 10
  */
const maxFill = (grid, capacity) => {
","
const maxFill = (grid, capacity) => {
","  let p = 0
  for (let i = 0; i < grid.length; i++) {
    let m = 0
    for (let j = 0; j < grid[i].length; j++) {
      if (grid[i][j] == 1) { m++ }
    }
    while (m > 0) {
      m -= capacity;
      p++;
    }
  }
  return p
}

","  let p = 0
  for (let i = 0; i < grid.length; i++) {
    let m = 0
    for (let j = 1; j < grid[i].length; j++) {
      if (grid[i][j] == 1) { m++ }
    }
    while (m > 0) {
      m -= capacity;
      p++;
    }
  }
  return p
}

",function misuse,incorrect output,maxFill,,,"const testMaxFill = () => {
  console.assert(
    maxFill(
      [
        [0, 0, 1, 0],
        [0, 1, 0, 0],
        [1, 1, 1, 1],
      ],
      1
    ) === 6
  )
  console.assert(
    maxFill(
      [
        [0, 0, 1, 1],
        [0, 0, 0, 0],
        [1, 1, 1, 1],
        [0, 1, 1, 1],
      ],
      2
    ) === 5
  )
  console.assert(
    maxFill(
      [
        [0, 0, 0],
        [0, 0, 0],
      ],
      5
    ) === 0
  )
  console.assert(
    maxFill(
      [
        [1, 1, 1, 1],
        [1, 1, 1, 1],
      ],
      2
    ) === 4
  )
  console.assert(
    maxFill(
      [
        [1, 1, 1, 1],
        [1, 1, 1, 1],
      ],
      9
    ) === 2
  )
}

testMaxFill()
","const testMaxFill = () => {
  console.assert(
    maxFill(
      [
        [0, 0, 1, 0],
        [0, 1, 0, 0],
        [1, 1, 1, 1],
      ],
      1
    ) === 6
  )
  console.assert(
    maxFill(
      [
        [0, 0, 1, 1],
        [0, 0, 0, 0],
        [1, 1, 1, 1],
        [0, 1, 1, 1],
      ],
      2
    ) === 5
  )
  console.assert(
    maxFill(
      [
        [0, 0, 0],
        [0, 0, 0],
      ],
      5
    ) === 0
  )
}
testMaxFill()
","const maxFill = (grid, capacity)","You are given a rectangular grid of wells. Each row represents a single well,
and each 1 in a row represents a single unit of water.
Each well has a corresponding bucket that can be used to extract water from it,
and all buckets have the same capacity.
Your task is to use the buckets to empty the wells.
Output the number of times you need to lower the buckets.
Example 1:
Input:
grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
bucket_capacity : 1
Output: 6
Example 2:
Input:
grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
bucket_capacity : 2
Output: 5
Example 3:
Input:
grid : [[0,0,0], [0,0,0]]
bucket_capacity : 5
Output: 0
Constraints:
* all wells have the same length
* 1 <= grid.length <= 10^2
* 1 <= grid[:,1].length <= 10^2
* grid[i][j] -> 0 | 1
* 1 <= capacity <= 10","Write a JavaScript function `const maxFill = (grid, capacity)` to solve the following problem:
You are given a rectangular grid of wells. Each row represents a single well,
and each 1 in a row represents a single unit of water.
Each well has a corresponding bucket that can be used to extract water from it,
and all buckets have the same capacity.
Your task is to use the buckets to empty the wells.
Output the number of times you need to lower the buckets.
Example 1:
Input:
grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
bucket_capacity : 1
Output: 6
Example 2:
Input:
grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
bucket_capacity : 2
Output: 5
Example 3:
Input:
grid : [[0,0,0], [0,0,0]]
bucket_capacity : 5
Output: 0
Constraints:
* all wells have the same length
* 1 <= grid.length <= 10^2
* 1 <= grid[:,1].length <= 10^2
* grid[i][j] -> 0 | 1
* 1 <= capacity <= 10"
JavaScript/116,"/*
  In this Kata, you have to sort an array of non-negative integers according to
  number of ones in their binary representation in ascending order.
  For similar number of ones, sort based on decimal value.

  It must be implemented like this:
  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
  */
const sortArray = (arr) => {
","
const sortArray = (arr) => {
","  let p = arr
  for (let j = 0; j < p.length; j++) {
    let ind = j
    for (let k = j + 1; k < p.length; k++) {
      let w1 = p[ind].toString(2)
      let f1 = 0
      for (let u = 0; u < w1.length; u++) {
        if (w1[u] == '1') { f1++ }
      }
      let w2 = p[k].toString(2)
      let f2 = 0
      for (let u = 0; u < w2.length; u++) {
        if (w2[u] == '1') { f2++ }
      }
      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {
        ind = k
      }
    }
    if (ind > j) {
      let tmp = p[j]
      p[j] = p[ind]
      p[ind] = tmp
    }
  }
  return p
}

","  let p = arr
  for (let j = 0; j < p.length; j++) {
    let ind = j
    for (let k = j + 1; k < p.length; k++) {
      let w1 = p[ind].toString(2)
      let f1 = 0
      for (let u = 0; u < w1.length; u++) {
        if (w1[u] == '1') { f1++ }
      }
      let w2 = p[ind].toString(2)
      let f2 = 0
      for (let u = 0; u < w2.length; u++) {
        if (w2[u] == '1') { f2++ }
      }
      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {
        ind = k
      }
    }
    if (ind > j) {
      let tmp = p[j]
      p[j] = p[ind]
      p[ind] = tmp
    }
  }
  return arr
}

",variable misuse,incorrect output,sortArray,,,"const testSortArray = () => {
  console.assert(
    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===
    JSON.stringify([1, 2, 4, 3, 5])
  )

  console.assert(
    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===
    JSON.stringify([-4, -2, -6, -5, -3])
  )
  console.assert(
    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===
    JSON.stringify([0, 1, 2, 4, 3])
  )
  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))
  console.assert(
    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===
    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])
  )
  console.assert(
    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===
    JSON.stringify([32, 3, 5, 6, 12, 44])
  )
  console.assert(
    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===
    JSON.stringify([2, 4, 8, 16, 32])
  )
  console.assert(
    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===
    JSON.stringify([2, 4, 8, 16, 32])
  )
}

testSortArray()
","const testSortArray = () => {
  console.assert(
    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===
    JSON.stringify([1, 2, 4, 3, 5])
  )
  console.assert(
    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===
    JSON.stringify([-4, -2, -6, -5, -3])
  )
  console.assert(
    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===
    JSON.stringify([0, 1, 2, 4, 3])
  )
}
testSortArray()
",const sortArray = (arr),"In this Kata, you have to sort an array of non-negative integers according to
number of ones in their binary representation in ascending order.
For similar number of ones, sort based on decimal value.
It must be implemented like this:
>>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
>>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
>>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]","Write a JavaScript function `const sortArray = (arr)` to solve the following problem:
In this Kata, you have to sort an array of non-negative integers according to
number of ones in their binary representation in ascending order.
For similar number of ones, sort based on decimal value.
It must be implemented like this:
>>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
>>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
>>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]"
JavaScript/117,"/*Given a string s and a natural number n, you have been tasked to implement 
  a function that returns a list of all words from string s that contain exactly 
  n consonants, in order these words appear in the string s.
  If the string s is empty then the function should return an empty list.
  Note: you may assume the input string contains only letters and spaces.
  Examples:
  selectWords(""Mary had a little lamb"", 4) ==> [""little""]
  selectWords(""Mary had a little lamb"", 3) ==> [""Mary"")
  selectWords(""simple white space"", 2) ==> []
  selectWords(""Hello world"", 4) ==> [""world""]
  selectWords(""Uncle sam"", 3) ==> [""Uncle""]
  */
const selectWords = (s, n) => {
","
const selectWords = (s, n) => {
","  let t = s.split(/\s/)
  if (s == '') { return [] }
  let k = []
  for (let i = 0; i < t.length; i++) {
    let l = 0
    for (let j = 0; j < t[i].length; j++) {
      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&
        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {
        l++
      }
    }
    if (l == n) { k.push(t[i]) }
  }
  return k
}

","  let t = s.split(/\s/)
  if (s == '') { return [] }
  let k = []
  for (let i = 0; i < t.length; i++) {
    let l = 0
    for (let j = 0; j < t[i].length; j++) {
      if (t[i][j] != 'a' || t[i][j] != 'e' || t[i][j] != 'i' || t[i][j] != 'o' || t[i][j] != 'u' || t[i][j] != 'A' ||
        t[i][j] != 'U' || t[i][j] != 'O' || t[i][j] != 'I' || t[i][j] != 'E') {
        l++
      }
    }
    if (l == n) { k.push(t[i]) }
  }
  return k
}

",operator misuse,incorrect output,selectWords,,,"const testSelectWords = () => {
  console.assert(
    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===
    JSON.stringify(['little'])
  )
  console.assert(
    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])
  )
  console.assert(
    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])
  )
  console.assert(
    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])
  )

  console.assert(
    JSON.stringify(selectWords('a b c d e f', 1)) ===
    JSON.stringify(['b', 'c', 'd', 'f'])
  )

  console.assert(
    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===
    JSON.stringify(['Mary', 'lamb'])
  )
  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))
}

testSelectWords()
","const testSelectWords = () => {
  console.assert(
    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===
    JSON.stringify(['little'])
  )
  console.assert(
    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])
  )
  console.assert(
    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])
  )
  console.assert(
    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])
  )
  console.assert(
    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===
    JSON.stringify(['Mary', 'lamb'])
  )
}
testSelectWords()
","const selectWords = (s, n)","Given a string s and a natural number n, you have been tasked to implement
a function that returns a list of all words from string s that contain exactly
n consonants, in order these words appear in the string s.
If the string s is empty then the function should return an empty list.
Note: you may assume the input string contains only letters and spaces.
Examples:
selectWords(""Mary had a little lamb"", 4) ==> [""little""]
selectWords(""Mary had a little lamb"", 3) ==> [""Mary"")
selectWords(""simple white space"", 2) ==> []
selectWords(""Hello world"", 4) ==> [""world""]
selectWords(""Uncle sam"", 3) ==> [""Uncle""]","Write a JavaScript function `const selectWords = (s, n)` to solve the following problem:
Given a string s and a natural number n, you have been tasked to implement
a function that returns a list of all words from string s that contain exactly
n consonants, in order these words appear in the string s.
If the string s is empty then the function should return an empty list.
Note: you may assume the input string contains only letters and spaces.
Examples:
selectWords(""Mary had a little lamb"", 4) ==> [""little""]
selectWords(""Mary had a little lamb"", 3) ==> [""Mary"")
selectWords(""simple white space"", 2) ==> []
selectWords(""Hello world"", 4) ==> [""world""]
selectWords(""Uncle sam"", 3) ==> [""Uncle""]"
JavaScript/118,"/*You are given a word. Your task is to find the closest vowel that stands between 
  two consonants from the right side of the word (case sensitive).
  
  Vowels in the beginning and ending doesn't count. Return empty string if you didn't
  find any vowel met the above condition. 

  You may assume that the given string contains English letter only.

  Example:
  getClosestVowel(""yogurt"") ==> ""u""
  getClosestVowel(""FULL"") ==> ""U""
  getClosestVowel(""quick"") ==> """"
  getClosestVowel(""ab"") ==> """"
  */
const getClosestVowel = (word) => {
","
const getClosestVowel = (word) => {
","  for (let i = word.length - 2; i > 0; i--) {
    if (
      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&
        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')
      &&
      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&
        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')
      &&
      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&
        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')
    ) {
      return word[i]
    }
  }
  return ''
}

","  for (let i = word.length - 2; i > 0; i--) {
    if (
      (word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&
        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')
      &&
      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&
        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')
      &&
      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&
        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')
    ) {
      return word[i]
    }
  }
  return ' '
}

",excess logic,incorrect output,getClosestVowel,,,"const testGetClosestVowel = () => {
  console.assert(getClosestVowel('yogurt') === 'u')
  console.assert(getClosestVowel('full') === 'u')
  console.assert(getClosestVowel('easy') === '')
  console.assert(getClosestVowel('eAsy') === '')
  console.assert(getClosestVowel('ali') === '')
  console.assert(getClosestVowel('bad') === 'a')
  console.assert(getClosestVowel('most') === 'o')
  console.assert(getClosestVowel('ab') === '')
  console.assert(getClosestVowel('ba') === '')
  console.assert(getClosestVowel('quick') === '')
  console.assert(getClosestVowel('anime') === 'i')
  console.assert(getClosestVowel('Asia') === '')
  console.assert(getClosestVowel('Above') === 'o')
}

testGetClosestVowel()
","const testGetClosestVowel = () => {
  console.assert(getClosestVowel('yogurt') === 'u')
  console.assert(getClosestVowel('FULL') === 'U')
  console.assert(getClosestVowel('ab') === '')
  console.assert(getClosestVowel('quick') === '')
}
testGetClosestVowel()
",const getClosestVowel = (word),"You are given a word. Your task is to find the closest vowel that stands between
two consonants from the right side of the word (case sensitive).
Vowels in the beginning and ending doesn't count. Return empty string if you didn't
find any vowel met the above condition.
You may assume that the given string contains English letter only.
Example:
getClosestVowel(""yogurt"") ==> ""u""
getClosestVowel(""FULL"") ==> ""U""
getClosestVowel(""quick"") ==> """"
getClosestVowel(""ab"") ==> """"","Write a JavaScript function `const getClosestVowel = (word)` to solve the following problem:
You are given a word. Your task is to find the closest vowel that stands between
two consonants from the right side of the word (case sensitive).
Vowels in the beginning and ending doesn't count. Return empty string if you didn't
find any vowel met the above condition.
You may assume that the given string contains English letter only.
Example:
getClosestVowel(""yogurt"") ==> ""u""
getClosestVowel(""FULL"") ==> ""U""
getClosestVowel(""quick"") ==> """"
getClosestVowel(""ab"") ==> """""
JavaScript/119,"/* You are given a list of two strings, both strings consist of open
  parentheses '(' or close parentheses ')' only.
  Your job is to check if it is possible to concatenate the two strings in
  some order, that the resulting string will be good.
  A string S is considered to be good if and only if all parentheses in S
  are balanced. For example: the string '(())()' is good, while the string
  '())' is not.
  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
  Examples:
  matchParens(['()(', ')']) == 'Yes'
  matchParens([')', ')']) == 'No'
  */
const matchParens = (lst) => {
","
const matchParens = (lst) => {
","  let w1 = lst[0] + lst[1]
  let y = 0
  let u = 1
  for (let i = 0; i < w1.length; i++) {
    if (w1[i] == '(') { y++ }
    else { y-- }
    if (y < 0) {
      u = 0;
      break;
    }
  }
  if (u == 1 && y == 0) { return 'Yes' }
  w1 = lst[1] + lst[0]
  y = 0
  u = 1
  for (let i = 0; i < w1.length; i++) {
    if (w1[i] == '(') { y++ }
    else { y-- }
    if (y < 0) {
      u = 0;
      break;
    }
  }
  if (u == 1 && y == 0) { return 'Yes' }
  return 'No'
}

","  let w1 = lst[0] + lst[1]
  let y = 0
  let u = 1
  for (let i = 0; i < w1.length; i++) {
    if (w1[i] == '(') { y++ }
    else { y-- }
    if (y < 0) {
      u = 0;
      break;
    }
  }
  if (u == 1 && y == 0) { return 'yes' }
  w1 = lst[1] + lst[0]
  y = 0
  u = 1
  for (let i = 0; i < w1.length; i++) {
    if (w1[i] == '(') { y++ }
    else { y-- }
    if (y < 0) {
      u = 0;
      break;
    }
  }
  if (u == 1 && y == 0) { return 'no' }
  return 'yes'
}

",value misuse,incorrect output,matchParens,,,"const testMatchParens = () => {
  console.assert(matchParens(['()(', ')']) === 'Yes')
  console.assert(matchParens([')', ')']) === 'No')
  console.assert(matchParens(['(()(())', '())())']) === 'No')
  console.assert(matchParens([')())', '(()()(']) === 'Yes')
  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')
  console.assert(matchParens(['()', '())']) === 'No')
  console.assert(matchParens(['(()(', '()))()']) === 'Yes')
  console.assert(matchParens(['((((', '((())']) === 'No')
  console.assert(matchParens([')(()', '(()(']) === 'No')
  console.assert(matchParens([')(', ')(']) === 'No')
  console.assert(matchParens(['(', ')']) === 'Yes')
  console.assert(matchParens([')', '(']) === 'Yes')
}
testMatchParens()
","const testMatchParens = () => {
  console.assert(matchParens(['()(', ')']) === 'Yes')
  console.assert(matchParens([')', ')']) === 'No')
}
testMatchParens()
",const matchParens = (lst),"You are given a list of two strings, both strings consist of open
parentheses '(' or close parentheses ')' only.
Your job is to check if it is possible to concatenate the two strings in
some order, that the resulting string will be good.
A string S is considered to be good if and only if all parentheses in S
are balanced. For example: the string '(())()' is good, while the string
'())' is not.
Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
Examples:
matchParens(['()(', ')']) == 'Yes'
matchParens([')', ')']) == 'No'","Write a JavaScript function `const matchParens = (lst)` to solve the following problem:
You are given a list of two strings, both strings consist of open
parentheses '(' or close parentheses ')' only.
Your job is to check if it is possible to concatenate the two strings in
some order, that the resulting string will be good.
A string S is considered to be good if and only if all parentheses in S
are balanced. For example: the string '(())()' is good, while the string
'())' is not.
Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
Examples:
matchParens(['()(', ')']) == 'Yes'
matchParens([')', ')']) == 'No'"
JavaScript/120,"/*
  Given an array arr of integers and a positive integer k, return a sorted list 
  of length k with the maximum k numbers in arr.

  Example 1:

      Input: arr = [-3, -4, 5], k = 3
      Output: [-4, -3, 5]

  Example 2:

      Input: arr = [4, -4, 4], k = 2
      Output: [4, 4]

  Example 3:

      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
      Output: [2]

  Note:
      1. The length of the array will be in the range of [1, 1000].
      2. The elements in the array will be in the range of [-1000, 1000].
      3. 0 <= k <= len(arr)
  */
const maximum = (arr, k) => {
","
const maximum = (arr, k) => {
","  let p = arr
  for (let j = 0; j < p.length; j++) {
    let ind = j
    for (let k = j + 1; k < p.length; k++) {
      if (p[k] < p[ind]) {
        ind = k
      }
    }
    if (ind > j) {
      let tmp = p[j]
      p[j] = p[ind]
      p[ind] = tmp
    }
  }
  if (k == 0) { return [] }
  return p.slice(-k)
}

","  let p = arr
  for (let j = 0; j < p.length; j++) {
    let ind = j
    for (let k = j + 1; k < p.length; k++) {
      if (p[k] < p[ind]) {
        ind = k
      }
    }
    if (ind > j) {
      let tmp = p[j]
      p[j] = p[ind]
      p[ind] = tmp
      p[j] = p[ind]
    }
  }
  if (k == 0) { return [] }
  return p.slice(-k)
}

",excess logic,incorrect output,maximum,,,"const testMaximum = () => {
  console.assert(
    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])
  )
  console.assert(
    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])
  )
  console.assert(
    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])
  )
  console.assert(
    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===
    JSON.stringify([2, 20, 123])
  )
  console.assert(
    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===
    JSON.stringify([0, 1, 2, 20])
  )
  console.assert(
    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===
    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])
  )
  console.assert(
    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])
  )
  console.assert(
    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])
  )
  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))
  console.assert(
    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])
  )
  console.assert(
    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===
    JSON.stringify([])
  )
}

testMaximum()
","const testMaximum = () => {
  console.assert(
    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])
  )
  console.assert(
    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])
  )
  console.assert(
    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])
  )
}
testMaximum()
","const maximum = (arr, k)","Given an array arr of integers and a positive integer k, return a sorted list
of length k with the maximum k numbers in arr.
Example 1:
Input: arr = [-3, -4, 5], k = 3
Output: [-4, -3, 5]
Example 2:
Input: arr = [4, -4, 4], k = 2
Output: [4, 4]
Example 3:
Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
Output: [2]
Note:
1. The length of the array will be in the range of [1, 1000].
2. The elements in the array will be in the range of [-1000, 1000].
3. 0 <= k <= len(arr)","Write a JavaScript function `const maximum = (arr, k)` to solve the following problem:
Given an array arr of integers and a positive integer k, return a sorted list
of length k with the maximum k numbers in arr.
Example 1:
Input: arr = [-3, -4, 5], k = 3
Output: [-4, -3, 5]
Example 2:
Input: arr = [4, -4, 4], k = 2
Output: [4, 4]
Example 3:
Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
Output: [2]
Note:
1. The length of the array will be in the range of [1, 1000].
2. The elements in the array will be in the range of [-1000, 1000].
3. 0 <= k <= len(arr)"
JavaScript/121,"/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
  

  Examples
  solution([5, 8, 7, 1]) ==> 12
  solution([3, 3, 3, 3, 3]) ==> 9
  solution([30, 13, 24, 321]) ==>0
  */
const solution = (lst) => {
","
const solution = (lst) => {
","  let p = 0
  for (let i = 0; i < lst.length; i += 2) {
    if (lst[i] % 2 == 1) {
      p += lst[i]
    }
  }
  return p
}

","  let p = 1
  for (let i = 0; i < lst.length; i += 2) {
    if (lst[i] % 2 == 1) {
      p += lst[i]
    }
  }
  return p
}

",value misuse,incorrect output,solution,,,"const testSolution = () => {
  console.assert(solution([5, 8, 7, 1]) === 12)
  console.assert(solution([3, 3, 3, 3, 3]) === 9)
  console.assert(solution([30, 13, 24, 321]) === 0)
  console.assert(solution([5, 9]) === 5)
  console.assert(solution([2, 4, 8]) === 0)
  console.assert(solution([30, 13, 23, 32]) === 23)
  console.assert(solution([3, 13, 2, 9]) === 3)
}

testSolution()
","const testSolution = () => {
  console.assert(solution([5, 8, 7, 1]) === 12)
  console.assert(solution([3, 3, 3, 3, 3]) === 9)
  console.assert(solution([30, 13, 24, 321]) === 0)
}
testSolution()
",const solution = (lst),"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
Examples
solution([5, 8, 7, 1]) ==> 12
solution([3, 3, 3, 3, 3]) ==> 9
solution([30, 13, 24, 321]) ==>0","Write a JavaScript function `const solution = (lst)` to solve the following problem:
Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
Examples
solution([5, 8, 7, 1]) ==> 12
solution([3, 3, 3, 3, 3]) ==> 9
solution([30, 13, 24, 321]) ==>0"
JavaScript/122,"/*
  Given a non-empty array of integers arr and an integer k, return
  the sum of the elements with at most two digits from the first k elements of arr.

  Example:

      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
      Output: 24 # sum of 21 + 3

  Constraints:
      1. 1 <= len(arr) <= 100
      2. 1 <= k <= len(arr)
  */
const addElements = (arr, k) => {
","
const addElements = (arr, k) => {
","  let p = 0
  for (let i = 0; i < k; i++) {
    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }
  }
  return p
}

","  let p = 0
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }
  }
  return p
}

",missing logic,incorrect output,addElements,,,"const testAddElements = () => {
  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)
  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)
  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)
  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)
  console.assert(addElements([1], 1) === 1)
}

testAddElements()
","const testAddElements = () => {
  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)
}
testAddElements()
","const addElements = (arr, k)","Given a non-empty array of integers arr and an integer k, return
the sum of the elements with at most two digits from the first k elements of arr.
Example:
Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
Output: 24 # sum of 21 + 3
Constraints:
1. 1 <= len(arr) <= 100
2. 1 <= k <= len(arr)","Write a JavaScript function `const addElements = (arr, k)` to solve the following problem:
Given a non-empty array of integers arr and an integer k, return
the sum of the elements with at most two digits from the first k elements of arr.
Example:
Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
Output: 24 # sum of 21 + 3
Constraints:
1. 1 <= len(arr) <= 100
2. 1 <= k <= len(arr)"
JavaScript/123,"/*
  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
  as follows: start with any positive integer n. Then each term is obtained from the 
  previous term as follows: if the previous term is even, the next term is one half of 
  the previous term. If the previous term is odd, the next term is 3 times the previous
  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

  Note: 
      1. Collatz(1) is [1].
      2. returned list sorted in increasing order.

  For example:
  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
  */
const getOddCollatz = (n) => {
","
const getOddCollatz = (n) => {
","  let p = []
  let t = n
  while (1) {
    let u = 0
    for (let i = 0; i < p.length; i++) {
      if (t == p[i]) {
        u = 1
        break;
      }
    }
    if (u == 1) { break }
    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }
    else { t = t / 2 }
  }
  for (let j = 0; j < p.length; j++) {
    let ind = j
    for (let k = j + 1; k < p.length; k++) {
      if (p[k] < p[ind]) {
        ind = k
      }
    }
    if (ind > j) {
      let tmp = p[j]
      p[j] = p[ind]
      p[ind] = tmp
    }
  }
  return p
}

","  let p = []
  let t = n
  while (1) {
    let u = 0
    for (let i = 0; i < p.length; i++) {
      if (t == p[i]) {
        u = 1
        break;
      }
    }
    if (u == 1) { break }
    if (t % 2 == 1) { p.push(t); t = 2 * t + 1 }
    else { t = t / 2 }
  }
  for (let j = 0; j < p.length; j++) {
    let ind = j
    for (let k = j + 1; k < p.length; k++) {
      if (p[k] < p[ind]) {
        ind = k
      }
    }
    if (ind > j) {
      let tmp = p[j]
      p[j] = p[ind]
      p[ind] = tmp
    }
  }
  return p
}

",value misuse,incorrect output,getOddCollatz,,,"const testGetOddCollatz = () => {
  console.assert(
    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])
  )
  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))
  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))
  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))
}

testGetOddCollatz()
","const testGetOddCollatz = () => {
  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))
}
testGetOddCollatz()
",const getOddCollatz = (n),"Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.
The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
as follows: start with any positive integer n. Then each term is obtained from the
previous term as follows: if the previous term is even, the next term is one half of
the previous term. If the previous term is odd, the next term is 3 times the previous
term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.
Note:
1. Collatz(1) is [1].
2. returned list sorted in increasing order.
For example:
getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.","Write a JavaScript function `const getOddCollatz = (n)` to solve the following problem:
Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.
The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
as follows: start with any positive integer n. Then each term is obtained from the
previous term as follows: if the previous term is even, the next term is one half of
the previous term. If the previous term is odd, the next term is 3 times the previous
term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.
Note:
1. Collatz(1) is [1].
2. returned list sorted in increasing order.
For example:
getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5."
JavaScript/124,"/*You have to write a function which validates a given date string and
  returns true if the date is valid otherwise false.
  The date is valid if all of the following rules are satisfied:
  1. The date string is not empty.
  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
  3. The months should not be less than 1 or higher than 12.
  4. The date should be in the format: mm-dd-yyyy

  for example: 
  validDate('03-11-2000') => true

  validDate('15-01-2012') => false

  validDate('04-0-2040') => false

  validDate('06-04-2020') => true

  validDate('06/04/2020') => false
  */
const validDate = (date) => {
","
const validDate = (date) => {
","  let t = date.split(/-/)
  if (t.length != 3) { return false }
  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }
  if (t[0] == 2 && t[1] > 29) { return false }
  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }
  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }
  return true
}

","  let t = date.split(/-/)
  if (t.length != 3) { return false }
  if (t[1] < 1 || t[1] > 12 || t[0] < 1) { return false }
  if (t[1] == 2 && t[0] > 29) { return false }
  if ((t[1] == 1 || t[1] == 3 || t[1] == 5 || t[1] == 7 || t[1] == 8 || t[1] == 10 || t[1] == 12) && t[0] > 31) { return false }
  if ((t[1] == 4 || t[1] == 6 || t[1] == 9 || t[1] == 11) && t[0] > 30) { return false }
  return true
}

",variable misuse,incorrect output,validDate,,,"const testValidDate = () => {
  console.assert(validDate('03-11-2000') === true)
  console.assert(validDate('15-01-2012') === false)
  console.assert(validDate('04-0-2040') === false)
  console.assert(validDate('06-04-2020') === true)
  console.assert(validDate('01-01-2007') === true)
  console.assert(validDate('03-32-2011') === false)
  console.assert(validDate('') === false)
  console.assert(validDate('04-31-3000') === false)
  console.assert(validDate('06-06-2005') === true)
  console.assert(validDate('21-31-2000') === false)
  console.assert(validDate('04-12-2003') === true)
  console.assert(validDate('04122003') === false)
  console.assert(validDate('20030412') === false)
  console.assert(validDate('2003-04') === false)
  console.assert(validDate('2003-04-12') === false)
  console.assert(validDate('04-2003') === false)
}

testValidDate()
","const testValidDate = () => {
  console.assert(validDate('03-11-2000') === true)
  console.assert(validDate('15-01-2012') === false)
  console.assert(validDate('04-0-2040') === false)
  console.assert(validDate('06-04-2020') === true)
  console.assert(validDate('06/04/2020') === false)
}
testValidDate()
",const validDate = (date),"You have to write a function which validates a given date string and
returns true if the date is valid otherwise false.
The date is valid if all of the following rules are satisfied:
1. The date string is not empty.
2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
3. The months should not be less than 1 or higher than 12.
4. The date should be in the format: mm-dd-yyyy
for example:
validDate('03-11-2000') => true
validDate('15-01-2012') => false
validDate('04-0-2040') => false
validDate('06-04-2020') => true
validDate('06/04/2020') => false","Write a JavaScript function `const validDate = (date)` to solve the following problem:
You have to write a function which validates a given date string and
returns true if the date is valid otherwise false.
The date is valid if all of the following rules are satisfied:
1. The date string is not empty.
2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
3. The months should not be less than 1 or higher than 12.
4. The date should be in the format: mm-dd-yyyy
for example:
validDate('03-11-2000') => true
validDate('15-01-2012') => false
validDate('04-0-2040') => false
validDate('06-04-2020') => true
validDate('06/04/2020') => false"
JavaScript/125,"/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
  Examples
  splitWords(""Hello world!"") ➞ [""Hello"", ""world!""]
  splitWords(""Hello,world!"") ➞ [""Hello"", ""world!""]
  splitWords(""abcdef"") == 3
  */
const splitWords = (txt) => {
","
const splitWords = (txt) => {
","  let t = txt.split(/\s/)
  if (t.length > 1) {
    return t
  } else {
    t = txt.split(/,/)
    if (t.length > 1) {
      return t
    } else {
      let p = 0
      for (let i = 0; i < txt.length; i++) {
        let m = txt[i].charCodeAt()
        if (m >= 97 && m <= 122 && m % 2 == 0) {
          p++
        }
      }
      return p
    }
  }
}

","  let t = txt.split(/,/)
  if (t.length > 1) {
    return t
  } else {
    t = txt.split(/\s/)
    if (t.length > 1) {
      return t
    } else {
      let p = 0
      for (let i = 0; i < txt.length; i++) {
        let m = txt[i].charCodeAt()
        if (m >= 97 && m <= 122 && m % 2 == 0) {
          p++
        }
      }
      return p
    }
  }
}

",value misuse,incorrect output,splitWords,,,"const testSplitWords = () => {
  console.assert(
    JSON.stringify(splitWords('Hello world!')) ===
    JSON.stringify(['Hello', 'world!'])
  )
  console.assert(
    JSON.stringify(splitWords('Hello,world!')) ===
    JSON.stringify(['Hello', 'world!'])
  )
  console.assert(
    JSON.stringify(splitWords('Hello world,!')) ===
    JSON.stringify(['Hello', 'world,!'])
  )
  console.assert(
    JSON.stringify(splitWords('Hello,Hello,world !')) ===
    JSON.stringify(['Hello,Hello,world', '!'])
  )
  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))
  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))
  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))
  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))
}

testSplitWords()
","const testSplitWords = () => {
  console.assert(
    JSON.stringify(splitWords('Hello world!')) ===
    JSON.stringify(['Hello', 'world!'])
  )
  console.assert(
    JSON.stringify(splitWords('Hello,world!')) ===
    JSON.stringify(['Hello', 'world!'])
  )
  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))
}
testSplitWords()
",const splitWords = (txt),"Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
Examples
splitWords(""Hello world!"") ➞ [""Hello"", ""world!""]
splitWords(""Hello,world!"") ➞ [""Hello"", ""world!""]
splitWords(""abcdef"") == 3","Write a JavaScript function `const splitWords = (txt)` to solve the following problem:
Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
Examples
splitWords(""Hello world!"") ➞ [""Hello"", ""world!""]
splitWords(""Hello,world!"") ➞ [""Hello"", ""world!""]
splitWords(""abcdef"") == 3"
JavaScript/126,"/* Given a list of numbers, return whether or not they are sorted
  in ascending order. If list has more than 1 duplicate of the same
  number, return false. Assume no negative numbers and only integers.
  Examples
  isSorted([5]) ➞ true
  isSorted([1, 2, 3, 4, 5]) ➞ true
  isSorted([1, 3, 2, 4, 5]) ➞ false
  isSorted([1, 2, 3, 4, 5, 6]) ➞ true
  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true
  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false
  isSorted([1, 2, 2, 3, 3, 4]) ➞ true
  isSorted([1, 2, 2, 2, 3, 4]) ➞ false
  */
const isSorted = (lst) => {
","
const isSorted = (lst) => {
","  if (lst.length == 0) { return true }
  let dup = 1
  let pre = lst[0]
  for (let i = 1; i < lst.length; i++) {
    if (lst[i] < pre) { return false }
    if (lst[i] == pre) {
      dup += 1;
      if (dup == 3) { return false }
    } else {
      pre = lst[i]
      dup = 1
    }
  }
  return true
}

","  if (lst.length == 0) { return true }
  let dup = 1
  let pre = lst[0]
  for (let i = 1; i < lst.length; i++) {
    if (lst[i] < pre) { return false }
    if (lst[i] == pre) {
      dup += 1;
      if (dup == 3) { return false }
    } else {
      pre = lst[i]
    }
  }
  return true
}

",missing logic,incorrect output,isSorted,,,"const testIsSorted = () => {
  console.assert(isSorted([5]) === true)
  console.assert(isSorted([1, 2, 3, 4, 5]) === true)
  console.assert(isSorted([1, 3, 2, 4, 5]) === false)
  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)
  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)
  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)
  console.assert(isSorted([]) === true)
  console.assert(isSorted([1]) === true)
  console.assert(isSorted([3, 2, 1]) === false)
  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)
  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)
  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)
  console.assert(isSorted([1, 2, 3, 4]) === true)
}

testIsSorted()
","const testIsSorted = () => {
  console.assert(isSorted([5]) === true)
  console.assert(isSorted([1, 2, 3, 4, 5]) === true)
  console.assert(isSorted([1, 3, 2, 4, 5]) === false)
  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)
  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)
  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)
  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)
  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)
}
testIsSorted()
",const isSorted = (lst),"Given a list of numbers, return whether or not they are sorted
in ascending order. If list has more than 1 duplicate of the same
number, return false. Assume no negative numbers and only integers.
Examples
isSorted([5]) ➞ true
isSorted([1, 2, 3, 4, 5]) ➞ true
isSorted([1, 3, 2, 4, 5]) ➞ false
isSorted([1, 2, 3, 4, 5, 6]) ➞ true
isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true
isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false
isSorted([1, 2, 2, 3, 3, 4]) ➞ true
isSorted([1, 2, 2, 2, 3, 4]) ➞ false","Write a JavaScript function `const isSorted = (lst)` to solve the following problem:
Given a list of numbers, return whether or not they are sorted
in ascending order. If list has more than 1 duplicate of the same
number, return false. Assume no negative numbers and only integers.
Examples
isSorted([5]) ➞ true
isSorted([1, 2, 3, 4, 5]) ➞ true
isSorted([1, 3, 2, 4, 5]) ➞ false
isSorted([1, 2, 3, 4, 5, 6]) ➞ true
isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true
isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false
isSorted([1, 2, 2, 3, 3, 4]) ➞ true
isSorted([1, 2, 2, 2, 3, 4]) ➞ false"
JavaScript/127,"/*You are given two intervals,
  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
  The given intervals are closed which means that the interval (start, end)
  includes both start and end.
  For each given interval, it is assumed that its start is less or equal its end.
  Your task is to determine whether the length of intersection of these two 
  intervals is a prime number.
  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
  which its length is 1, which not a prime number.
  If the length of the intersection is a prime number, return ""YES"",
  otherwise, return ""NO"".
  If the two intervals don't intersect, return ""NO"".


  [input/output] samples:
  intersection((1, 2), (2, 3)) ==> ""NO""
  intersection((-1, 1), (0, 4)) ==> ""NO""
  intersection((-3, -1), (-5, 5)) ==> ""YES""
  */
const intersection = (interval1, interval2) => {
","
const intersection = (interval1, interval2) => {
","  let lo = interval1[0]
  if (interval2[0] > lo) { lo = interval2[0] }
  let hi = interval1[1]
  if (interval2[1] < hi) { hi = interval2[1] }
  let len = 0
  if (hi > lo) { len = hi - lo }
  if (len == 1 || len == 0) { return 'NO' }
  for (let i = 2; i * i <= len; i++) {
    if (len % i == 0) { return 'NO' }
  }
  return 'YES'
}

","  let lo = interval1[0]
  if (interval2[0] > lo) { lo = interval2[0] }
  let hi = interval1[1]
  if (interval2[1] < hi) { hi = interval2[1] }
  let len = 0
  if (hi > lo) { len = hi }
  if (len == 1 || len == 0) { return 'NO' }
  return 'YES'
}

",missing logic,incorrect output,intersection,,,"const testIntersection = () => {
  console.assert(intersection([1, 2], [2, 3]) === 'NO')
  console.assert(intersection([-1, 1], [0, 4]) === 'NO')
  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')
  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')
  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')
  console.assert(intersection([1, 2], [3, 5]) === 'NO')
  console.assert(intersection([1, 2], [1, 2]) === 'NO')
  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')
}

testIntersection()
","const testIntersection = () => {
  console.assert(intersection([1, 2], [2, 3]) === 'NO')
  console.assert(intersection([-1, 1], [0, 4]) === 'NO')
  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')
}
testIntersection()
","const intersection = (interval1, interval2)","You are given two intervals,
where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
The given intervals are closed which means that the interval (start, end)
includes both start and end.
For each given interval, it is assumed that its start is less or equal its end.
Your task is to determine whether the length of intersection of these two
intervals is a prime number.
Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
which its length is 1, which not a prime number.
If the length of the intersection is a prime number, return ""YES"",
otherwise, return ""NO"".
If the two intervals don't intersect, return ""NO"".
[input/output] samples:
intersection((1, 2), (2, 3)) ==> ""NO""
intersection((-1, 1), (0, 4)) ==> ""NO""
intersection((-3, -1), (-5, 5)) ==> ""YES""","Write a JavaScript function `const intersection = (interval1, interval2)` to solve the following problem:
You are given two intervals,
where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
The given intervals are closed which means that the interval (start, end)
includes both start and end.
For each given interval, it is assumed that its start is less or equal its end.
Your task is to determine whether the length of intersection of these two
intervals is a prime number.
Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
which its length is 1, which not a prime number.
If the length of the intersection is a prime number, return ""YES"",
otherwise, return ""NO"".
If the two intervals don't intersect, return ""NO"".
[input/output] samples:
intersection((1, 2), (2, 3)) ==> ""NO""
intersection((-1, 1), (0, 4)) ==> ""NO""
intersection((-3, -1), (-5, 5)) ==> ""YES"""
JavaScript/128,"/*
  You are given an array arr of integers and you need to return
  sum of magnitudes of integers multiplied by product of all signs
  of each number in the array, represented by 1, -1 or 0.
  Note: return null for empty arr.

  Example:
  >>> prodSigns([1, 2, 2, -4]) == -9
  >>> prodSigns([0, 1]) == 0
  >>> prodSigns([]) == null
  */
const prodSigns = (arr) => {
","
const prodSigns = (arr) => {
","  if (arr.length == 0) { return null }
  let n = 1
  let s = 0
  for (let i = 0; i < arr.length; i++) {
    s += arr[i]
    if (arr[i] == 0) { return 0 }
    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }
  }
  return s * n
}

","  if (arr.length == 0) { return null }
  let n = 1
  let s = 0
  for (let i = 0; i < arr.length; i++) {
    s += arr[i]
    if (arr[i] == 0) { return 0 }
    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }
  }
  return s * n * 2
}

",excess logic,incorrect output,prodSigns,,,"const testProdSigns = () => {
  console.assert(prodSigns([1, 2, 2, -4]) === -9)
  console.assert(prodSigns([0, 1]) === 0)
  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)
  console.assert(prodSigns([]) === null)
  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)
  console.assert(prodSigns([-1, 1, -1, 1]) === 4)
  console.assert(prodSigns([-1, 1, 1, 1]) === -4)
  console.assert(prodSigns([-1, 1, 1, 0]) === 0)
}

testProdSigns()
","const testProdSigns = () => {
  console.assert(prodSigns([1, 2, 2, -4]) === -9)
  console.assert(prodSigns([0, 1]) === 0)
  console.assert(prodSigns([]) === null)
}
testProdSigns()
",const prodSigns = (arr),"You are given an array arr of integers and you need to return
sum of magnitudes of integers multiplied by product of all signs
of each number in the array, represented by 1, -1 or 0.
Note: return null for empty arr.
Example:
>>> prodSigns([1, 2, 2, -4]) == -9
>>> prodSigns([0, 1]) == 0
>>> prodSigns([]) == null","Write a JavaScript function `const prodSigns = (arr)` to solve the following problem:
You are given an array arr of integers and you need to return
sum of magnitudes of integers multiplied by product of all signs
of each number in the array, represented by 1, -1 or 0.
Note: return null for empty arr.
Example:
>>> prodSigns([1, 2, 2, -4]) == -9
>>> prodSigns([0, 1]) == 0
>>> prodSigns([]) == null"
JavaScript/129,"/*
  Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
  each cell of the grid contains a value. Every integer in the range [1, N * N]
  inclusive appears exactly once on the cells of the grid.

  You have to find the minimum path of length k in the grid. You can start
  from any cell, and in each step you can move to any of the neighbor cells,
  in other words, you can go to cells which share an edge with you current
  cell.
  Please note that a path of length k means visiting exactly k cells (not
  necessarily distinct).
  You CANNOT go off the grid.
  A path A (of length k) is considered less than a path B (of length k) if
  after making the ordered lists of the values on the cells that A and B go
  through (let's call them lst_A and lst_B), lst_A is lexicographically less
  than lst_B, in other words, there exist an integer index i (1 <= i <= k)
  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
  lst_A[j] = lst_B[j].
  It is guaranteed that the answer is unique.
  Return an ordered list of the values on the cells that the minimum path go through.

  Examples:

      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
      Output: [1, 2, 1]

      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
      Output: [1]
  */
const minPath = (grid, k) => {
","
const minPath = (grid, k) => {
","  let m = 0
  let n = 0
  for (let i = 0; i < grid.length; i++) {
    for (let j = 0; j < grid.length; j++) {
      if (grid[i][j] == 1) {
        m = i;
        n = j;
        break;
      }
    }
  }
  let min = grid.length * grid.length
  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }
  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }
  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }
  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }
  let p = []
  for (let i = 0; i < k; i++) {
    if (i % 2 == 0) { p.push(1) }
    else { p.push(min) }
  }
  return p
}

","  let m = 0
  let n = 0
  for (let i = 0; i < grid.length; i++) {
    for (let j = 0; j < grid.length; j++) {
      if (grid[i][j] == 1) {
        m = i;
        n = j;
        break;
      }
    }
  }
  let min = grid.length * grid.length
  if (m > 0 && grid[m - 1][n] < min) { min = grid[m][n] }
  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n] }
  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m][n] }
  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n] }
  let p = []
  for (let i = 0; i < k; i++) {
    if (i % 2 == 0) { p.push(1) }
    else { p.push(min) }
  }
  return p
}

",value misuse,incorrect output,minPath,,,"const testMinPath = () => {
  console.assert(
    JSON.stringify(
      minPath(
        [
          [1, 2, 3],
          [4, 5, 6],
          [7, 8, 9],
        ],
        3
      )
    ) === JSON.stringify([1, 2, 1])
  )
  console.assert(
    JSON.stringify(
      minPath(
        [
          [5, 9, 3],
          [4, 1, 6],
          [7, 8, 2],
        ],
        1
      )
    ) === JSON.stringify([1])
  )
  console.assert(
    JSON.stringify(
      minPath(
        [
          [1, 2, 3, 4],
          [5, 6, 7, 8],
          [9, 10, 11, 12],
          [13, 14, 15, 16],
        ],
        4
      )
    ) === JSON.stringify([1, 2, 1, 2])
  )
  console.assert(
    JSON.stringify(
      minPath(
        [
          [6, 4, 13, 10],
          [5, 7, 12, 1],
          [3, 16, 11, 15],
          [8, 14, 9, 2],
        ],
        7
      )
    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])
  )
  console.assert(
    JSON.stringify(
      minPath(
        [
          [8, 14, 9, 2],
          [6, 4, 13, 15],
          [5, 7, 1, 12],
          [3, 10, 11, 16],
        ],
        5
      )
    ) === JSON.stringify([1, 7, 1, 7, 1])
  )
  console.assert(
    JSON.stringify(
      minPath(
        [
          [11, 8, 7, 2],
          [5, 16, 14, 4],
          [9, 3, 15, 6],
          [12, 13, 10, 1],
        ],
        9
      )
    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])
  )
  console.assert(
    JSON.stringify(
      minPath(
        [
          [12, 13, 10, 1],
          [9, 3, 15, 6],
          [5, 16, 14, 4],
          [11, 8, 7, 2],
        ],
        12
      )
    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])
  )
  console.assert(
    JSON.stringify(
      minPath(
        [
          [2, 7, 4],
          [3, 1, 5],
          [6, 8, 9],
        ],
        8
      )
    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])
  )
  console.assert(
    JSON.stringify(
      minPath(
        [
          [6, 1, 5],
          [3, 8, 9],
          [2, 7, 4],
        ],
        8
      )
    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])
  )
  console.assert(
    JSON.stringify(
      minPath(
        [
          [1, 2],
          [3, 4],
        ],
        10
      )
    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])
  )
  console.assert(
    JSON.stringify(
      minPath(
        [
          [1, 3],
          [4, 2],
        ],
        10
      )
    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])
  )
}

testMinPath()
","const testMinPath = () => {
  console.assert(
    JSON.stringify(
      minPath(
        [
          [1, 2, 3],
          [4, 5, 6],
          [7, 8, 9],
        ],
        3
      )
    ) === JSON.stringify([1, 2, 1])
  )
  console.assert(
    JSON.stringify(
      minPath(
        [
          [5, 9, 3],
          [4, 1, 6],
          [7, 8, 2],
        ],
        1
      )
    ) === JSON.stringify([1])
  )
}
testMinPath()
","const minPath = (grid, k)","Given a grid with N rows and N columns (N >= 2) and a positive integer k,
each cell of the grid contains a value. Every integer in the range [1, N * N]
inclusive appears exactly once on the cells of the grid.
You have to find the minimum path of length k in the grid. You can start
from any cell, and in each step you can move to any of the neighbor cells,
in other words, you can go to cells which share an edge with you current
cell.
Please note that a path of length k means visiting exactly k cells (not
necessarily distinct).
You CANNOT go off the grid.
A path A (of length k) is considered less than a path B (of length k) if
after making the ordered lists of the values on the cells that A and B go
through (let's call them lst_A and lst_B), lst_A is lexicographically less
than lst_B, in other words, there exist an integer index i (1 <= i <= k)
such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
lst_A[j] = lst_B[j].
It is guaranteed that the answer is unique.
Return an ordered list of the values on the cells that the minimum path go through.
Examples:
Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
Output: [1, 2, 1]
Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
Output: [1]","Write a JavaScript function `const minPath = (grid, k)` to solve the following problem:
Given a grid with N rows and N columns (N >= 2) and a positive integer k,
each cell of the grid contains a value. Every integer in the range [1, N * N]
inclusive appears exactly once on the cells of the grid.
You have to find the minimum path of length k in the grid. You can start
from any cell, and in each step you can move to any of the neighbor cells,
in other words, you can go to cells which share an edge with you current
cell.
Please note that a path of length k means visiting exactly k cells (not
necessarily distinct).
You CANNOT go off the grid.
A path A (of length k) is considered less than a path B (of length k) if
after making the ordered lists of the values on the cells that A and B go
through (let's call them lst_A and lst_B), lst_A is lexicographically less
than lst_B, in other words, there exist an integer index i (1 <= i <= k)
such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
lst_A[j] = lst_B[j].
It is guaranteed that the answer is unique.
Return an ordered list of the values on the cells that the minimum path go through.
Examples:
Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
Output: [1, 2, 1]
Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
Output: [1]"
JavaScript/130,"/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
  the last couple centuries. However, what people don't know is Tribonacci sequence.
  Tribonacci sequence is defined by the recurrence:
  tri(1) = 3
  tri(n) = 1 + n / 2, if n is even.
  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
  For example:
  tri(2) = 1 + (2 / 2) = 2
  tri(4) = 3
  tri(3) = tri(2) + tri(1) + tri(4)
         = 2 + 3 + 3 = 8 
  You are given a non-negative integer number n, you have to a return a list of the 
  first n + 1 numbers of the Tribonacci sequence.
  Examples:
  tri(3) = [1, 3, 2, 8]
  */
const tri = (n) => {
","
const tri = (n) => {
","  if (n == 0) { return [1] }
  if (n == 1) { return [1, 3] }
  let p = [1, 3]
  for (let i = 2; i <= n; i++) {
    if (i % 2 == 0) {
      p.push(1 + i / 2)
    }
    else {
      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)
    }
  }
  return p
}

","  if (n == 0) { return [1] }
  if (n == 1) { return [1, 3] }
  let p = [1, 3]
  for (let i = 2; i <= n; i++) {
    if (i % 2 == 0) {
      p.push(1 + i / 2)
    }
    else {
      p.push(p[i - 2] + p[i - 1] + 1 + i + (i + 1) / 2)
    }
  }
  return p
}

",excess logic,incorrect output,tri,,,"const testTri = () => {
  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))

  console.assert(
    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])
  )
  console.assert(
    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])
  )
  console.assert(
    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])
  )
  console.assert(
    JSON.stringify(tri(7)) ===
    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])
  )
  console.assert(
    JSON.stringify(tri(8)) ===
    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])
  )
  console.assert(
    JSON.stringify(tri(9)) ===
    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])
  )
  console.assert(
    JSON.stringify(tri(20)) ===
    JSON.stringify([
      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,
      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,
    ])
  )
  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))
  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))
}

testTri()
","const testTri = () => {
  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))
}
testTri()
",const tri = (n),"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in
the last couple centuries. However, what people don't know is Tribonacci sequence.
Tribonacci sequence is defined by the recurrence:
tri(1) = 3
tri(n) = 1 + n / 2, if n is even.
tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
For example:
tri(2) = 1 + (2 / 2) = 2
tri(4) = 3
tri(3) = tri(2) + tri(1) + tri(4)
= 2 + 3 + 3 = 8
You are given a non-negative integer number n, you have to a return a list of the
first n + 1 numbers of the Tribonacci sequence.
Examples:
tri(3) = [1, 3, 2, 8]","Write a JavaScript function `const tri = (n)` to solve the following problem:
Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in
the last couple centuries. However, what people don't know is Tribonacci sequence.
Tribonacci sequence is defined by the recurrence:
tri(1) = 3
tri(n) = 1 + n / 2, if n is even.
tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
For example:
tri(2) = 1 + (2 / 2) = 2
tri(4) = 3
tri(3) = tri(2) + tri(1) + tri(4)
= 2 + 3 + 3 = 8
You are given a non-negative integer number n, you have to a return a list of the
first n + 1 numbers of the Tribonacci sequence.
Examples:
tri(3) = [1, 3, 2, 8]"
JavaScript/131,"/*Given a positive integer n, return the product of the odd digits.
  Return 0 if all digits are even.
  For example:
  digits(1)  == 1
  digits(4)  == 0
  digits(235) == 15
  */
const digits = (n) => {
","
const digits = (n) => {
","  let p = 1
  let k = 1
  while (n > 0) {
    let y = n % 10
    if (y % 2 == 1) {
      p *= y; k = 0;
    }
    n = (n - n % 10) / 10
  }
  if (k == 0) { return p }
  return 0
}

","  let p = 1
  let k = 1
  while (n > 0) {
    let y = n % 10
    if (y % 2 == 1) {
      p *= p*y; k = 0;
    }
    n = (n - n % 10) / 10
  }
  if (k == 0) { return p }
  return 0
}

",excess logic,incorrect output,digits,,,"const testDigits = () => {
  console.assert(digits(5) === 5)
  console.assert(digits(54) === 5)
  console.assert(digits(120) === 1)
  console.assert(digits(5014) === 5)
  console.assert(digits(98765) === 315)
  console.assert(digits(5576543) === 2625)
  console.assert(digits(2468) === 0)
}

testDigits()
","const testDigits = () => {
  console.assert(digits(1) === 1)
  console.assert(digits(4) === 0)
  console.assert(digits(235) === 15)
}
testDigits()
",const digits = (n),"Given a positive integer n, return the product of the odd digits.
Return 0 if all digits are even.
For example:
digits(1)  == 1
digits(4)  == 0
digits(235) == 15","Write a JavaScript function `const digits = (n)` to solve the following problem:
Given a positive integer n, return the product of the odd digits.
Return 0 if all digits are even.
For example:
digits(1)  == 1
digits(4)  == 0
digits(235) == 15"
JavaScript/132,"/*
  Create a function that takes a string as input which contains only square brackets.
  The function should return true if and only if there is a valid subsequence of brackets
  where at least one bracket in the subsequence is nested.
  isNested('[[]]') ➞ true
  isNested('[]]]]]]][[[[[]') ➞ false
  isNested('[][]') ➞ false
  isNested('[]') ➞ false
  isNested('[[][]]') ➞ true
  isNested('[[]][[') ➞ true
  */
const isNested = (string) => {
","
const isNested = (string) => {
","  let opening_bracket_index = []
  let closing_bracket_index1 = []
  for (let i = 0; i < string.length; i++) {
    if (string[i] == '[') {
      opening_bracket_index.push(i)
    }
    else {
      closing_bracket_index1.push(i)
    }
  }
  let closing_bracket_index = []
  for (let i = 0; i < closing_bracket_index1.length; i++) {
    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])
  }
  let cnt = 0
  let i = 0
  let l = closing_bracket_index.length
  for (let k = 0; k < opening_bracket_index.length; k++) {
    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {
      cnt += 1;
      i += 1;
    }
  }
  return cnt >= 2
}

","  let opening_bracket_index = []
  let closing_bracket_index1 = []
  for (let i = 0; i < string.length; i++) {
    if (string[i] == '(') {
      opening_bracket_index.push(i)
    }
    else {
      closing_bracket_index1.push(i)
    }
  }
  let closing_bracket_index = []
  for (let i = 0; i < closing_bracket_index1.length; i++) {
    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])
  }
  let cnt = 0
  let i = 0
  let l = closing_bracket_index.length
  for (let k = 0; k < opening_bracket_index.length; k++) {
    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {
      cnt += 1;
      i += 1;
    }
  }
  return cnt >= 2
}

",value misuse,incorrect output,isNested,,,"const testIsNested = () => {
  console.assert(isNested('[[]]') === true)
  console.assert(isNested('[]]]]]]][[[[[]') === false)
  console.assert(isNested('[][]') === false)
  console.assert(isNested('[]') === false)
  console.assert(isNested('[[[[]]]]') === true)
  console.assert(isNested('[]]]]]]]]]]') === false)
  console.assert(isNested('[][][[]]') === true)
  console.assert(isNested('[[]') === false)
  console.assert(isNested('[]]') === false)
  console.assert(isNested('[[]][[') === true)
  console.assert(isNested('[[][]]') === true)
  console.assert(isNested('') === false)
  console.assert(isNested('[[[[[[[[') === false)
  console.assert(isNested(']]]]]]]]') === false)
}

testIsNested()
","const testIsNested = () => {
  console.assert(isNested('[[]]') === true)
  console.assert(isNested('[]]]]]]][[[[[]') === false)
  console.assert(isNested('[][]') === false)
  console.assert(isNested('[]') === false)
  console.assert(isNested('[[]][[') === true)
  console.assert(isNested('[[][]]') === true)
}
testIsNested()
",const isNested = (string),"Create a function that takes a string as input which contains only square brackets.
The function should return true if and only if there is a valid subsequence of brackets
where at least one bracket in the subsequence is nested.
isNested('[[]]') ➞ true
isNested('[]]]]]]][[[[[]') ➞ false
isNested('[][]') ➞ false
isNested('[]') ➞ false
isNested('[[][]]') ➞ true
isNested('[[]][[') ➞ true","Write a JavaScript function `const isNested = (string)` to solve the following problem:
Create a function that takes a string as input which contains only square brackets.
The function should return true if and only if there is a valid subsequence of brackets
where at least one bracket in the subsequence is nested.
isNested('[[]]') ➞ true
isNested('[]]]]]]][[[[[]') ➞ false
isNested('[][]') ➞ false
isNested('[]') ➞ false
isNested('[[][]]') ➞ true
isNested('[[]][[') ➞ true"
JavaScript/133,"/*You are given a list of numbers.
  You need to return the sum of squared numbers in the given list,
  round each element in the list to the upper int(Ceiling) first.
  Examples:
  For lst = [1,2,3] the output should be 14
  For lst = [1,4,9] the output should be 98
  For lst = [1,3,5,7] the output should be 84
  For lst = [1.4,4.2,0] the output should be 29
  For lst = [-2.4,1,1] the output should be 6
  */
const sumSquares = (lst) => {
","
const sumSquares = (lst) => {
","  let p = 0
  for (let i = 0; i < lst.length; i++) {
    let y = lst[i]
    if (y % 1 != 0) {
      if (y > 0) { y = y - y % 1 + 1 }
      else { y = -y; y = y - y % 1 }
    }
    p += y * y
  }
  return p
}

","  let p = 0
  for (let i = 0; i < lst.length; i++) {
    let y = lst[i]
    if (y % 1 != 0) {
      if (y > 0) { y = y - y % 1 + 1 }
      else { y = -y; y = y - y % 1 }
    }
    p += y * 2
  }
  return p
}

",operator misuse,incorrect output,sumSquares,,,"const testSumSquares = () => {
  console.assert(sumSquares([1, 2, 3]) === 14)
  console.assert(sumSquares([1.0, 2, 3]) === 14)
  console.assert(sumSquares([1, 3, 5, 7]) === 84)
  console.assert(sumSquares([1.4, 4.2, 0]) === 29)
  console.assert(sumSquares([-2.4, 1, 1]) === 6)

  console.assert(sumSquares([100, 1, 15, 2]) === 10230)
  console.assert(sumSquares([10000, 10000]) === 200000000)
  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)
  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)

  console.assert(sumSquares([0]) === 0)
  console.assert(sumSquares([-1]) === 1)
  console.assert(sumSquares([-1, 1, 0]) === 2)
}

testSumSquares()
","const testSumSquares = () => {
  console.assert(sumSquares([1, 2, 3]) === 14)
  console.assert(sumSquares([1, 4, 9]) === 98)
  console.assert(sumSquares([1, 3, 5, 7]) === 84)
  console.assert(sumSquares([1.4, 4.2, 0]) === 29)
  console.assert(sumSquares([-2.4, 1, 1]) === 6)
}
testSumSquares()
",const sumSquares = (lst),"You are given a list of numbers.
You need to return the sum of squared numbers in the given list,
round each element in the list to the upper int(Ceiling) first.
Examples:
For lst = [1,2,3] the output should be 14
For lst = [1,4,9] the output should be 98
For lst = [1,3,5,7] the output should be 84
For lst = [1.4,4.2,0] the output should be 29
For lst = [-2.4,1,1] the output should be 6","Write a JavaScript function `const sumSquares = (lst)` to solve the following problem:
You are given a list of numbers.
You need to return the sum of squared numbers in the given list,
round each element in the list to the upper int(Ceiling) first.
Examples:
For lst = [1,2,3] the output should be 14
For lst = [1,4,9] the output should be 98
For lst = [1,3,5,7] the output should be 84
For lst = [1.4,4.2,0] the output should be 29
For lst = [-2.4,1,1] the output should be 6"
JavaScript/134,"/* Create a function that returns true if the last character
  of a given string is an alphabetical character and is not
  a part of a word, and false otherwise.
  Note: ""word"" is a group of characters separated by space.
  Examples:
  checkIfLastCharIsALetter(""apple pie"") ➞ false
  checkIfLastCharIsALetter(""apple pi e"") ➞ true
  checkIfLastCharIsALetter(""apple pi e "") ➞ false
  checkIfLastCharIsALetter("""") ➞ false
  */
const checkIfLastCharIsALetter = (txt) => {
","
const checkIfLastCharIsALetter = (txt) => {
","  let len = txt.length
  if (len == 0) { return false }
  let y = txt[len - 1].charCodeAt()
  if (len == 1) {
    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }
    return false
  }
  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }
  return false
}

","  let len = txt.length
  if (len == 0) { return false }
  let y = txt[len - 1].charCodeAt()
  if (len == 1) {
    if ((y >= 0 && y <= 22) || (y >= 30 && y <= 54)) { return true }
    return false
  }
  if (txt[len - 2] == ' ' && ((y >= 150 && y <= 200) || (y >= 250 && y <= 300))) { return true }
  return false
}

",function misuse,incorrect output,checkIfLastCharIsALetter,,,"const testCheckIfLastCharIsALetter = () => {
  console.assert(checkIfLastCharIsALetter('apple') === false)
  console.assert(checkIfLastCharIsALetter('apple pi e') === true)
  console.assert(checkIfLastCharIsALetter('eeeee') === false)
  console.assert(checkIfLastCharIsALetter('A') === true)
  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)
  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)
  console.assert(checkIfLastCharIsALetter('') === false)
  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)
  console.assert(checkIfLastCharIsALetter('apple pie') === false)
  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)
}

testCheckIfLastCharIsALetter()
","const testCheckIfLastCharIsALetter = () => {
  console.assert(checkIfLastCharIsALetter('apple pi e') === true)
  console.assert(checkIfLastCharIsALetter('') === false)
  console.assert(checkIfLastCharIsALetter('apple pie') === false)
  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)
}
testCheckIfLastCharIsALetter()
",const checkIfLastCharIsALetter = (txt),"Create a function that returns true if the last character
of a given string is an alphabetical character and is not
a part of a word, and false otherwise.
Note: ""word"" is a group of characters separated by space.
Examples:
checkIfLastCharIsALetter(""apple pie"") ➞ false
checkIfLastCharIsALetter(""apple pi e"") ➞ true
checkIfLastCharIsALetter(""apple pi e "") ➞ false
checkIfLastCharIsALetter("""") ➞ false","Write a JavaScript function `const checkIfLastCharIsALetter = (txt)` to solve the following problem:
Create a function that returns true if the last character
of a given string is an alphabetical character and is not
a part of a word, and false otherwise.
Note: ""word"" is a group of characters separated by space.
Examples:
checkIfLastCharIsALetter(""apple pie"") ➞ false
checkIfLastCharIsALetter(""apple pi e"") ➞ true
checkIfLastCharIsALetter(""apple pi e "") ➞ false
checkIfLastCharIsALetter("""") ➞ false"
JavaScript/135,"/*Create a function which returns the largest index of an element which
  is not greater than or equal to the element immediately preceding it. If
  no such element exists then return -1. The given array will not contain
  duplicate values.

  Examples:
  canArrange([1,2,4,3,5]) = 3
  canArrange([1,2,3]) = -1
  */
const canArrange = (arr) => {
","
const canArrange = (arr) => {
","  if (arr.length == 0) { return -1 }
  for (let i = arr.length - 1; i > 0; i--) {
    if (arr[i] < arr[i - 1]) { return i }
  }
  return -1
}

","  if (arr.length == 0) { return -1 }
  for (let i = arr.length - 1; i > 0; i--) {
    if (arr[i] < arr[i - 1]) { return i + arr[i] }
  }
  return -1
}

",excess logic,incorrect output,canArrange,,,"const testCanArrange = () => {
  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)
  console.assert(canArrange([1, 2, 4, 5]) === -1)
  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)
  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)
  console.assert(canArrange([]) === -1)
}

testCanArrange()
","const testCanArrange = () => {
  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)
  console.assert(canArrange([1, 2, 3]) === -1)
}
testCanArrange()
",const canArrange = (arr),"Create a function which returns the largest index of an element which
is not greater than or equal to the element immediately preceding it. If
no such element exists then return -1. The given array will not contain
duplicate values.
Examples:
canArrange([1,2,4,3,5]) = 3
canArrange([1,2,3]) = -1","Write a JavaScript function `const canArrange = (arr)` to solve the following problem:
Create a function which returns the largest index of an element which
is not greater than or equal to the element immediately preceding it. If
no such element exists then return -1. The given array will not contain
duplicate values.
Examples:
canArrange([1,2,4,3,5]) = 3
canArrange([1,2,3]) = -1"
JavaScript/136,"/* Create a function that returns a tuple (a, b), where 'a' is
  the largest of negative integers, and 'b' is the smallest
  of positive integers in a list.
  If there is no negative or positive integers, return them as null.
  Examples:
  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)
  largestSmallestIntegers([]) == (null, null)
  largestSmallestIntegers([0]) == (null, null)
  */
const largestSmallestIntegers = (lst) => {
","
const largestSmallestIntegers = (lst) => {
","  let a = Infinity
  let b = -Infinity
  for (let i = 0; i < lst.length; i++) {
    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }
    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }
  }
  if (a == Infinity) { a = null }
  if (b == -Infinity) { b = null }
  return (b, a)
}

","  let a = Infinity
  let b = -Infinity
  for (let i = 0; i < lst.length; i++) {
    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }
    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }
    if (lst[i] < a) { b = a }
    if (lst[i] < b) { a = b }
  }
  if (a == Infinity) { a = null }
  if (b == -Infinity) { b = null }
  return (b, a)
}

",excess logic,incorrect output,largestSmallestIntegers,,,"const testLargestSmallestIntegers = () => {
  console.assert(
    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===
    JSON.stringify((null, 1))
  )
  console.assert(
    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===
    JSON.stringify((null, 1))
  )
  console.assert(
    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===
    JSON.stringify((-2, 1))
  )
  console.assert(
    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===
    JSON.stringify((-7, 2))
  )
  console.assert(
    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===
    JSON.stringify((-9, 2))
  )
  console.assert(
    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))
  )
  console.assert(
    JSON.stringify(largestSmallestIntegers([0])) ===
    JSON.stringify((null, null))
  )
  console.assert(
    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===
    JSON.stringify((-1, null))
  )
  console.assert(
    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===
    JSON.stringify((-1, null))
  )
  console.assert(
    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===
    JSON.stringify((-3, 1))
  )
  console.assert(
    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===
    JSON.stringify((-3, 1))
  )
}

testLargestSmallestIntegers()
","const testLargestSmallestIntegers = () => {
  console.assert(
    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===
    JSON.stringify((null, 1))
  )
  console.assert(
    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))
  )
  console.assert(
    JSON.stringify(largestSmallestIntegers([0])) ===
    JSON.stringify((null, null))
  )
}
testLargestSmallestIntegers()
",const largestSmallestIntegers = (lst),"Create a function that returns a tuple (a, b), where 'a' is
the largest of negative integers, and 'b' is the smallest
of positive integers in a list.
If there is no negative or positive integers, return them as null.
Examples:
largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)
largestSmallestIntegers([]) == (null, null)
largestSmallestIntegers([0]) == (null, null)","Write a JavaScript function `const largestSmallestIntegers = (lst)` to solve the following problem:
Create a function that returns a tuple (a, b), where 'a' is
the largest of negative integers, and 'b' is the smallest
of positive integers in a list.
If there is no negative or positive integers, return them as null.
Examples:
largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)
largestSmallestIntegers([]) == (null, null)
largestSmallestIntegers([0]) == (null, null)"
JavaScript/137,"/*
  Create a function that takes integers, floats, or strings representing
  real numbers, and returns the larger variable in its given variable type.
  Return null if the values are equal.
  Note: If a real number is represented as a string, the floating point might be . or ,

  compareOne(1, 2.5) ➞ 2.5
  compareOne(1, ""2,3"") ➞ ""2,3""
  compareOne(""5,1"", ""6"") ➞ ""6""
  compareOne(""1"", 1) ➞ null
  */
const compareOne = (a, b) => {
","
const compareOne = (a, b) => {
","  let aa = Number(a)
  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }
  let bb = Number(b)
  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }
  if (aa > bb) { return a }
  if (aa < bb) { return b }
  return null
}

","  let aa = Number(a)
  if (typeof a == 'string') { aa = Number(a.replace(',', '.').replace('.', ',')) }
  let bb = Number(b)
  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }
  if (aa > bb) { return a }
  if (aa < bb) { return b }
  return null
}

",excess logic,incorrect output,compareOne,,,"const testCompareOne = () => {
  console.assert(compareOne(1, 2) === 2)
  console.assert(compareOne(1, 2.5) === 2.5)
  console.assert(compareOne(2, 3) === 3)
  console.assert(compareOne(5, 6) === 6)
  console.assert(compareOne(1, '2,3') === '2,3')
  console.assert(compareOne('5,1', '6') === '6')
  console.assert(compareOne('1', '2') === '2')
  console.assert(compareOne('1', 1) === null)
}

testCompareOne()
","const testCompareOne = () => {
  console.assert(compareOne(1, 2.5) === 2.5)
  console.assert(compareOne(1, '2,3') === '2,3')
  console.assert(compareOne('5,1', '6') === '6')
  console.assert(compareOne('1', 1) === null)
}
testCompareOne()
","const compareOne = (a, b)","Create a function that takes integers, floats, or strings representing
real numbers, and returns the larger variable in its given variable type.
Return null if the values are equal.
Note: If a real number is represented as a string, the floating point might be . or ,
compareOne(1, 2.5) ➞ 2.5
compareOne(1, ""2,3"") ➞ ""2,3""
compareOne(""5,1"", ""6"") ➞ ""6""
compareOne(""1"", 1) ➞ null","Write a JavaScript function `const compareOne = (a, b)` to solve the following problem:
Create a function that takes integers, floats, or strings representing
real numbers, and returns the larger variable in its given variable type.
Return null if the values are equal.
Note: If a real number is represented as a string, the floating point might be . or ,
compareOne(1, 2.5) ➞ 2.5
compareOne(1, ""2,3"") ➞ ""2,3""
compareOne(""5,1"", ""6"") ➞ ""6""
compareOne(""1"", 1) ➞ null"
JavaScript/138,"/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
  Example
  isEqualToSumEven(4) == false
  isEqualToSumEven(6) == false
  isEqualToSumEven(8) == true
  */
const isEqualToSumEven = (n) => {
","
const isEqualToSumEven = (n) => {
","  return (n >= 8 && n % 2 == 0)
}

","  return (n >= 8 && n <= 8 && n % 2 == 0)
}

",excess logic,incorrect output,isEqualToSumEven,,,"const testIsEqualToSumEven = () => {
  console.assert(isEqualToSumEven(4) === false)
  console.assert(isEqualToSumEven(6) === false)
  console.assert(isEqualToSumEven(8) === true)
  console.assert(isEqualToSumEven(10) === true)
  console.assert(isEqualToSumEven(11) === false)
  console.assert(isEqualToSumEven(12) === true)
  console.assert(isEqualToSumEven(13) === false)
  console.assert(isEqualToSumEven(16) === true)
}

testIsEqualToSumEven()
","const testIsEqualToSumEven = () => {
  console.assert(isEqualToSumEven(4) === false)
  console.assert(isEqualToSumEven(6) === false)
  console.assert(isEqualToSumEven(8) === true)
}
testIsEqualToSumEven()
",const isEqualToSumEven = (n),"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
Example
isEqualToSumEven(4) == false
isEqualToSumEven(6) == false
isEqualToSumEven(8) == true","Write a JavaScript function `const isEqualToSumEven = (n)` to solve the following problem:
Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
Example
isEqualToSumEven(4) == false
isEqualToSumEven(6) == false
isEqualToSumEven(8) == true"
JavaScript/139,"/*The Brazilian factorial is defined as:
  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
  where n > 0

  For example:
  >>> specialFactorial(4)
  288

  The function will receive an integer as input and should return the special
  factorial of this integer.
  */
const specialFactorial = (n) => {
","
const specialFactorial = (n) => {
","  let p = 1;
  let t = 1;
  while (n > 1) {
    let y = p;
    while (y > 0) {
      y--;
      t *= n;
    }
    p++;
    n--;
  }
  return t
}

","  let p = 1;
  let t = 1;
  while (n > 1) {
    let y = p;
    while (y > 0) {
      y--;
      n *= y;
      t *= n;
    }
    p++;
    p++;
    n--;
  }
  return t
}

",excess logic,incorrect output,specialFactorial,,,"const testSpecialFactorial = () => {
  console.assert(specialFactorial(4) === 288)
  console.assert(specialFactorial(5) === 34560)
  console.assert(specialFactorial(7) === 125411328000)
  console.assert(specialFactorial(1) === 1)
}

testSpecialFactorial()
","const testSpecialFactorial = () => {
  console.assert(specialFactorial(4) === 288)
}
testSpecialFactorial()
",const specialFactorial = (n),"The Brazilian factorial is defined as:
brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
where n > 0
For example:
>>> specialFactorial(4)
288
The function will receive an integer as input and should return the special
factorial of this integer.","Write a JavaScript function `const specialFactorial = (n)` to solve the following problem:
The Brazilian factorial is defined as:
brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
where n > 0
For example:
>>> specialFactorial(4)
288
The function will receive an integer as input and should return the special
factorial of this integer."
JavaScript/140,"/*
  Given a string text, replace all spaces in it with underscores, 
  and if a string has more than 2 consecutive spaces, 
  then replace all consecutive spaces with - 
  
  fixSpaces(""Example"") == ""Example""
  fixSpaces(""Example 1"") == ""Example_1""
  fixSpaces("" Example 2"") == ""_Example_2""
  fixSpaces("" Example   3"") == ""_Example-3""
  */
const fixSpaces = (text) => {
","
const fixSpaces = (text) => {
","  let t = ''
  let c = 0
  for (let i = 0; i < text.length; i++) {
    if (text[i] == ' ') { c++ }
    else if (c > 0) {
      if (c == 1) { t += '_' }
      if (c == 2) { t += '__' }
      if (c > 2) { t += '-' }
      t += text[i]
      c = 0;
    } else {
      t += text[i]
    }
  }
  if (c == 1) { t += '_' }
  if (c == 2) { t += '__' }
  if (c > 2) { t += '-' }
  return t
}

","  let t = ''
  let c = 0
  for (let i = 0; i < text.length; i++) {
    if (text[i] == '  ') { c++ }
    else if (c > 0) {
      if (c == 1) { t += '_' }
      if (c == 2) { t += '___' }
      if (c > 2) { t += '--' }
      t += text[i]
      c = 0;
    } else {
      t += text[i]
    }
  }
  if (c == 1) { t += '__' }
  if (c == 2) { t += '___' }
  if (c > 2) { t += '-' }
  return t
}

",excess logic,incorrect output,fixSpaces,,,"const testFixSpaces = () => {
  console.assert(fixSpaces('Example') === 'Example')
  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')
  console.assert(
    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'
  )
  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')
  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')
}

testFixSpaces()
","const testFixSpaces = () => {
  console.assert(fixSpaces('Example') === 'Example')
  console.assert(fixSpaces('Example 1') === 'Example_1')
  console.assert(
    fixSpaces(' Example 2') === '_Example_2'
  )
  console.assert(fixSpaces(' Example   3') === '_Example-3')
}
testFixSpaces()
",const fixSpaces = (text),"Given a string text, replace all spaces in it with underscores,
and if a string has more than 2 consecutive spaces,
then replace all consecutive spaces with -
fixSpaces(""Example"") == ""Example""
fixSpaces(""Example 1"") == ""Example_1""
fixSpaces("" Example 2"") == ""_Example_2""
fixSpaces("" Example   3"") == ""_Example-3""","Write a JavaScript function `const fixSpaces = (text)` to solve the following problem:
Given a string text, replace all spaces in it with underscores,
and if a string has more than 2 consecutive spaces,
then replace all consecutive spaces with -
fixSpaces(""Example"") == ""Example""
fixSpaces(""Example 1"") == ""Example_1""
fixSpaces("" Example 2"") == ""_Example_2""
fixSpaces("" Example   3"") == ""_Example-3"""
JavaScript/141,"/*Create a function which takes a string representing a file's name, and returns
  'Yes' if the the file's name is valid, and returns 'No' otherwise.
  A file's name is considered to be valid if and only if all the following conditions 
  are met:
  - There should not be more than three digits ('0'-'9') in the file's name.
  - The file's name contains exactly one dot '.'
  - The substring before the dot should not be empty, and it starts with a letter from 
  the latin alphapet ('a'-'z' and 'A'-'Z').
  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
  Examples:
  fileNameCheck(""example.txt"") # => 'Yes'
  fileNameCheck(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)
  */
const fileNameCheck = (file_name) => {
","
const fileNameCheck = (file_name) => {
","  let t = file_name.split(/\./)
  if (t.length != 2) { return 'No' }
  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }
  if (t[0] == '') { return 'No' }
  let a = t[0][0].charCodeAt()
  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }
  let y = 0
  for (let i = 1; i < t[0].length; i++) {
    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }
    if (y > 3) { return 'No' }
  }
  return 'Yes'
}

","  let t = file_name.split(/\./)
  if (t.length != 2) { return 'No' }
  if (t[0] == '') { return 'No' }
  let a = t[0][0].charCodeAt()
  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }
  let y = 0
  for (let i = 1; i < t[0].length; i++) {
    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }
    if (y > 3) { return 'No' }
  }
  return 'Yes'
}

",missing logic,incorrect output,fileNameCheck,,,"const testFileNameCheck = () => {
  console.assert(fileNameCheck('example.txt') === 'Yes')
  console.assert(fileNameCheck('1example.dll') === 'No')
  console.assert(fileNameCheck('s1sdf3.asd') === 'No')
  console.assert(fileNameCheck('K.dll') === 'Yes')
  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')
  console.assert(fileNameCheck('His12FILE94.exe') === 'No')
  console.assert(fileNameCheck('_Y.txt') === 'No')
  console.assert(fileNameCheck('?aREYA.exe') === 'No')
  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')
  console.assert(fileNameCheck('this_is_valid.wow') === 'No')
  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')
  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')
  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')
  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')
  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')
  console.assert(fileNameCheck('all.exe.txt') === 'No')
  console.assert(fileNameCheck('I563_No.exe') === 'Yes')
  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')
  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')
  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')
  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')
  console.assert(fileNameCheck('final..txt') === 'No')
  console.assert(fileNameCheck('final132') === 'No')
  console.assert(fileNameCheck('_f4indsartal132.') === 'No')
  console.assert(fileNameCheck('.txt') === 'No')
  console.assert(fileNameCheck('s.') === 'No')
}

testFileNameCheck()
","const testFileNameCheck = () => {
  console.assert(fileNameCheck('example.txt') === 'Yes')
  console.assert(fileNameCheck('1example.dll') === 'No')
}
testFileNameCheck()
",const fileNameCheck = (file_name),"Create a function which takes a string representing a file's name, and returns
'Yes' if the the file's name is valid, and returns 'No' otherwise.
A file's name is considered to be valid if and only if all the following conditions
are met:
- There should not be more than three digits ('0'-'9') in the file's name.
- The file's name contains exactly one dot '.'
- The substring before the dot should not be empty, and it starts with a letter from
the latin alphapet ('a'-'z' and 'A'-'Z').
- The substring after the dot should be one of these: ['txt', 'exe', 'dll']
Examples:
fileNameCheck(""example.txt"") # => 'Yes'
fileNameCheck(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)","Write a JavaScript function `const fileNameCheck = (file_name)` to solve the following problem:
Create a function which takes a string representing a file's name, and returns
'Yes' if the the file's name is valid, and returns 'No' otherwise.
A file's name is considered to be valid if and only if all the following conditions
are met:
- There should not be more than three digits ('0'-'9') in the file's name.
- The file's name contains exactly one dot '.'
- The substring before the dot should not be empty, and it starts with a letter from
the latin alphapet ('a'-'z' and 'A'-'Z').
- The substring after the dot should be one of these: ['txt', 'exe', 'dll']
Examples:
fileNameCheck(""example.txt"") # => 'Yes'
fileNameCheck(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)"
JavaScript/142,"/*""
  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
  
  Examples:
  For lst = [1,2,3] the output should be 6
  For lst = []  the output should be 0
  For lst = [-1,-5,2,-1,-5]  the output should be -126
  */
const sumSquares = (lst) => {
","
const sumSquares = (lst) => {
","  let y = 0
  for (let i = 0; i < lst.length; i++) {
    if (i % 3 == 0) { y += lst[i] * lst[i] }
    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }
    else { y += lst[i] }
  }
  return y
}

","  let y = 0
  for (let i = 0; i < lst.length; i++) {
    if (i % 3 == 0) { y += lst[i] * lst[i] }
    else { y += lst[i] }
  }
  return y
}

",missing logic,incorrect output,sumSquares,,,"const testSumSquares = () => {
  console.assert(sumSquares([1, 2, 3]) === 6)
  console.assert(sumSquares([1, 4, 9]) === 14)
  console.assert(sumSquares([]) === 0)
  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)
  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)
  console.assert(sumSquares([0]) === 0)
  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)
  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)
  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)
  console.assert(
    sumSquares([
      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,
    ]) === -14196
  )
  console.assert(
    sumSquares([
      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,
      4, 10,
    ]) === -1448
  )
}

testSumSquares()
","const testSumSquares = () => {
  console.assert(sumSquares([1, 2, 3]) === 6)
  console.assert(sumSquares([]) === 0)
  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)
}
testSumSquares()
",const sumSquares = (lst),"""
This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a
multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not
change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.
Examples:
For lst = [1,2,3] the output should be 6
For lst = []  the output should be 0
For lst = [-1,-5,2,-1,-5]  the output should be -126","Write a JavaScript function `const sumSquares = (lst)` to solve the following problem:
""
This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a
multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not
change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.
Examples:
For lst = [1,2,3] the output should be 6
For lst = []  the output should be 0
For lst = [-1,-5,2,-1,-5]  the output should be -126"
JavaScript/143,"/*
  You are given a string representing a sentence,
  the sentence contains some words separated by a space,
  and you have to return a string that contains the words from the original sentence,
  whose lengths are prime numbers,
  the order of the words in the new string should be the same as the original one.

  Example 1:
      Input: sentence = ""This is a test""
      Output: ""is""

  Example 2:
      Input: sentence = ""lets go for swimming""
      Output: ""go for""

  Constraints:
      * 1 <= len(sentence) <= 100
      * sentence contains only letters
  */
const wordsInSentence = (sentence) => {
","
const wordsInSentence = (sentence) => {
","  let t = sentence.split(/\s/)
  let p = ''
  for (let j = 0; j < t.length; j++) {
    let len = t[j].length;
    let u = 1
    if (len == 1 || len == 0) { continue }
    for (let i = 2; i * i <= len; i++) {
      if (len % i == 0) { u = 0 }
    }
    if (u == 0) { continue }
    if (p == '') { p += t[j] }
    else { p = p + ' ' + t[j] }
  }
  return p
}

","  let t = sentence.split(/\s/)
  let p = ''
  for (let j = 0; j < t.length; j++) {
    let len = t[j].length;
    let u = 1
    for (let i = 2; i * i <= len; i++) {
      if (len % i == 0) { u = 0 }
    }
    if (u == 0) { continue }
    if (p == '') { p += t[j] }
    else { p = p + ' ' + t[j] }
  }
  return p
}

",missing logic,incorrect output,wordsInSentence,,,"const testWordsInSentence = () => {
  console.assert(wordsInSentence('This is a test') === 'is')
  console.assert(wordsInSentence('lets go for swimming') === 'go for')
  console.assert(
    wordsInSentence('there is no place available here') === 'there is no place'
  )
  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')
  console.assert(wordsInSentence('go for it') === 'go for it')
  console.assert(wordsInSentence('here') === '')
  console.assert(wordsInSentence('here is') === 'is')
}

testWordsInSentence()
","const testWordsInSentence = () => {
  console.assert(wordsInSentence('This is a test') === 'is')
  console.assert(wordsInSentence('lets go for swimming') === 'go for')
}
testWordsInSentence()
",const wordsInSentence = (sentence),"You are given a string representing a sentence,
the sentence contains some words separated by a space,
and you have to return a string that contains the words from the original sentence,
whose lengths are prime numbers,
the order of the words in the new string should be the same as the original one.
Example 1:
Input: sentence = ""This is a test""
Output: ""is""
Example 2:
Input: sentence = ""lets go for swimming""
Output: ""go for""
Constraints:
* 1 <= len(sentence) <= 100
* sentence contains only letters","Write a JavaScript function `const wordsInSentence = (sentence)` to solve the following problem:
You are given a string representing a sentence,
the sentence contains some words separated by a space,
and you have to return a string that contains the words from the original sentence,
whose lengths are prime numbers,
the order of the words in the new string should be the same as the original one.
Example 1:
Input: sentence = ""This is a test""
Output: ""is""
Example 2:
Input: sentence = ""lets go for swimming""
Output: ""go for""
Constraints:
* 1 <= len(sentence) <= 100
* sentence contains only letters"
JavaScript/144,"/*Your task is to implement a function that will simplify the expression
  x * n. The function returns true if x * n evaluates to a whole number and false
  otherwise. Both x and n, are string representation of a fraction, and have the following format,
  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

  You can assume that x, and n are valid fractions, and do not have zero as denominator.

  simplify(""1/5"", ""5/1"") = true
  simplify(""1/6"", ""2/1"") = false
  simplify(""7/10"", ""10/2"") = false
  */
const simplify = (x, n) => {
","
const simplify = (x, n) => {
","  let a = x.split(/\//)
  let b = n.split(/\//)
  let m = Number(a[0]) * Number(b[0])
  let r = Number(a[1]) * Number(b[1])
  return m % r == 0
}

","  let a = x.split(/\//)
  let b = n.split(/\//)
  let m = r * Number(a[0]) * Number(b[0])
  let r = m * Number(a[1]) * Number(b[1])
  let m = r * Number(a[1])
  let r = m * Number(b[1])
  return m % r == 0
}

",excess logic,incorrect output,simplify,,,"const testSimplify = () => {
  console.assert(simplify('1/5', '5/1') === true)
  console.assert(simplify('1/6', '2/1') === false)
  console.assert(simplify('5/1', '3/1') === true)
  console.assert(simplify('7/10', '10/2') === false)
  console.assert(simplify('2/10', '50/10') === true)
  console.assert(simplify('7/2', '4/2') === true)
  console.assert(simplify('11/6', '6/1') === true)
  console.assert(simplify('2/3', '5/2') === false)
  console.assert(simplify('5/2', '3/5') === false)
  console.assert(simplify('2/4', '8/4') === true)
  console.assert(simplify('2/4', '4/2') === true)
  console.assert(simplify('1/5', '5/1') === true)
  console.assert(simplify('1/5', '1/5') === false)
}

testSimplify()
","const testSimplify = () => {
  console.assert(simplify('1/5', '5/1') === true)
  console.assert(simplify('1/6', '2/1') === false)
  console.assert(simplify('7/10', '10/2') === false)
}
testSimplify()
","const simplify = (x, n)","Your task is to implement a function that will simplify the expression
x * n. The function returns true if x * n evaluates to a whole number and false
otherwise. Both x and n, are string representation of a fraction, and have the following format,
<numerator>/<denominator> where both numerator and denominator are positive whole numbers.
You can assume that x, and n are valid fractions, and do not have zero as denominator.
simplify(""1/5"", ""5/1"") = true
simplify(""1/6"", ""2/1"") = false
simplify(""7/10"", ""10/2"") = false","Write a JavaScript function `const simplify = (x, n)` to solve the following problem:
Your task is to implement a function that will simplify the expression
x * n. The function returns true if x * n evaluates to a whole number and false
otherwise. Both x and n, are string representation of a fraction, and have the following format,
<numerator>/<denominator> where both numerator and denominator are positive whole numbers.
You can assume that x, and n are valid fractions, and do not have zero as denominator.
simplify(""1/5"", ""5/1"") = true
simplify(""1/6"", ""2/1"") = false
simplify(""7/10"", ""10/2"") = false"
JavaScript/145,"/*
  Write a function which sorts the given list of integers
  in ascending order according to the sum of their digits.
  Note: if there are several items with similar sum of their digits,
  order them based on their index in original list.

  For example:
  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
  >>> orderByPoints([]) == []
  */
const orderByPoints = (nums) => {
","
const orderByPoints = (nums) => {
","  let p = nums
  for (let j = p.length - 2; j >= 0; j--) {
    for (let k = 0; k <= j; k++) {
      let m = 0
      let n = 0
      let h = p[k]
      let d = p[k + 1]
      let y = 1
      let u = 1
      if (h < 0) { y = -1; h = -h; }
      if (d < 0) { u = -1; d = -d; }
      while (h >= 10) {
        m += h % 10;
        h = (h - h % 10) / 10;
      }
      m += y * h
      while (d >= 10) {
        n += d % 10;
        d = (d - d % 10) / 10;
      }
      n += u * d
      if (m > n) {
        let tmp = p[k]
        p[k] = p[k + 1]
        p[k + 1] = tmp
      }
    }
  }
  return p
}

","  let p = nums
  for (let j = p.length - 2; j >= 0; j--) {
    for (let k = 0; k <= j; k++) {
      let m = 0
      let n = 0
      let h = p[k]
      let d = p[k + 1]
      let y = 1
      let u = 1
      if (h < 0) { y = -1; h = -h; }
      if (d < 0) { u = -1; d = -d; }
      while (h >= 10) {
        m += h % 10;
        h = (h - h % 10) / 10;
      }
      m += y * h + h
      while (d >= 10) {
        n += d % 10;
        d = (d - d % 10) / 10;
      }
      n += u * d
      if (m > n) {
        let tmp = p[k]
        p[k] = p[k + 1]
        p[k + 1] = tmp
      }
    }
  }
  return p
}

",excess logic,incorrect output,orderByPoints,,,"const testOrderByPoints = () => {
  console.assert(
    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===
    JSON.stringify([-1, -11, 1, -12, 11])
  )
  console.assert(
    JSON.stringify(
      orderByPoints([
        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,
      ])
    ) ===
    JSON.stringify([
      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,
    ])
  )
  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))
  console.assert(
    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===
    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])
  )
  console.assert(
    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===
    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])
  )
  console.assert(
    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===
    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])
  )
}

testOrderByPoints()
","const testOrderByPoints = () => {
  console.assert(
    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===
    JSON.stringify([-1, -11, 1, -12, 11])
  )
  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))
}
testOrderByPoints()
",const orderByPoints = (nums),"Write a function which sorts the given list of integers
in ascending order according to the sum of their digits.
Note: if there are several items with similar sum of their digits,
order them based on their index in original list.
For example:
>>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
>>> orderByPoints([]) == []","Write a JavaScript function `const orderByPoints = (nums)` to solve the following problem:
Write a function which sorts the given list of integers
in ascending order according to the sum of their digits.
Note: if there are several items with similar sum of their digits,
order them based on their index in original list.
For example:
>>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
>>> orderByPoints([]) == []"
JavaScript/146,"/*Write a function that takes an array of numbers as input and returns 
  the number of elements in the array that are greater than 10 and both 
  first and last digits of a number are odd (1, 3, 5, 7, 9).
  For example:
  specialFilter([15, -73, 14, -15]) => 1 
  specialFilter([33, -2, -3, 45, 21, 109]) => 2
  */
const specialFilter = (nums) => {
","
const specialFilter = (nums) => {
","  let p = 0
  for (let i = 0; i < nums.length; i++) {
    if (nums[i] < 10) { continue }
    let y = nums[i].toString()
    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {
      p++
    }
  }
  return p
}

","  let p = 0
  for (let i = 0; i < nums.length; i++) {
    if (nums[i] < 10) { continue }
    let y = nums[i].toString()
    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 0) {
      p++
    }
  }
  return p
}

",excess logic,incorrect output,specialFilter,,,"const testSpecialFilter = () => {
  console.assert(specialFilter([5, -2, 1, -5]) === 0)
  console.assert(specialFilter([15, -73, 14, -15]) === 1)
  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)
  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)
  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)
  console.assert(specialFilter([1]) === 0)
  console.assert(specialFilter([]) === 0)
}

testSpecialFilter()
","const testSpecialFilter = () => {
  console.assert(specialFilter([15, -73, 14, -15]) === 1)
  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)
}
testSpecialFilter()
",const specialFilter = (nums),"Write a function that takes an array of numbers as input and returns
the number of elements in the array that are greater than 10 and both
first and last digits of a number are odd (1, 3, 5, 7, 9).
For example:
specialFilter([15, -73, 14, -15]) => 1
specialFilter([33, -2, -3, 45, 21, 109]) => 2","Write a JavaScript function `const specialFilter = (nums)` to solve the following problem:
Write a function that takes an array of numbers as input and returns
the number of elements in the array that are greater than 10 and both
first and last digits of a number are odd (1, 3, 5, 7, 9).
For example:
specialFilter([15, -73, 14, -15]) => 1
specialFilter([33, -2, -3, 45, 21, 109]) => 2"
JavaScript/147,"/*
  You are given a positive integer n. You have to create an integer array a of length n.
      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
  and a[i] + a[j] + a[k] is a multiple of 3.

  Example :
      Input: n = 5
      Output: 1
      Explanation: 
      a = [1, 3, 7, 13, 21]
      The only valid triple is (1, 7, 13).
  */
const getMaxTriples = (n) => {
","
const getMaxTriples = (n) => {
","  let y = []
  for (let i = 1; i <= n; i++) {
    y.push(i * i - i + 1)
  }
  let u = 0
  for (let i = 0; i < n - 2; i++) {
    for (let j = i + 1; j < n - 1; j++) {
      for (let k = j + 1; k < n; k++) {
        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }
      }
    }
  }
  return u
}

","  let y = []
  for (let i = 1; i <= n; i++) {
    y.push(i)
  }
  let u = 0
  for (let i = 0; i < n - 2; i++) {
    for (let j = i + 1; j < n - 1; j++) {
      for (let k = j + 1; k < n; k++) {
        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }
      }
    }
  }
  return u
}

",missing logic,incorrect output,getMaxTriples,,,"const testGetMaxTriples = () => {
  console.assert(getMaxTriples(5) === 1)
  console.assert(getMaxTriples(6) === 4)
  console.assert(getMaxTriples(10) === 36)
  console.assert(getMaxTriples(100) === 53361)
}

testGetMaxTriples()
","const testGetMaxTriples = () => {
  console.assert(getMaxTriples(5) === 1)
}
testGetMaxTriples()
",const getMaxTriples = (n),"You are given a positive integer n. You have to create an integer array a of length n.
For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,
and a[i] + a[j] + a[k] is a multiple of 3.
Example :
Input: n = 5
Output: 1
Explanation:
a = [1, 3, 7, 13, 21]
The only valid triple is (1, 7, 13).","Write a JavaScript function `const getMaxTriples = (n)` to solve the following problem:
You are given a positive integer n. You have to create an integer array a of length n.
For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,
and a[i] + a[j] + a[k] is a multiple of 3.
Example :
Input: n = 5
Output: 1
Explanation:
a = [1, 3, 7, 13, 21]
The only valid triple is (1, 7, 13)."
JavaScript/148,"/* There are eight planets in our solar system: the closerst to the Sun
  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,
  Uranus, Neptune.
  Write a function that takes two planet names as strings planet1 and planet2.
  The function should return a tuple containing all planets whose orbits are
  located between the orbit of planet1 and the orbit of planet2, sorted by
  the proximity to the sun.
  The function should return an empty tuple if planet1 or planet2
  are not correct planet names.
  Examples
  bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
  bf(""Earth"", ""Mercury"") ==> (""Venus"")
  bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
  */
const bf = (planet1, planet2) => {
","
const bf = (planet1, planet2) => {
","  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
  let u = []
  let lo = -1
  let hi = -1
  for (let i = 0; i < 8; i++) {
    if (y[i] == planet1) { lo = i }
  }
  for (let i = 0; i < 8; i++) {
    if (y[i] == planet2) { hi = i }
  }
  if (lo == -1 || hi == -1 || lo == hi) { return [] }
  if (lo > hi) {
    let tmp = lo;
    lo = hi;
    hi = tmp;
  }
  for (let i = lo + 1; i < hi; i++) {
    u.push(y[i])
  }
  return u
}

","  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupyter', 'Saturn', 'Uranus', 'Neptune']
  let u = []
  let lo = -1
  let hi = -1
  for (let i = 0; i < 8; i++) {
    if (y[i] == planet1) { lo = i }
  }
  for (let i = 0; i < 8; i++) {
    if (y[i] == planet2) { hi = i }
  }
  if (lo == -1 || hi == -1 || lo == hi) { return [] }
  if (lo > hi) {
    let tmp = lo;
    lo = hi;
    hi = tmp;
  }
  for (let i = lo + 1; i < hi; i++) {
    u.push(y[i])
  }
  return u
}

",value misuse,incorrect output,bf,,,"const testBf = () => {
  console.assert(
    JSON.stringify(bf('Jupiter', 'Neptune')) ===
    JSON.stringify(['Saturn', 'Uranus'])
  )
  console.assert(
    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])
  )
  console.assert(
    JSON.stringify(bf('Mercury', 'Uranus')) ===
    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])
  )
  console.assert(
    JSON.stringify(bf('Neptune', 'Venus')) ===
    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])
  )
  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))
  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))
  console.assert(
    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])
  )
}

testBf()
","const testBf = () => {
  console.assert(
    JSON.stringify(bf('Jupiter', 'Neptune')) ===
    JSON.stringify(['Saturn', 'Uranus'])
  )
  console.assert(
    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])
  )
  console.assert(
    JSON.stringify(bf('Mercury', 'Uranus')) ===
    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])
  )
}
testBf()
","const bf = (planet1, planet2)","There are eight planets in our solar system: the closerst to the Sun
is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,
Uranus, Neptune.
Write a function that takes two planet names as strings planet1 and planet2.
The function should return a tuple containing all planets whose orbits are
located between the orbit of planet1 and the orbit of planet2, sorted by
the proximity to the sun.
The function should return an empty tuple if planet1 or planet2
are not correct planet names.
Examples
bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
bf(""Earth"", ""Mercury"") ==> (""Venus"")
bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")","Write a JavaScript function `const bf = (planet1, planet2)` to solve the following problem:
There are eight planets in our solar system: the closerst to the Sun
is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,
Uranus, Neptune.
Write a function that takes two planet names as strings planet1 and planet2.
The function should return a tuple containing all planets whose orbits are
located between the orbit of planet1 and the orbit of planet2, sorted by
the proximity to the sun.
The function should return an empty tuple if planet1 or planet2
are not correct planet names.
Examples
bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
bf(""Earth"", ""Mercury"") ==> (""Venus"")
bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")"
JavaScript/149,"/*Write a function that accepts a list of strings as a parameter,
  deletes the strings that have odd lengths from it,
  and returns the resulted list with a sorted order,
  The list is always a list of strings and never an array of numbers,
  and it may contain duplicates.
  The order of the list should be ascending by length of each word, and you
  should return the list sorted by that rule.
  If two words have the same length, sort the list alphabetically.
  The function should return a list of strings in sorted order.
  You may assume that all words will have the same length.
  For example:
  assert list_sort([""aa"", ""a"", ""aaa""]) => [""aa""]
  assert list_sort([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]
  */
const sortedListSum = (lst) => {
","
const sortedListSum = (lst) => {
","  let p = []
  for (let i = 0; i < lst.length; i++) {
    if (lst[i].length % 2 == 0) {
      p.push(lst[i])
    }
  }
  for (let j = p.length - 2; j >= 0; j--) {
    for (let k = 0; k <= j; k++) {
      let f = 0
      if (p[k].length > p[k + 1].length) { f = 1 }
      if (p[k].length == p[k + 1].length) {
        let r = p[k].length
        for (let l = 0; l < r; l++) {
          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {
            f = 1;
            break;
          }
          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {
            break;
          }
        }
      }
      if (f == 1) {
        let tmp = p[k]
        p[k] = p[k + 1]
        p[k + 1] = tmp
      }
    }
  }
  return p
}

","  let p = []
  for (let i = 0; i < lst.length; i++) {
    if (lst[i].length % 2 == 0) {
      p.push(lst[i])
    }
  }
  for (let j = p.length - 2; j >= 0; j--) {
    for (let k = 0; k <= j; k++) {
      let f = 0
      if (p[k].length > p[k + 1].length) { f = 1 }
      if (p[k].length == p[k + 1].length) {
        let r = p[k].length
        for (let l = 0; l < r; l++) {
          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {
            f = 1;
            break;
          }
          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {
            break;
          }
        }
      }
      if (f == 1) {
        let tmp = p[k]
        p[k + 1] = tmp
      }
    }
  }
  return p
}

",missing logic,incorrect output,sortedListSum,,,"const testSortedListSum = () => {
  console.assert(
    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])
  )
  console.assert(
    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===
    JSON.stringify(['AI', 'asdf', 'school'])
  )
  console.assert(
    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])
  )
  console.assert(
    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===
    JSON.stringify(['abcd', 'dcba'])
  )
  console.assert(
    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===
    JSON.stringify(['AI', 'ai', 'au'])
  )
  console.assert(
    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===
    JSON.stringify([])
  )
  console.assert(
    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===
    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])
  )
}

testSortedListSum()
","const testSortedListSum = () => {
  console.assert(
    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])
  )
  console.assert(
    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===
    JSON.stringify(['ab', 'cd'])
  )
}
testSortedListSum()
",const sortedListSum = (lst),"Write a function that accepts a list of strings as a parameter,
deletes the strings that have odd lengths from it,
and returns the resulted list with a sorted order,
The list is always a list of strings and never an array of numbers,
and it may contain duplicates.
The order of the list should be ascending by length of each word, and you
should return the list sorted by that rule.
If two words have the same length, sort the list alphabetically.
The function should return a list of strings in sorted order.
You may assume that all words will have the same length.
For example:
assert list_sort([""aa"", ""a"", ""aaa""]) => [""aa""]
assert list_sort([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]","Write a JavaScript function `const sortedListSum = (lst)` to solve the following problem:
Write a function that accepts a list of strings as a parameter,
deletes the strings that have odd lengths from it,
and returns the resulted list with a sorted order,
The list is always a list of strings and never an array of numbers,
and it may contain duplicates.
The order of the list should be ascending by length of each word, and you
should return the list sorted by that rule.
If two words have the same length, sort the list alphabetically.
The function should return a list of strings in sorted order.
You may assume that all words will have the same length.
For example:
assert list_sort([""aa"", ""a"", ""aaa""]) => [""aa""]
assert list_sort([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]"
JavaScript/150,"/*A simple program which should return the value of x if n is 
  a prime number and should return the value of y otherwise.

  Examples:
  for xOrY(7, 34, 12) == 34
  for xOrY(15, 8, 5) == 5
  
  */
const xOrY = (n, x, y) => {
","
const xOrY = (n, x, y) => {
","  let len = n
  if (len == 1 || len == 0) { return y }
  for (let i = 2; i * i <= len; i++) {
    if (len % i == 0) { return y }
  }
  return x
}

","  let len = n
  if (len == 1 || len == 0) { return y }
  for (let i = 2; i * i <= len; i++) {
    if (len % i - 1 == 0) { return y }
  }
  return x
}

",excess logic,incorrect output,xOrY,,,"const testXOrY = () => {
  console.assert(xOrY(7, 34, 12) === 34)
  console.assert(xOrY(15, 8, 5) === 5)
  console.assert(xOrY(3, 33, 5212) === 33)
  console.assert(xOrY(1259, 3, 52) === 3)
  console.assert(xOrY(7919, -1, 12) === -1)
  console.assert(xOrY(3609, 1245, 583) === 583)
  console.assert(xOrY(91, 56, 129) === 129)
  console.assert(xOrY(6, 34, 1234) === 1234)
  console.assert(xOrY(1, 2, 0) === 0)
  console.assert(xOrY(2, 2, 0) === 2)
}

testXOrY()
","const testXOrY = () => {
  console.assert(xOrY(7, 34, 12) === 34)
  console.assert(xOrY(15, 8, 5) === 5)
}
testXOrY()
","const xOrY = (n, x, y)","A simple program which should return the value of x if n is
a prime number and should return the value of y otherwise.
Examples:
for xOrY(7, 34, 12) == 34
for xOrY(15, 8, 5) == 5","Write a JavaScript function `const xOrY = (n, x, y)` to solve the following problem:
A simple program which should return the value of x if n is
a prime number and should return the value of y otherwise.
Examples:
for xOrY(7, 34, 12) == 34
for xOrY(15, 8, 5) == 5"
JavaScript/151,"/* Given a list of numbers, return the sum of squares of the numbers
  in the list that are odd. Ignore numbers that are negative or not integers.
  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
  doubleTheDifference([-1, -2, 0]) == 0
  doubleTheDifference([9, -2]) == 81
  doubleTheDifference([0]) == 0
  If the input list is empty, return 0.
  */
const doubleTheDifference = (lst) => {
","
const doubleTheDifference = (lst) => {
","  let p = 0
  for (let i = 0; i < lst.length; i++) {
    if (lst[i] % 2 == 1 && lst[i] > 0) {
      p += lst[i] * lst[i]
    }
  }
  return p
}

","  let p = 0
  for (let i = 0; i < lst.length; i++) {
    if (lst[i] > 0) {
      p += lst[i]
    }
  }
  return p
}

",missing logic,incorrect output,doubleTheDifference,,,"const testDoubleTheDifference = () => {
  console.assert(doubleTheDifference([]) === 0)
  console.assert(doubleTheDifference([5, 4]) === 25)
  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)
  console.assert(doubleTheDifference([-10, -20, -30]) === 0)
  console.assert(doubleTheDifference([-1, -2, 8]) === 0)
  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)
  let lst = []
  let odd_sum = 0
  for (let i = -99; i < 100; i += 2) {
    if (i % 2 != 0 && i > 0) { odd_sum += i * i }
    lst.push(i)
  }
  console.assert(doubleTheDifference(lst) === odd_sum)
}
testDoubleTheDifference()
","const testDoubleTheDifference = () => {
  console.assert(doubleTheDifference([1,3,2,0]) === 10)
  console.assert(doubleTheDifference([-1,-2,0]) === 0)
  console.assert(doubleTheDifference([9,-2]) === 81)
  console.assert(doubleTheDifference([0]) === 0)
}
testDoubleTheDifference()
",const doubleTheDifference = (lst),"Given a list of numbers, return the sum of squares of the numbers
in the list that are odd. Ignore numbers that are negative or not integers.
doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
doubleTheDifference([-1, -2, 0]) == 0
doubleTheDifference([9, -2]) == 81
doubleTheDifference([0]) == 0
If the input list is empty, return 0.","Write a JavaScript function `const doubleTheDifference = (lst)` to solve the following problem:
Given a list of numbers, return the sum of squares of the numbers
in the list that are odd. Ignore numbers that are negative or not integers.
doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
doubleTheDifference([-1, -2, 0]) == 0
doubleTheDifference([9, -2]) == 81
doubleTheDifference([0]) == 0
If the input list is empty, return 0."
JavaScript/152,"/*I think we all remember that feeling when the result of some long-awaited
  event is finally known. The feelings and thoughts you have at that moment are
  definitely worth noting down and comparing.
  Your task is to determine if a person correctly guessed the results of a number of matches.
  You are given two arrays of scores and guesses of equal length, where each index shows a match. 
  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
  the value is 0, and if not, the value is the absolute difference between the guess and the score.
  
  
  example:

  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
  */
const compare = (game, guess) => {
","
const compare = (game, guess) => {
","  for (let i = 0; i < guess.length; i++) {
    game[i] -= guess[i]
 if (game[i]<0)
 game[i]=-game[i];  }
  return game
}

","  for (let i = 0; i < guess.length; i++) {
    game[i] -= guess[i]
 if (game[i]<0)
 game[i]=-game[i];
 if (guess[i]!=0)
 game[i]-=guess[i];  }
  return game
}

",excess logic,incorrect output,compare,,,"const testCompare = () => {
  console.assert(
    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===
    JSON.stringify([0, 0, 0, 0, 3, 3])
  )
  console.assert(
    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===
    JSON.stringify([4,4,1,0,0,6])
  )
  console.assert(
    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===
    JSON.stringify([0, 0, 0, 0, 3, 3])
  )
  console.assert(
    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===
    JSON.stringify([0, 0, 0, 0, 0, 0])
  )
  console.assert(
    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===
    JSON.stringify([2, 4, 6])
  )
  console.assert(
    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===
    JSON.stringify([2, 0, 0, 1])
  )
}

testCompare()
","const testCompare = () => {
  console.assert(
    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===
    JSON.stringify([0, 0, 0, 0, 3, 3])
  )
  console.assert(
    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===
    JSON.stringify([4,4,1,0,0,6])
  )
}
testCompare()
","const compare = (game, guess)","I think we all remember that feeling when the result of some long-awaited
event is finally known. The feelings and thoughts you have at that moment are
definitely worth noting down and comparing.
Your task is to determine if a person correctly guessed the results of a number of matches.
You are given two arrays of scores and guesses of equal length, where each index shows a match.
Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
the value is 0, and if not, the value is the absolute difference between the guess and the score.
example:
compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]","Write a JavaScript function `const compare = (game, guess)` to solve the following problem:
I think we all remember that feeling when the result of some long-awaited
event is finally known. The feelings and thoughts you have at that moment are
definitely worth noting down and comparing.
Your task is to determine if a person correctly guessed the results of a number of matches.
You are given two arrays of scores and guesses of equal length, where each index shows a match.
Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
the value is 0, and if not, the value is the absolute difference between the guess and the score.
example:
compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]"
JavaScript/153,"/*You will be given the name of a class (a string) and a list of extensions.
  The extensions are to be used to load additional classes to the class. The
  strength of the extension is as follows: Let CAP be the number of the uppercase
  letters in the extension's name, and let SM be the number of lowercase letters
  in the extension's name, the strength is given by the fraction CAP - SM.
  You should find the strongest extension and return a string in this
  format: ClassName.StrongestExtensionName.
  If there are two or more extensions with the same strength, you should
  choose the one that comes first in the list.
  For example, if you are given ""Slices"" as the class and a list of the
  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension
  (its strength is -1).
  Example:
  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
  */
const strongestExtension = (class_name, extensions) => {
","
const strongestExtension = (class_name, extensions) => {
","  let u = 0
  let s = -Infinity
  for (let i = extensions.length - 1; i >= 0; i--) {
    let y = 0
    for (let j = 0; j < extensions[i].length; j++) {
      let k = extensions[i][j].charCodeAt()
      if (k >= 65 && k <= 90) { y += 1 }
      if (k >= 97 && k <= 122) { y -= 1 }
    }
    if (y >= s) {
      s = y;
      u = i;
    }
  }
  return class_name + '.' + extensions[u]
}

","  let u = 0
  let s = -Infinity
  for (let i = extensions.length - 1; i >= 0; i--) {
    let y = 0
    for (let j = 0; j < extensions[i].length; j++) {
      let k = extensions[i][j].charCodeAt()
      if (k >= 65 && k <= 90) { y += 1 }
      if (k >= 97 && k <= 122) { y -= 1 }
    }
    if (y >= s) {
      s = y;
      u = i;
    }
  }
  return class_name + extensions[u]
}

",missing logic,incorrect output,strongestExtension,,,"const testStrongestExtension = () => {
  console.assert(
    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===
    'Watashi.eIGHt8OKe'
  )
  console.assert(
    strongestExtension('Boku123', [
      'nani',
      'NazeDa',
      'YEs.WeCaNe',
      '32145tggg',
    ]) === 'Boku123.YEs.WeCaNe'
  )
  console.assert(
    strongestExtension('__YESIMHERE', [
      't',
      'eMptY',
      'nothing',
      'zeR00',
      'NuLl__',
      '123NoooneB321',
    ]) === '__YESIMHERE.NuLl__'
  )
  console.assert(
    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'
  )
  console.assert(
    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===
    '__HAHA.123'
  )
  console.assert(
    strongestExtension('YameRore', [
      'HhAas',
      'okIWILL123',
      'WorkOut',
      'Fails',
      '-_-',
    ]) === 'YameRore.okIWILL123'
  )
  console.assert(
    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===
    'finNNalLLly.WoW'
  )
  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')
  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')
}

testStrongestExtension()
","const testStrongestExtension = () => {
  console.assert(
    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===
    'my_class.AA'
  )
}
testStrongestExtension()
","const strongestExtension = (class_name, extensions)","You will be given the name of a class (a string) and a list of extensions.
The extensions are to be used to load additional classes to the class. The
strength of the extension is as follows: Let CAP be the number of the uppercase
letters in the extension's name, and let SM be the number of lowercase letters
in the extension's name, the strength is given by the fraction CAP - SM.
You should find the strongest extension and return a string in this
format: ClassName.StrongestExtensionName.
If there are two or more extensions with the same strength, you should
choose the one that comes first in the list.
For example, if you are given ""Slices"" as the class and a list of the
extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension
(its strength is -1).
Example:
for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'","Write a JavaScript function `const strongestExtension = (class_name, extensions)` to solve the following problem:
You will be given the name of a class (a string) and a list of extensions.
The extensions are to be used to load additional classes to the class. The
strength of the extension is as follows: Let CAP be the number of the uppercase
letters in the extension's name, and let SM be the number of lowercase letters
in the extension's name, the strength is given by the fraction CAP - SM.
You should find the strongest extension and return a string in this
format: ClassName.StrongestExtensionName.
If there are two or more extensions with the same strength, you should
choose the one that comes first in the list.
For example, if you are given ""Slices"" as the class and a list of the
extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension
(its strength is -1).
Example:
for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'"
JavaScript/154,"/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
  cycpatternCheck(""abcd"",""abd"") => false
  cycpatternCheck(""hello"",""ell"") => true
  cycpatternCheck(""whassup"",""psus"") => false
  cycpatternCheck(""abab"",""baa"") => true
  cycpatternCheck(""efef"",""eeff"") => false
  cycpatternCheck(""himenss"",""simen"") => true
  */
const cycpatternCheck = (a, b) => {
","
const cycpatternCheck = (a, b) => {
","  let l = b.length
  let pat = b + b
  for (let i = 0; i < a.length - l + 1; i++) {
    for (let j = 0; j < l + 1; j++) {
      let y = 1
      for (let k = 0; k < l; k++) {
        if (a[i + k] != pat[j + k]) { y = 0 }
      }
      if (y == 1) {
        return true
      }
    }
  }
  return false
}

","  let l = b.length
  let pat = b + b
  for (let i = 0; i < a.length - l + 1; i++) {
    for (let j = 0; j < b.length - l + 1; j++) {
      let y = 1
      for (let k = 0; k < l; k++) {
        if (a[i + k] != pat[j + k]) { y = 0 }
      }
      if (y == 1) {
        return true
      }
    }
  }
  return false
}

",value misuse,incorrect output,cycpatternCheck,,,"const testCycpatternCheck = () => {
  console.assert(cycpatternCheck('xyzw', 'xyw') === false)
  console.assert(cycpatternCheck('yello', 'ell') === true)
  console.assert(cycpatternCheck('whattup', 'ptut') === false)
  console.assert(cycpatternCheck('efef', 'fee') === true)
  console.assert(cycpatternCheck('abab', 'aabb') === false)
  console.assert(cycpatternCheck('winemtt', 'tinem') === true)
}

testCycpatternCheck()
","const testCycpatternCheck = () => {
  console.assert(cycpatternCheck('abcd', 'abd') === false)
  console.assert(cycpatternCheck('hello', 'ell') === true)
  console.assert(cycpatternCheck('whassup', 'psus') === false)
  console.assert(cycpatternCheck('abab', 'baa') === true)
  console.assert(cycpatternCheck('efef', 'eeff') === false)
  console.assert(cycpatternCheck('himenss', 'simen') === true)
}
testCycpatternCheck()
","const cycpatternCheck = (a, b)","You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
cycpatternCheck(""abcd"",""abd"") => false
cycpatternCheck(""hello"",""ell"") => true
cycpatternCheck(""whassup"",""psus"") => false
cycpatternCheck(""abab"",""baa"") => true
cycpatternCheck(""efef"",""eeff"") => false
cycpatternCheck(""himenss"",""simen"") => true","Write a JavaScript function `const cycpatternCheck = (a, b)` to solve the following problem:
You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
cycpatternCheck(""abcd"",""abd"") => false
cycpatternCheck(""hello"",""ell"") => true
cycpatternCheck(""whassup"",""psus"") => false
cycpatternCheck(""abab"",""baa"") => true
cycpatternCheck(""efef"",""eeff"") => false
cycpatternCheck(""himenss"",""simen"") => true"
JavaScript/155,"/*Given an integer. return a tuple that has the number of even and odd digits respectively.

   Example:
      evenOddCount(-12) ==> (1, 1)
      evenOddCount(123) ==> (1, 2)
  */
const evenOddCount = (num) => {
","
const evenOddCount = (num) => {
","  let o = 0
  let e = 0
  if (num < 0) { num = -num }
  while (num > 0) {
    if (num % 2 == 0) { e++ }
    else { o++ }
    num = (num - num % 10) / 10
  }
  return (e, o)
}

","  let o = 0
  let e = 0
  if (num < 0) { num = -num }
  while (num > 0) {
    if (num % 2 == 0) { e++ }
    else { o++ }
    num = num - num % 10
  }
  return (e, o)
}

",missing logic,incorrect output,evenOddCount,,,"const testEvenOddCount = () => {
  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))
  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))
  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))
  console.assert(
    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))
  )
  console.assert(
    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))
  )
  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))
  console.assert(
    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))
  )
  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))
}

testEvenOddCount()
","const testEvenOddCount = () => {
  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))
  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))
}
testEvenOddCount()
",const evenOddCount = (num),"Given an integer. return a tuple that has the number of even and odd digits respectively.
Example:
evenOddCount(-12) ==> (1, 1)
evenOddCount(123) ==> (1, 2)","Write a JavaScript function `const evenOddCount = (num)` to solve the following problem:
Given an integer. return a tuple that has the number of even and odd digits respectively.
Example:
evenOddCount(-12) ==> (1, 1)
evenOddCount(123) ==> (1, 2)"
JavaScript/156,"/*
  Given a positive integer, obtain its roman numeral equivalent as a string,
  and return it in lowercase.
  Restrictions: 1 <= num <= 1000

  Examples:
  >>> intToMiniRoman(19) == 'xix'
  >>> intToMiniRoman(152) == 'clii'
  >>> intToMiniRoman(426) == 'cdxxvi'
  */
const intToMiniRoman = (number) => {
","
const intToMiniRoman = (number) => {
","  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]
  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']
  let i = 12
  let res = ''
  while (number) {
    let div = (number - number % num[i]) / num[i]
    number = number % num[i]
    while (div) {
      res += sym[i]
      div -= 1
    }
    i -= 1
  }
  return res
}

","  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]
  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']
  let i = 12
  let res = ''
  while (number) {
    let div = (number - number % num[i]) / num[i]
    while (div) {
      res += sym[i]
      div -= 1
    }
    i -= 1
  }
  return res
}

",missing logic,infinite loop,intToMiniRoman,,,"const testIntToMiniRoman = () => {
  console.assert(intToMiniRoman(19) === 'xix')
  console.assert(intToMiniRoman(152) === 'clii')
  console.assert(intToMiniRoman(251) === 'ccli')
  console.assert(intToMiniRoman(426) === 'cdxxvi')
  console.assert(intToMiniRoman(500) === 'd')
  console.assert(intToMiniRoman(1) === 'i')
  console.assert(intToMiniRoman(4) === 'iv')
  console.assert(intToMiniRoman(43) === 'xliii')
  console.assert(intToMiniRoman(90) === 'xc')
  console.assert(intToMiniRoman(94) === 'xciv')
  console.assert(intToMiniRoman(532) === 'dxxxii')
  console.assert(intToMiniRoman(900) === 'cm')
  console.assert(intToMiniRoman(994) === 'cmxciv')
  console.assert(intToMiniRoman(1000) === 'm')
}

testIntToMiniRoman()
","const testIntToMiniRoman = () => {
  console.assert(intToMiniRoman(19) === 'xix')
  console.assert(intToMiniRoman(152) === 'clii')
  console.assert(intToMiniRoman(426) === 'cdxxvi')
}
testIntToMiniRoman()
",const intToMiniRoman = (number),"Given a positive integer, obtain its roman numeral equivalent as a string,
and return it in lowercase.
Restrictions: 1 <= num <= 1000
Examples:
>>> intToMiniRoman(19) == 'xix'
>>> intToMiniRoman(152) == 'clii'
>>> intToMiniRoman(426) == 'cdxxvi'","Write a JavaScript function `const intToMiniRoman = (number)` to solve the following problem:
Given a positive integer, obtain its roman numeral equivalent as a string,
and return it in lowercase.
Restrictions: 1 <= num <= 1000
Examples:
>>> intToMiniRoman(19) == 'xix'
>>> intToMiniRoman(152) == 'clii'
>>> intToMiniRoman(426) == 'cdxxvi'"
JavaScript/157,"/*
 Given the lengths of the three sides of a triangle. Return true if the three
  sides form a right-angled triangle, false otherwise.
  A right-angled triangle is a triangle in which one angle is right angle or
  90 degree.
  Example:
  rightAngleTriangle(3, 4, 5) == true
  rightAngleTriangle(1, 2, 3) == false
  */
const rightAngleTriangle = (a, b, c) => {
","
const rightAngleTriangle = (a, b, c) => {
","  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)
}

","  return (a * a + b * b == c * c)
}

",missing logic,incorrect output,rightAngleTriangle,,,"const testRightAngleTriangle = () => {
  console.assert(rightAngleTriangle(3, 4, 5) === true)
  console.assert(rightAngleTriangle(1, 2, 3) === false)
  console.assert(rightAngleTriangle(10, 6, 8) === true)
  console.assert(rightAngleTriangle(2, 2, 2) === false)
  console.assert(rightAngleTriangle(7, 24, 25) === true)
  console.assert(rightAngleTriangle(10, 5, 7) === false)
  console.assert(rightAngleTriangle(5, 12, 13) === true)
  console.assert(rightAngleTriangle(15, 8, 17) === true)
  console.assert(rightAngleTriangle(48, 55, 73) === true)
  console.assert(rightAngleTriangle(1, 1, 1) === false)
  console.assert(rightAngleTriangle(2, 2, 10) === false)
}

testRightAngleTriangle()
","const testRightAngleTriangle = () => {
  console.assert(rightAngleTriangle(3, 4, 5) === true)
  console.assert(rightAngleTriangle(1, 2, 3) === false)
}
testRightAngleTriangle()
","const rightAngleTriangle = (a, b, c)","Given the lengths of the three sides of a triangle. Return true if the three
sides form a right-angled triangle, false otherwise.
A right-angled triangle is a triangle in which one angle is right angle or
90 degree.
Example:
rightAngleTriangle(3, 4, 5) == true
rightAngleTriangle(1, 2, 3) == false","Write a JavaScript function `const rightAngleTriangle = (a, b, c)` to solve the following problem:
Given the lengths of the three sides of a triangle. Return true if the three
sides form a right-angled triangle, false otherwise.
A right-angled triangle is a triangle in which one angle is right angle or
90 degree.
Example:
rightAngleTriangle(3, 4, 5) == true
rightAngleTriangle(1, 2, 3) == false"
JavaScript/158,"/*Write a function that accepts a list of strings.
  The list contains different words. Return the word with maximum number
  of unique characters. If multiple strings have maximum number of unique
  characters, return the one which comes first in lexicographical order.

  findMax([""name"", ""of"", ""string""]) === ""string""
  findMax([""name"", ""enam"", ""game""]) === ""enam""
  findMax([""aaaaaaa"", ""bb"" ,""cc""]) === """"aaaaaaa""
  */
const findMax = (words) => {
","
const findMax = (words) => {
","  let s = -1
  let u = -1
  if (words.length == 0) { return '' }
  for (let i = 0; i < words.length; i++) {
    let p = 0
    for (let j = 0; j < words[i].length; j++) {
      let y = 1
      for (let k = 0; k < j; k++) {
        if (words[i][j] == words[i][k]) { y = 0 }
      }
      if (y == 1) { p++ }
    }
    if (p > s || (p == s && words[i] < words[u])) {
      u = i;
      s = p;
    }
  }
  return words[u]
}

","  let s = -1
  let u = -1
  if (words.length == 0) { return '' }
  for (let i = 0; i < words.length; i++) {
    let p = 0
    for (let j = 0; j < words[i].length; j++) {
      let y = 1
      for (let k = 0; k < j; k++) {
        if (words[i][j] == words[i][k]) { y = 0 }
      }
    }
    if (p > s || (p == s && words[i] < words[u])) {
      u = i;
      s = p;
    }
  }
  return words[u]
}

",missing logic,incorrect output,findMax,,,"const testFindMax = () => {
  console.assert(findMax(['name', 'of', 'string']) === 'string')
  console.assert(findMax(['name', 'enam', 'game']) === 'enam')
  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')
  console.assert(findMax(['abc', 'cba']) === 'abc')
  console.assert(
    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'
  )
  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')
  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')
  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')
  console.assert(findMax(['b']) === 'b')
  console.assert(findMax(['play', 'play', 'play']) === 'play')
}

testFindMax()
","const testFindMax = () => {
  console.assert(findMax(['name', 'of', 'string']) === 'string')
  console.assert(findMax(['name', 'enam', 'game']) === 'enam')
  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')
}
testFindMax()
",const findMax = (words),"Write a function that accepts a list of strings.
The list contains different words. Return the word with maximum number
of unique characters. If multiple strings have maximum number of unique
characters, return the one which comes first in lexicographical order.
findMax([""name"", ""of"", ""string""]) === ""string""
findMax([""name"", ""enam"", ""game""]) === ""enam""
findMax([""aaaaaaa"", ""bb"" ,""cc""]) === """"aaaaaaa""","Write a JavaScript function `const findMax = (words)` to solve the following problem:
Write a function that accepts a list of strings.
The list contains different words. Return the word with maximum number
of unique characters. If multiple strings have maximum number of unique
characters, return the one which comes first in lexicographical order.
findMax([""name"", ""of"", ""string""]) === ""string""
findMax([""name"", ""enam"", ""game""]) === ""enam""
findMax([""aaaaaaa"", ""bb"" ,""cc""]) === """"aaaaaaa"""
JavaScript/159,"/*
  You're a hungry rabbit, and you already have eaten a certain number of carrots,
  but now you need to eat more carrots to complete the day's meals.
  you should return an array of [ total number of eaten carrots after your meals,
                                  the number of carrots left after your meals ]
  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
  
  Example:
  * eat(5, 6, 10) -> [11, 4]
  * eat(4, 8, 9) -> [12, 1]
  * eat(1, 10, 10) -> [11, 0]
  * eat(2, 11, 5) -> [7, 0]
  
  Variables:
  @number : integer
      the number of carrots that you have eaten.
  @need : integer
      the number of carrots that you need to eat.
  @remaining : integer
      the number of remaining carrots thet exist in stock
  
  Constrain:
  * 0 <= number <= 1000
  * 0 <= need <= 1000
  * 0 <= remaining <= 1000

  Have fun :)
  */
const eat = (number, need, remaining) => {
","
const eat = (number, need, remaining) => {
","  if (need <= remaining) {
    return [need + number, remaining - need]
  }
  return [remaining + number, 0]
}

","  if (need <= remaining) {
    return [need + number, number + remaining - need]
  }
  return [remaining + need + number, 0]
}

",excess logic,incorrect output,eat,,,"const testEat = () => {
  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))
  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))
  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))
  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))
  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))
  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))
}

testEat()
","const testEat = () => {
  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))
  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))
  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))
  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))
}
testEat()
","const eat = (number, need, remaining)","You're a hungry rabbit, and you already have eaten a certain number of carrots,
but now you need to eat more carrots to complete the day's meals.
you should return an array of [ total number of eaten carrots after your meals,
the number of carrots left after your meals ]
if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
Example:
* eat(5, 6, 10) -> [11, 4]
* eat(4, 8, 9) -> [12, 1]
* eat(1, 10, 10) -> [11, 0]
* eat(2, 11, 5) -> [7, 0]
Variables:
@number : integer
the number of carrots that you have eaten.
@need : integer
the number of carrots that you need to eat.
@remaining : integer
the number of remaining carrots thet exist in stock
Constrain:
* 0 <= number <= 1000
* 0 <= need <= 1000
* 0 <= remaining <= 1000
Have fun :)","Write a JavaScript function `const eat = (number, need, remaining)` to solve the following problem:
You're a hungry rabbit, and you already have eaten a certain number of carrots,
but now you need to eat more carrots to complete the day's meals.
you should return an array of [ total number of eaten carrots after your meals,
the number of carrots left after your meals ]
if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
Example:
* eat(5, 6, 10) -> [11, 4]
* eat(4, 8, 9) -> [12, 1]
* eat(1, 10, 10) -> [11, 0]
* eat(2, 11, 5) -> [7, 0]
Variables:
@number : integer
the number of carrots that you have eaten.
@need : integer
the number of carrots that you need to eat.
@remaining : integer
the number of remaining carrots thet exist in stock
Constrain:
* 0 <= number <= 1000
* 0 <= need <= 1000
* 0 <= remaining <= 1000
Have fun :)"
JavaScript/160,"/*
  Given two lists operator, and operand. The first list has basic algebra operations, and 
  the second list is a list of integers. Use the two given lists to build the algebric 
  expression and return the evaluation of this expression.

  The basic algebra operations:
  Addition ( + ) 
  Subtraction ( - ) 
  Multiplication ( * ) 
  Floor division ( // ) 
  Exponentiation ( ** ) 

  Example:
  operator['+', '*', '-']
  array = [2, 3, 4, 5]
  result = 2 + 3 * 4 - 5
  => result = 9

  Note:
      The length of operator list is equal to the length of operand list minus one.
      Operand is a list of of non-negative integers.
      Operator list has at least one operator, and operand list has at least two operands.

  */
const doAlgebra = (operator, operand) => {
","
const doAlgebra = (operator, operand) => {
","  while (operator.length > 0) {
    let y = 0
    for (let i = operator.length - 1; i >= 0; i--) {
      if (operator[i] == '**') {
        let u = operand[i]
        while (operand[i + 1] > 1) {
          operand[i + 1]--;
          operand[i] *= u;
        }
        operand.splice(i + 1, 1)
        operator.splice(i, 1)
        y = 1;
        break;
      }
    }
    if (y == 1) { continue }
    for (let i = 0; i < operator.length; i++) {
      if (operator[i] == '*') {
        operand[i] *= operand[i + 1]
        operand.splice(i + 1, 1)
        operator.splice(i, 1)
        y = 1;
        break;
      }
      else if (operator[i] == '//') {
        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]
        operand.splice(i + 1, 1)
        operator.splice(i, 1)
        y = 1;
        break;
      }
    }
    if (y == 1) { continue }
    for (let i = 0; i < operator.length; i++) {
      if (operator[i] == '+') {
        operand[i] += operand[i + 1]
        operand.splice(i + 1, 1)
        operator.splice(i, 1)
        y = 1;
        break;
      }
      else if (operator[i] == '-') {
        operand[i] -= operand[i + 1]
        operand.splice(i + 1, 1)
        operator.splice(i, 1)
        y = 1;
        break;
      }
    }
    if (y == 1) { continue }
  }
  return operand[0]
}

","  while (operator.length > 0) {
    let y = 0
    for (let i = operator.length - 1; i >= 0; i--) {
      if (operator[i] == '**') {
        let u = operand[i]
        while (operand[i + 1] > 1) {
          operand[i + 1]--;
          operand[i] *= u;
        }
        operand.splice(i + 1, 1)
        operator.splice(i, 1)
        y = 1;
        break;
      }
    }
    if (y == 1) { continue }
    for (let i = 0; i < operator.length; i++) {
      if (operator[i] == '*') {
        operand[i] *= operand[i + 1]
        operand.splice(i + 1, 1)
        operator.splice(i, 1)
        y = 1;
        break;
      }
      else if (operator[i] == '//') {
        operand[i] = (operand[i + 1] - operand[i] % operand[i + 1]) / operand[i + 1]
        operand.splice(i + 1, 1)
        operator.splice(i, 1)
        y = 1;
        break;
      }
    }
    if (y == 1) { continue }
    for (let i = 0; i < operator.length; i++) {
      if (operator[i] == '+') {
        operand[i] += operand[i + 1]
        operand.splice(i + 1, 1)
        operator.splice(i, 1)
        y = 1;
        break;
      }
      else if (operator[i] == '-') {
        operand[i] -= operand[i + 1]
        operand.splice(i + 1, 1)
        operator.splice(i, 1)
        y = 1;
        break;
      }
    }
    if (y == 1) { continue }
  }
  return operand[0]
}

",excess logic,incorrect output,doAlgebra,,,"const testDoAlgebra = () => {
  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)
  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)
  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)
}

testDoAlgebra()
",,"const doAlgebra = (operator, operand)","Given two lists operator, and operand. The first list has basic algebra operations, and
the second list is a list of integers. Use the two given lists to build the algebric
expression and return the evaluation of this expression.
The basic algebra operations:
Addition ( + )
Subtraction ( - )
Multiplication ( * )
Floor division ( // )
Exponentiation ( ** )
Example:
operator['+', '*', '-']
array = [2, 3, 4, 5]
result = 2 + 3 * 4 - 5
=> result = 9
Note:
The length of operator list is equal to the length of operand list minus one.
Operand is a list of of non-negative integers.
Operator list has at least one operator, and operand list has at least two operands.","Write a JavaScript function `const doAlgebra = (operator, operand)` to solve the following problem:
Given two lists operator, and operand. The first list has basic algebra operations, and
the second list is a list of integers. Use the two given lists to build the algebric
expression and return the evaluation of this expression.
The basic algebra operations:
Addition ( + )
Subtraction ( - )
Multiplication ( * )
Floor division ( // )
Exponentiation ( ** )
Example:
operator['+', '*', '-']
array = [2, 3, 4, 5]
result = 2 + 3 * 4 - 5
=> result = 9
Note:
The length of operator list is equal to the length of operand list minus one.
Operand is a list of of non-negative integers.
Operator list has at least one operator, and operand list has at least two operands."
JavaScript/161,"/*You are given a string s.
  if s[i] is a letter, reverse its case from lower to upper or vise versa, 
  otherwise keep it as it is.
  If the string contains no letters, reverse the string.
  The function should return the resulted string.
  Examples
  solve(""1234"") = ""4321""
  solve(""ab"") = ""AB""
  solve(""#a@C"") = ""#A@c""
  */
const solve = (s) => {
","
const solve = (s) => {
","  let t = 0
  let p = ''
  for (let i = 0; i < s.length; i++) {
    let y = s[i].charCodeAt()
    if (y >= 65 && y <= 90) {
      y += 32;
      t = 1;
    } else if (y >= 97 && y <= 122) {
      y -= 32;
      t = 1;
    }
    p += String.fromCharCode(y)
  }
  if (t == 1) { return p }
  let u = ''
  for (let i = 0; i < p.length; i++) {
    u += p[p.length - i - 1]
  }
  return u
}

","  let t = 0
  let p = ''
  for (let i = 0; i < s.length; i++) {
    let y = s[i].charCodeAt()
    if (y >= 65 && y <= 90) {
      y += 32;
      t = 1;
    }
    p += String.fromCharCode(y)
  }
  if (t == 1) { return p }
  let u = ''
  for (let i = 0; i < p.length; i++) {
    u += p[p.length - i - 1]
  }
  return u
}

",missing logic,incorrect output,solve,,,"const testSolve = () => {
  console.assert(solve('AsDf') === 'aSdF')
  console.assert(solve('1234') === '4321')
  console.assert(solve('ab') === 'AB')
  console.assert(solve('#a@C') === '#A@c')
  console.assert(solve('#AsdfW^45') === '#aSDFw^45')
  console.assert(solve('#6@2') === '2@6#')
  console.assert(solve('#$a^D') === '#$A^d')
  console.assert(solve('#ccc') === '#CCC')
}

testSolve()
","const testSolve = () => {
  console.assert(solve('1234') === '4321')
  console.assert(solve('ab') === 'AB')
  console.assert(solve('#a@C') === '#A@c')
}
testSolve()
",const solve = (s),"You are given a string s.
if s[i] is a letter, reverse its case from lower to upper or vise versa,
otherwise keep it as it is.
If the string contains no letters, reverse the string.
The function should return the resulted string.
Examples
solve(""1234"") = ""4321""
solve(""ab"") = ""AB""
solve(""#a@C"") = ""#A@c""","Write a JavaScript function `const solve = (s)` to solve the following problem:
You are given a string s.
if s[i] is a letter, reverse its case from lower to upper or vise versa,
otherwise keep it as it is.
If the string contains no letters, reverse the string.
The function should return the resulted string.
Examples
solve(""1234"") = ""4321""
solve(""ab"") = ""AB""
solve(""#a@C"") = ""#A@c"""
JavaScript/162,"/*
  Given a string 'text', return its md5 hash equivalent string.
  If 'text' is an empty string, return null.

  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
  */
const stringToMd5 = (text) => {
","
const stringToMd5 = (text) => {
","  if (text == '') { return null }
  var md5 = require('js-md5')
  return md5(text)
}

","  if (text == '') { return null }
  var md5 = require('js-md5')
  return md5('text')
}

",function misuse,incorrect output,stringToMd5,,,"const testStringToMd5 = () => {
  console.assert(
    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'
  )
  console.assert(stringToMd5('') === null)
  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')
  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')
}

testStringToMd5()
","const testStringToMd5 = () => {
  console.assert(
    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'
  )
}
testStringToMd5()
",const stringToMd5 = (text),"Given a string 'text', return its md5 hash equivalent string.
If 'text' is an empty string, return null.
>>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'","Write a JavaScript function `const stringToMd5 = (text)` to solve the following problem:
Given a string 'text', return its md5 hash equivalent string.
If 'text' is an empty string, return null.
>>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"
JavaScript/163,"/*
  Given two positive integers a and b, return the even digits between a
  and b, in ascending order.

  For example:
  generateIntegers(2, 8) => [2, 4, 6, 8]
  generateIntegers(8, 2) => [2, 4, 6, 8]
  generateIntegers(10, 14) => []
  */
const generateIntegers = (a, b) => {
","
const generateIntegers = (a, b) => {
","  if (a > b) {
    let tmp = a;
    a = b;
    b = tmp;
  }
  let y = []
  for (let i = a; i <= b; i++) {
    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }
  }
  return y
}

","  if (a > b) {
    let tmp = a;
    a = b;
    b = tmp;
  }
  let y = []
  for (let i = a; i > b; i++) {
    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }
  }
  return y
}

",value misuse,incorrect output,generateIntegers,,,"const testGenerateIntegers = () => {
  console.assert(
    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])
  )
  console.assert(
    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])
  )
  console.assert(
    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])
  )
  console.assert(
    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])
  )
}

testGenerateIntegers()
","const testGenerateIntegers = () => {
  console.assert(
    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])
  )
  console.assert(
    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])
  )
  console.assert(
    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])
  )
}
testGenerateIntegers()
","const generateIntegers = (a, b)","Given two positive integers a and b, return the even digits between a
and b, in ascending order.
For example:
generateIntegers(2, 8) => [2, 4, 6, 8]
generateIntegers(8, 2) => [2, 4, 6, 8]
generateIntegers(10, 14) => []","Write a JavaScript function `const generateIntegers = (a, b)` to solve the following problem:
Given two positive integers a and b, return the even digits between a
and b, in ascending order.
For example:
generateIntegers(2, 8) => [2, 4, 6, 8]
generateIntegers(8, 2) => [2, 4, 6, 8]
generateIntegers(10, 14) => []"
